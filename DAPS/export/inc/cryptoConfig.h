/*
 *	cryptoConfig.h
 *	Release $Name: MATRIXSSL-3-4-2-COMM $
 */
/*
 *	Copyright (c) 2013 INSIDE Secure Corporation
 *	All Rights Reserved
 *
 *	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *	Please do not edit this file without first consulting INSIDE support.
 *	Unauthorized changes to this file are not supported by INSIDE.
 *
 *	The copyright notice above does not evidence any actual or intended
 *	publication of such source code.
 *
 *	This Module contains Proprietary Information of INSIDE and should be
 *	treated as Confidential.
 *
 *	The information in this file is provided for the exclusive use of the
 *	licensees of INSIDE. Such users have the right to use, modify,
 *	and incorporate this code into products for purposes authorized by the
 *	license agreement provided they include this notice and the associated
 *	copyright notice with any such product.
 *
 *	The information in this file is provided "AS IS" without warranty.
 */
/******************************************************************************/

#ifndef _h_PS_CRYPTOCONFIG
#define _h_PS_CRYPTOCONFIG

/******************************************************************************/
/* Configurable features */
/******************************************************************************/


/*
	Enable psTraceCrypto family of APIs for debugging the crypto module
*/
/* #define USE_CRYPTO_TRACE */


/******************************************************************************/
/*
	Public-Key Algorithms and performance settings
*/
#define USE_RSA /* Enable/Disable RSA */


/*
	Elliptic Curve settings
*/
#define USE_ECC  /* Enable/Disable ECC */


#define USE_DH

/*
	Set to either optimize for faster speed or for smaller ram usage
	when using public key operations.  Only one may be defined.
	
	The speed gain for optimizing for speed is around 5%
	The memory savings for optimizing for ram is around 50%
*/
#define PS_PUBKEY_OPTIMIZE_FOR_SMALLER_RAM
/* #define PS_PUBKEY_OPTIMIZE_FOR_FASTER_SPEED */


/******************************************************************************/
/*
	Symmetric bock ciphers (including CBC mode) and performance settings
*/
#define USE_AES /* Enable/Disable AES */
/* #define USE_AES_CTR */ /* Counter Mode.  USE_AES must be enabled */
 #define USE_AES_GCM  /* Galois Counter Mode.  USE_AES must be enabled */


#define USE_3DES
#define USE_DES//add by li.li
/* #define USE_DES */
/* #define USE_SEED */

/*
	Optionally set to improve performance at the cost of larger binary code
	size.  Platforms vary, but ciphers will generally see a 5%-10% performance
	boost at the cost of 10-20 kilobytes (per algorithm).
*/
/* #define PS_AES_IMPROVE_PERF_INCREASE_CODESIZE */
/* #define PS_3DES_IMPROVE_PERF_INCREASE_CODESIZE */


/******************************************************************************/
/*
	Symmetric stream ciphers
*/
#define USE_ARC4 //add by li.li
#define USE_RC5 //add by li.li
/* #define USE_RC2 */ /* Only PKCS#12 parse should ever want this algorithm */

/******************************************************************************/
/*
	Digest algorithms	
*/
#define USE_SHA1
#define USE_MD5
/* #define USE_SHA224 */ /* Must enable SHA256 to use */
#define USE_SHA256
#define USE_SHA384 
#define USE_SHA512
#define HAVE_NATIVE_INT64
/* #define USE_SHA384 */ /* Must enable SHA512 to use */
//#define HAVE_NATIVE_INT64 //add by li.li for USE_SHA512
//#define USE_SHA512 //add by li.li
#define USE_MD2 //add by li.li
#define USE_MD4 //add by li.li

#define USE_HMAC /* Requires USE_MD5 and/or USE_SHA1 */


/*
	Optionally set to improve performance at the cost of larger binary code
	size.  Platforms vary, but digests will generally see a 5%-10% performance
	boost at the cost of 1-10 kilobytes (per algorithm).
*/
/* #define PS_MD5_IMPROVE_PERF_INCREASE_CODESIZE */
/* #define PS_SHA1_IMPROVE_PERF_INCREASE_CODESIZE */
/* #define PS_SHA256_IMPROVE_PERF_INCREASE_CODESIZE */ /* Seems to slow it! */
/* #define PS_SHA512_IMPROVE_PERF_INCREASE_CODESIZE */ /* TODO: test */


/******************************************************************************/
/*
	X.509 Certificate
*/
#define USE_X509
#define USE_CERT_PARSE /* Usually required.  USE_X509 must be enabled */
/* #define USE_FULL_CERT_PARSE */ /* USE_CERT_PARSE must be enabled */
/* #define USE_CRL */ /* Must define USE_FULL_CERT_PARSE */

#define USE_BASE64_DECODE

/******************************************************************************/
/*
	PKCS support
*/
#define USE_PRIVATE_KEY_PARSING
#define USE_PKCS5 /* v2.0 3des PBKDF encrypted private keys */
#define USE_PKCS8 /* Alternative private key storage format */
/* #define USE_PKCS12 */ /* You must enable USE_PKCS8 if enabling PKCS12 */
/* #define USE_PKCS1_OAEP */
/* #define USE_PKCS1_PSS */

/******************************************************************************/
/*
  	PRNG Algorithms 
*/
#define USE_YARROW

/******************************************************************************/
/*
    All below here are configurable tweaks (do not need to touch, in general)
*/
/*
	USE_1024_KEY_SPEED_OPTIMIZATIONS
	Optimizations for common 1024 key size multiplication and squaring math.
	Speed improvements will only be seen in 'gold' builds if enabled.
	The library size will increase if enabled
*/
#define USE_1024_KEY_SPEED_OPTIMIZATIONS
/* #define USE_2048_KEY_SPEED_OPTIMIZATIONS */

/*
	Un-comment if building a PSK-only MatrixSSL library  */
/* #define DISABLE_PSTM */
#define USE_BURN_STACK //add by li.li

#endif /* _h_PS_CRYPTOCONFIG */
/******************************************************************************/


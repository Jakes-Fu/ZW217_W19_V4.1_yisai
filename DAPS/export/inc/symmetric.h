/*
 *	symmetric.h
 *	Release $Name: MATRIXSSL-3-4-2-COMM $
 *
 *	Header for internal symmetric key cryptography support
 */
/*
 *	Copyright (c) 2013 INSIDE Secure Corporation
 *	All Rights Reserved
 *
 *	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *	Please do not edit this file without first consulting INSIDE support.
 *	Unauthorized changes to this file are not supported by INSIDE.
 *
 *	The copyright notice above does not evidence any actual or intended
 *	publication of such source code.
 *
 *	This Module contains Proprietary Information of INSIDE and should be
 *	treated as Confidential.
 *
 *	The information in this file is provided for the exclusive use of the
 *	licensees of INSIDE. Such users have the right to use, modify,
 *	and incorporate this code into products for purposes authorized by the
 *	license agreement provided they include this notice and the associated
 *	copyright notice with any such product.
 *
 *	The information in this file is provided "AS IS" without warranty.
 */
/******************************************************************************/

#ifndef _h_PS_SYMMETRIC
#define _h_PS_SYMMETRIC
#include "cryptoConfig.h"
#include "sci_types.h"
/******************************************************************************/
#ifdef USE_AES
/******************************************************************************/
typedef struct {
	uint32 eK[64], dK[64];
	int32 Nr;
} psAesKey_t;


typedef struct {
	int32			blocklen;
	unsigned char	IV[16];
	psAesKey_t		key;
#ifdef USE_AES_GCM
	unsigned char	gInit[16];
	unsigned char	EncCtr[16];
	uint32			TagTemp[4];
	unsigned char	CtrBlock[16];
	unsigned char	Hash_SubKey[16];
	uint32			ProcessedBitCount[4];
	uint32			InputBufferCount;
	uint32			OutputBufferCount;
    union
    {
        unsigned char Buffer[128]; /* Up-to SHA-2/512. */
        uint32 BufferAlignment;
    } Input;
#endif /* USE_AES_GCM */
} aes_CBC;

#endif /* USE_AES */
/******************************************************************************/

/******************************************************************************/
#ifdef USE_SEED
/******************************************************************************/
#define SSL_SEED_KEY_LEN	16
#define SSL_SEED_IV_LEN		16

typedef struct {
    uint32 K[32], dK[32];
} psSeedKey_t;

typedef struct {
	int32			blocklen;
	unsigned char	IV[16];
	psSeedKey_t		key;
} seed_CBC;

#endif /* USE_SEED */
/******************************************************************************/

/******************************************************************************/
#if defined(USE_3DES) || defined(USE_DES)
/******************************************************************************/
#define DES3_KEY_LEN	24
#define DES3_IV_LEN		8
#define DES_KEY_LEN		8
#define DES_IV_LEN		8

typedef struct {
	uint32 ek[3][32], dk[3][32];
} psDes3Key_t;

/*
	A block cipher CBC structure
 */
typedef struct {
	int32				blocklen;
	unsigned char		IV[8];
	psDes3Key_t			key;
} des3_CBC;

#endif /* USE_3DES || USE_DES */
/******************************************************************************/

/******************************************************************************/
#ifdef USE_ARC4
typedef struct {
	unsigned char	state[256];
	uint32	byteCount;
	unsigned char	x;
	unsigned char	y;
} psRc4Key_t;
#endif /* USE_ARC4 */
/******************************************************************************/
#ifdef USE_RC2
typedef struct {
	unsigned xkey[64];
} psRc2Key_t;

typedef struct {
	int32				blocklen;
	unsigned char		IV[8];
	psRc2Key_t			key;
} rc2_CBC;
#endif /* USE_RC2 */
//add by li.li for des
#ifdef USE_DES //add by li.li

typedef struct 
{
    int8 blocklen;
    uint8 explicitIV;
    unsigned char IV[8];
    psDes3Key_t key;
}des_CBC;
#endif
//add end li.li for des

#ifdef USE_RC5
#define SSL_RC5_KEY_LEN	    16
#define SSL_RC5_IV_LEN		8
typedef struct {
   int rounds;
   unsigned long K[50];
}rc5_key;
/*
	A block cipher CBC structure
 */
typedef struct {
	int32				blocklen;
	unsigned char		IV[8];
	rc5_key			    key;
	int32				explicitIV; /* 1 if yes */
} rc5_CBC;
#endif
/******************************************************************************/
/*	Universal types and defines */
/******************************************************************************/
#define MAXBLOCKSIZE	24

typedef union {
#ifdef USE_RC2
	rc2_CBC		rc2;
#endif
#ifdef USE_RC5//add by li.li
    rc5_CBC     rc5;
#endif
#ifdef USE_ARC4
	psRc4Key_t	arc4;
#endif
#ifdef USE_3DES
	des3_CBC	des3;
#endif
#ifdef USE_DES //add by li.li
    des_CBC des;
#endif
#ifdef USE_AES
	aes_CBC		aes;
#endif
#ifdef USE_SEED
	seed_CBC	seed;
#endif
}psCipherContext_t;

#define byte(x, n) (((x) >> (8 * (n))) & 255)

#endif /* _h_PS_SYMMETRIC */
/******************************************************************************/

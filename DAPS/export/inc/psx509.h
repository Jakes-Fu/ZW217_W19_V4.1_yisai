/*
 *	psx509.h
 *	Release $Name: MATRIXSSL-3-4-2-COMM $
 */
/*
 *	Copyright (c) 2013 INSIDE Secure Corporation
 *	All Rights Reserved
 *
 *	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *	Please do not edit this file without first consulting INSIDE support.
 *	Unauthorized changes to this file are not supported by INSIDE.
 *
 *	The copyright notice above does not evidence any actual or intended
 *	publication of such source code.
 *
 *	This Module contains Proprietary Information of INSIDE and should be
 *	treated as Confidential.
 *
 *	The information in this file is provided for the exclusive use of the
 *	licensees of INSIDE. Such users have the right to use, modify,
 *	and incorporate this code into products for purposes authorized by the
 *	license agreement provided they include this notice and the associated
 *	copyright notice with any such product.
 *
 *	The information in this file is provided "AS IS" without warranty.
 */
/******************************************************************************/

#ifndef _h_PS_X509
#define _h_PS_X509
#include "cryptoConfig.h"
#include "digest.h"
#include "pubkey.h"

#define SSL_MD5_HASH_SIZE		16
#define SSL_SHA1_HASH_SIZE		20
#define OID_RSA_MD2		646
#define OID_RSA_MD5		648
#define OID_RSA_SHA1	649

typedef struct {
	char	*country;
	char	*state;
	char	*locality;
	char	*organization;
	char	*orgUnit;
	char	*commonName;
	char	hash[SSL_SHA1_HASH_SIZE];
} DNattributes_t;

/******************************************************************************/
#ifdef USE_X509
/******************************************************************************/

/* ClientCertificateType */
enum {
	RSA_SIGN = 1,
	DSS_SIGN,
	RSA_FIXED_DH,
	DSS_FIXED_DH,
	ECDSA_SIGN = 64,
	RSA_FIXED_ECDH,
	ECDSA_FIXED_ECDH
};

/*
	Parsing flags
*/
#define	CERT_STORE_UNPARSED_BUFFER	0x1
#define	CERT_STORE_DN_BUFFER		0x2

#ifdef USE_CERT_PARSE
/*
	DN attributes are used outside the X509 area for cert requests,
	which have been included in the RSA portions of the code
*/
typedef struct {
	char	*country;
	char	*state;
	char	*locality;
	char	*organization;
	char	*orgUnit;
	char	*commonName;
	char	hash[SHA1_HASH_SIZE];	
	char	*dnenc; /* CERT_STORE_DN_BUFFER */
	uint32	dnencLen;
	short	countryType;
	short	countryLen;
	short	stateType;
	short	stateLen;
	short	localityType;
	short	localityLen;
	short	organizationType;
	short	organizationLen;
	short	orgUnitType;
	short	orgUnitLen;
	short	commonNameType;
	short	commonNameLen;
} x509DNattributes_t;

typedef struct {
	int32	cA;
	int32	pathLenConstraint;
} x509extBasicConstraints_t;

typedef struct psGeneralNameEntry {
	int32							id;
	unsigned char					name[16];
	unsigned char					*data;
	uint32							dataLen;
	struct psGeneralNameEntry		*next;
} x509GeneralName_t;

#ifdef USE_FULL_CERT_PARSE
typedef struct {
	uint32			len;
	unsigned char	*id;
} x509extSubjectKeyId_t;

typedef struct {
	uint32				keyLen;
	unsigned char		*keyId;
	x509DNattributes_t	attribs;
	uint32				serialNumLen;
	unsigned char		*serialNum;
} x509extAuthKeyId_t;
#endif /* USE_FULL_CERT_PARSE */

typedef struct {
	x509extBasicConstraints_t	bc;
	x509GeneralName_t			*san;
#ifdef USE_FULL_CERT_PARSE
	x509extSubjectKeyId_t		sk;
	x509extAuthKeyId_t			ak;
	unsigned char				*keyUsage;
	int32						keyUsageLen;
#endif /* USE_FULL_CERT_PARSE */
#ifdef USE_CRL
	x509GeneralName_t			*crlDist;
#endif
} x509v3extensions_t;

#endif /* USE_CERT_PARSE */

#ifdef USE_CRL
typedef struct x509revoked {
	unsigned char		*serial;
	uint32				serialLen;
	struct x509revoked	*next;
} x509revoked_t;
#endif

typedef struct psCert {
#ifdef USE_CERT_PARSE
	int32				version;
//add by li.li
    int32			valid;
// add end by li.li
	unsigned char		*serialNumber;
	uint32				serialNumberLen;
	x509DNattributes_t	issuer;
	x509DNattributes_t	subject;
	int32				notBeforeTimeType;
	int32				notAfterTimeType;
	char				*notBefore;
	char				*notAfter;
	psPubKey_t			publicKey;
	int32				pubKeyAlgorithm; /* public key algorithm OID */
	int32				certAlgorithm; /* signature algorithm OID */
	int32				sigAlgorithm; /* signature algorithm OID */
	unsigned char		*signature;
	uint32				signatureLen;
	unsigned char		*uniqueIssuerId;
	uint32				uniqueIssuerIdLen;
	unsigned char		*uniqueSubjectId;
	uint32				uniqueSubjectIdLen;
	x509v3extensions_t	extensions;
	int32				authStatus; /* See psX509AuthenticateCert doc */
#ifdef USE_CRL
	x509revoked_t		*revoked;
#endif	
	unsigned char		sigHash[MAX_HASH_SIZE];
#endif /* USE_CERT_PARSE */	
	unsigned char		*unparsedBin; /* see psX509ParseCertFile */ 
	uint32				binLen;
	struct psCert		*next;
} psX509Cert_t;


#ifdef USE_CERT_PARSE					
extern int32 psX509GetSignature(psPool_t *pool, unsigned char **pp, uint32 len,
					unsigned char **sig, uint32 *sigLen);
extern int32 psX509GetDNAttributes(psPool_t *pool, unsigned char **pp,
				uint32 len, x509DNattributes_t *attribs, int32 flags);
extern void psX509FreeDNStruct(x509DNattributes_t *dn);
#endif /* USE_CERT_PARSE */

#endif /* USE_X509 */
/******************************************************************************/

#endif /* _h_PS_X509 */


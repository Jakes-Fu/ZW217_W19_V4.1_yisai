/******************************************************************************
 ** File Name:      sig_code.h                                                *
 ** Author:         Benjamin.Wang                                             *
 ** DATE:           11/18/2005                                                *
 ** Copyright:      2005 Spreatrum, Incoporated. All Rights Reserved.         *
 ** Description:    *
 ******************************************************************************

 ******************************************************************************
 **                        Edit History                                       *
 ** ------------------------------------------------------------------------- *
 ** DATE           NAME             DESCRIPTION                               *
 ** 11/18/2005     Benjamin.Wang     Create.                                  *
 ******************************************************************************/

#ifndef _SIG_CODE_H
#define _SIG_CODE_H

/**---------------------------------------------------------------------------*
 **                         Dependencies                                      *
 **---------------------------------------------------------------------------*/

#ifdef __cplusplus
    extern   "C"
    {
#endif

//#include "env_app_signal.h"
/**---------------------------------------------------------------------------*
 **                         MACRO Definations                                     *
 **---------------------------------------------------------------------------*/
#define SIGNAL_MAX_OFFSET (0xFF)

/**---------------------------------------------------------------------------*
 **                         Data Structures                                   *
 **---------------------------------------------------------------------------*/
/*SIGNAL GROUPS IN THE SYSTEM*/             
typedef enum
{
    /*0x0~0x90 are occupied system definition.
      0x91~0xA0  is for tool trace id definition*/
    Layer4_GROUP  = 0xA1,
    KEYPAD_GROUP,
    TIME_GROUP, 
    CHR_GROUP, 
    USB_GROUP, 
    AUDIO_GROUP, 
    DC_GROUP,
    MTV_MIDDLEWARE_GROUP,
    MBBMS_GROUP,
    JAVA_GROUP,
    VIDEO_GROUP,
    MOBILE_VIDEO_GROUP,
    DAPS_GROUP1,
    DAPS_GROUP2,
    WK_GROUP,
    DBAT_GROUP,
    WRE_VIDEO_GROUP,
    Layer4_GPS_GROUP,
    MULTIMEDIA_GROUP,
    UAL_CMS_GROUP = 0xCC,//UAL CMS×¨ÓÃ
    SIGNAL_GROUP_MAX = 0xD0
    /*0xD1~0xFF are reserved for USER's definition.*/
}SIGNAL_GROUP_E;


typedef enum
{

	MBBMS_SG_PRASE_SUCC= ((MBBMS_GROUP << 8)|1),
	MBBMS_SG_PARSE_FAIL,
	MBBMS_SG_SG_RCV_IND,
	MBBMS_SG_STOP_SEARCH_SG_SIGNAL,
	MBBMS_MMI_GBA_RES,
	MBBMS_MMI_GBA_STOP_RES,
	MBBMS_MMI_MRK_RES,
	MBBMS_MMI_MRK_STOP_RES,
	MBBMS_MSK_SUB_SIGNAL,

       MBBMS_SG_PREVIEW_DATA_IND,
       
	MBBMS_SVC_SIG_SUBSCRIBE,
	MBBMS_SGAPI_GET_DATA_IND,
       MBBMS_SGAPI_STOP_RES,
	MBBMS_SVC_SIG_STOP_SUBSCRIBE,
	MBBMS_SVC_SIG_UNSUBSCRIBE,
	MBBMS_SVC_SIG_STOP_UNSUBSCRIBE,
     	MBBMS_SVC_SIG_GBA,
 	MBBMS_SVC_SIG_STOP_GBA,
   	MBBMS_SVC_SIG_UPDATE_TABLE,
	MBBMS_SVC_SIG_STOP_UPDATE_TABLE,
	MBBMS_SVC_SIG_EXIT,
	MBBMS_SVC_SIG_ACTIVE,
	MBBMS_SVC_SIG_STOP_ACTIVE,
	MBBMS_SVC_SIG_UPDATE_SG,
	MBBMS_SVC_SIG_STOP_UPDATE_SG,
	MBBMS_SVC_SIG_MANUAL_SG,
	MBBMS_SVC_SIG_STOP_MANUAL_SG,
	MBBMS_SVC_SIG_ACCOUNT_QUIRY,
	MBBMS_SVC_SIG_STOP_ACCOUNT_QUIRY,
	
	MBBMS_SVC_SIG_PLAY,
	MBBMS_SVC_SIG_STOP,
	MBBMS_SVC_SIG_STOP_CMMB,
       MBBMS_SVC_SIG_RSSI_CHANGED_IND,
       MBBMS_SVC_SIG_PLAY_AV_IND,
       MBBMS_SVC_SIG_EMERGENCY_BROADCAST_IND,
       MBBMS_SVC_SIG_CA_NOT_GRANTED_IND,
       MBBMS_SVC_SIG_PLAY_DRA_IND,
       MBBMS_SVC_SIG_BAD_SIGNAL_IND,
       MBBMS_SVC_SIG_SIGNAL_RECOVERED_IND,
       MBBMS_SVC_SIG_SIGNAL_RELOCKING_IND,
       MBBMS_SVC_SIG_PLAY_ERROR_IND,	
       
      MBBMS_SVC_SIG_PARSE_ESG,
       
	MBBMS_SVC_SIG_PARSE_SG,
	
	MBBMS_SVC_SIG_STOP_PARSE_SG,
       MBBMS_SVC_SIG_DOWLOAD_PIC,
       MBBMS_SVC_SIG_STOP_DOWLOAD_PIC,	
       
	MBBMS_SVC_SIG_GETMSK,
	MBBMS_SVC_SIG_STOPGETMSK,
	MBBMS_SVC_SIG_PDP_ACTIVE,
	MBBMS_SVC_SIG_PDP_DEACTIVE,        
	MBBMS_SIGNAL_MAX
	
}MBBMS_SIGNAL_CODE_E;

#if 0
typedef enum{
    MTV_STIMI_SEARCH_PROG_END_CNF = ((MTV_MIDDLEWARE_GROUP<<8)|1),
    MTV_STIMI_GET_NETWORK_IND,
    MTV_STIMI_GET_NEXT_NET_INFO,
    MTV_STIMI_SEARCH_PROG_ERR_IND,
    MTV_STIMI_COMPLETE_FREQUENCY_IND,
    MTV_STIMI_LOCK_FRQ_IND,
    MTV_STIMI_LOCK_EXPIRE_IND,
    MTV_STIMI_SEARCH_ESG_END_CNF ,
    MTV_STIMI_SEARCH_ESG_ERR_IND,
    MTV_STIMI_EMERGENCY_BROADCAST_IND ,  
    MTV_STIMI_PROGRAM_HINT_IND ,                     
    MTV_STIMI_GET_CA_KEY_IND,
    MTV_STIMI_STOP_SEARCH_ESG,
    MTV_STIMI_CTLTAB_UPDATE_IND,
    MTV_STIMI_RCV_CTLTAB_ERR_IND,
    MTV_STIMI_GET_NETWORK_TIME_IND,
    MTV_STIMI_SET_NETWORK_INFO_IND,
    MTV_STIMI_STOP_SEARCH_PROG_SIGNAL,
    MTV_STIMI_TERMINATE_IND,
    MTV_CONFIG_DATA_FILTER,
    MTV_STIMI_SEARCH_PROG_END_IND,
        
    MTV_PLAY_ACK,
    MTV_PLAY_ERROR,
    MTV_PLAY_ERROR_FOR_CA,
    MTV_PLAY_ERROR_FOR_NOAV,
    
    MTV_STOP_ACK,
    MTV_STOP_ERROR,
    MTV_PLAY_ERROR_IND,
    MTV_CA_NOT_GRANTED_IND,
    MTV_CA_CARD_NOT_PRESENT_IND,    
    MTV_CA_IND,
    MTV_PLAY_AV_IND,
    MTV_PLAY_DRA_IND,    
    MTV_PLAY_STREAM_END,
    MTV_PLAY_TIME_IND,
    MTV_RECORD_FILE_SAVED,
    MTV_RECORD_FILE_TOOSMALL,

    MTV_DISK_FULL,
    MTV_DISK_WRITE_ERROR,
    MTV_DISK_READ_ERROR,
    MTV_DTL_POST_ERROR,
    MTV_DMA_READ_ERROR,
    MTV_NEED_SEARCH_AGAIN,

    MTV_RFVT_RESET_MODE,
    MTV_DTL_ERROR,
    
    MTV_RSSI_CHANGED,
    MTV_BAD_SIGNAL,
    MTV_RELOCKING,
    MTV_CHANNEL_ERROR,

    MTV_SIGNAL_MAX

}MTV_MIDDLEWARE_SIGNALCODE_E;
#endif

/*SIGNAL CODE DEFINITION*/

// DC messege id = (DC_GROUP<<8) | (DC_SUB_MODULE<<4) | SIG_ID)
// the number of each sub-module's signal is 0xf
// sub-module: AF=0x0
typedef enum{
	DC_MSG_BEGIN = ((DC_GROUP<<8) | 1),
	DC_AF_MSG_BEGIN = ((DC_GROUP<<8) | (0x1<<4) | 1),
	DC_AF_SINGLE_OVER,
	DC_MSG_MAX = ((DC_GROUP<<8) | (0xf<<4) | 0xf)
}DC_MSG_E;

/*KEYPAD GROUP*/
typedef enum
{
    KPD_DOWN_IND = ((KEYPAD_GROUP << 8) | 1),
    KPD_UP_IND,
    KPD_SOFT_POWER_ON_IND,
    KPD_SOFT_POWER_OFF_IND, 
    KPD_SIGNAL_MAX = ((KEYPAD_GROUP << 8) | SIGNAL_MAX_OFFSET)
}KEYPAD_SIGNALCODE_E;

/*TIME_GROUP*/
typedef enum
{
    MISC_MSG_RTC_SEC_IND = ((TIME_GROUP << 8) | 1),
    MISC_MSG_RTC_MIN_IND,
    MISC_MSG_RTC_HOUR_IND,
    MISC_MSG_RTC_DAY_IND,
    MISC_MSG_RTC_ALARM_IND,
    TIME_SIGNAL_MAX = ((TIME_GROUP << 8) | SIGNAL_MAX_OFFSET)
}TIME_SIGNALCODE_E;

/*CHARGE GROUP*/
typedef enum
{
    CHR_MSG_CAP_IND = ((CHR_GROUP << 8) | 1),      // Notify the battery's capacity

    CHR_MSG_CHARGE_START_IND,   // start the charge process.
    CHR_MSG_CHARGE_END_IND,     // the charge ended.

    CHR_MSG_WARNING_IND,        // the capacity is low, should charge.
    CHR_MSG_SHUTDOWN_IND,       // the capacity is very low and must shutdown.    

    CHR_MSG_CHARGE_FINISH_IND,      // the charge has been completed.
    CHR_MSG_CHARGE_DISCONNECT_IND,  // the charge be disconnect
    CHR_MSG_CHARGE_OVER_TEMPTURE_IND,       // the charge fault, maybe the voltage of charge is too high/low.
    CHR_MSG_CHARGE_FAULT_IND,       // the charge fault, maybe the voltage of charge is too low.
#ifdef BATTERY_DETECT_SUPPORT
    CHR_MSG_BATTERY_OFF_IND,  // for the case battery plug out
#endif	    
    CHR_SIGNAL_MAX = ((CHR_GROUP << 8) | SIGNAL_MAX_OFFSET)
}CHR_SIGNALCODE_E;

/*DBAT GROUP*/
typedef enum
{
    DBAT_MSG_UPDATE_STATE_IND = ((DBAT_GROUP << 8) | 1),      // Notify the battery's capacity
        
    DBAT_MSG_BAT_PLUGIN_IND,
    DBAT_MSG_BAT_PLUGOUT_IND,

    DBAT_MSG_SWITCH_BAT_IND,

    DBAT_MSG_CHARGE_START_IND, 
    DBAT_MSG_WARNING_IND,     
    DBAT_MSG_SHUTDOWN_IND,       
    DBAT_MSG_CHARGE_FINISH,      
    DBAT_MSG_CHARGE_DISCONNECT,  
    DBAT_MSG_CHARGE_FAULT, 
    DBAT_MSG_CHARGERCONNECT_VOL_VERYLOW,

    DBAT_SIGNAL_MAX = ((DBAT_GROUP << 8) | SIGNAL_MAX_OFFSET)
}DBAT_SIGNALCODE_E;
/*UDISK GROUP*/
typedef enum
{
		USB_PLUGIN_IND = ((USB_GROUP << 8) | 1), 
		USB_PLUGOUT_IND, 
		USB_READY_IND,  
		USB_ERROR_IND,
		USB_SERVICE_UDISK_STARTED_IND,
		USB_SERVICE_UDISK_STOPPED_IND,
		USB_SERVICE_UCOM_STARTED_IND,
		USB_SERVICE_UCOM_STOPPED_IND,
		USB_SERVICE_UPCC_STARTED_IND,
		USB_SERVICE_UPCC_STOPPED_IND,
		USB_SERVICE_LOG_STARTED_IND,
		USB_SERVICE_LOG_STOPPED_IND,
		USB_SERVICE_UCOM_UMS_STARTED_IND,
		USB_SERVICE_UCOM_UMS_STOPPED_IND,
		USB_SIGNAL_MAX = ((USB_GROUP << 8) | SIGNAL_MAX_OFFSET)
}USB_SIGNALCODE_E;

/*AUDIO GROUP*/
typedef enum
{
    AUDIO_PLAY_REQ = ((AUDIO_GROUP << 8) | 1), 
    AUDIO_PLAY_CNF, 
    AUDIO_PLAY_NEG_CNF, 
    AUDIO_STOP_REQ, 
    AUDIO_STOP_CNF, 
    AUDIO_STOP_NEG_CNF, 
    AUDIO_PAUSE_REQ, 
    AUDIO_PAUSE_CNF, 
    AUDIO_PAUSE_NEG_CNF, 
    AUDIO_RESUME_REQ, 
    AUDIO_RESUME_CNF, 
    AUDIO_RESUME_NEG_CNF, 
    AUDIO_SEEK_REQ, 
    AUDIO_SEEK_CNF, 
    AUDIO_SEEK_NEG_CNF, 
    AUDIO_SETSPEED_REQ, 
    AUDIO_SETSPEED_CNF, 
    AUDIO_SETSPEED_NEG_CNF, 
    AUDIO_SETDIGIGAIN_REQ, 
    AUDIO_SETDIGIGAIN_CNF, 
    AUDIO_SETDIGIGAIN_NEG_CNF, 
    AUDIO_GETDIGIGAIN_REQ, 
    AUDIO_GETDIGIGAIN_CNF, 
    AUDIO_GETDIGIGAIN_NEG_CNF, 
    AUDIO_TURNON_EXP_REQ, 
    AUDIO_TURNON_EXP_CNF, 
    AUDIO_TURNON_EXP_NEG_CNF, 
    AUDIO_SHUTDOWN_EXP_REQ, 
    AUDIO_SHUTDOWN_EXP_CNF, 
    AUDIO_SHUTDOWN_EXP_NEG_CNF, 

    AUDIO_ERROR_IND, 
    AUDIO_ERROR_RSP, 
    AUDIO_ERROR_REP, 
    AUDIO_PLAYEND_IND, 
    AUDIO_PLAYEND_RSP, 
    AUDIO_PLAYEND_REP, 

    AUDIO_CLOSE_HANDLE_REQ, 
    AUDIO_CLOSE_HANDLE_CNF, 
    AUDIO_CLOSE_HANDLE_NEG_CNF, 
    AUDIO_STOPPED_IND, 
    AUDIO_STOPPED_RSP, 

    AUDIO_START_RECORD_REQ,     
    AUDIO_START_RECORD_CNF,     
    AUDIO_START_RECORD_NEG_CNF,     
    AUDIO_STOP_RECORD_REQ,     
    AUDIO_STOP_RECORD_CNF,     
    AUDIO_STOP_RECORD_NEG_CNF,     
    AUDIO_PAUSE_RECORD_REQ,     
    AUDIO_PAUSE_RECORD_CNF,     
    AUDIO_PAUSE_RECORD_NEG_CNF,     
    AUDIO_RESUME_RECORD_REQ,     
    AUDIO_RESUME_RECORD_CNF,     
    AUDIO_RESUME_RECORD_NEG_CNF, 

    AUDIO_RECORD_FINISH_IND, 
    AUDIO_RECORD_FINISH_RSP, 
    AUDIO_RECORD_WRITE_ERR_IND, 
    AUDIO_RECORD_WRITE_HEAD_ERR_IND,
    AUDIO_RECORD_WRITE_ERR_RSP, 
    AUDIO_RECORD_SUCCESS_REP, 
    AUDIO_RECORD_WRITE_FAILED_REP, 
    AUDIO_RECORD_WRITE_HEADER_FAILED_REP, 

    AUDIO_CREATE_FILE_REQ,
    AUDIO_CREATE_FILE_CNF,
    AUDIO_CREATE_FILE_NEG_CNF,

    AUDIO_CREATE_BUFFER_REQ,
    AUDIO_CREATE_BUFFER_CNF,
    AUDIO_CREATE_BUFFER_NEG_CNF,

    AUDIO_CREATE_STREAMBUFFER_REQ,
    AUDIO_CREATE_STREAMBUFFER_CNF,
    AUDIO_CREATE_STREAMBUFFER_NEG_CNF,

    AUDIO_CREATE_RECORD_FILE_REQ,
    AUDIO_CREATE_RECORD_FILE_CNF,
    AUDIO_CREATE_RECORD_FILE_NEG_CNF,

    AUDIO_CREATE_RECORD_BUFFER_REQ,
    AUDIO_CREATE_RECORD_BUFFER_CNF,
    AUDIO_CREATE_RECORD_BUFFER_NEG_CNF,

    AUDIO_CREATE_NORMAL_REQ,
    AUDIO_CREATE_NORMAL_CNF,
    AUDIO_CREATE_NORMAL_NEG_CNF,	

    AUDIO_CREATE_CLONE_REQ,
    AUDIO_CREATE_CLONE_CNF,
    AUDIO_CREATE_CLONE_NEG_CNF,	

    AUDIO_ADD_DEVICE_REQ,
    AUDIO_DEL_DEVICE_REQ,
    
    AUDIO_TRACKBUF_STATUS_IND,
    AUDIO_TRACKBUF_STATUS_RSP,
    AUDIO_TRACKBUF_STATUS_REP,

    AUDIO_SEND_STREAM_SRC_DATA_REQ,

    AUDIO_PAUSEEND_REP, 
    AUDIO_PAUSEEND_IND,
    AUDIO_PAUSEEND_RSP,

    AUDIO_SWITCH_DEVICE_REQ,
    AUDIO_SWITCH_DEVICE_CNF,
    AUDIO_SWITCH_DEVICE_NEG_CNF,    

    AUDIO_SET_VOL_REQ,
    AUDIO_SET_VOL_EX_REQ,
    AUDIO_SET_MODE_REQ,
    AUDIO_SET_MODE_EX_REQ,
    AUDIO_SET_UPLINKMUTE_REQ,
    AUDIO_SET_DOWNLINKMUTE_REQ,
    AUDIO_SET_DEVDIGGAIN_REQ,  
    AUDIO_SET_DATA_OUTPUT_CHANNEL_CHOICE_REQ,
    AUDIO_CHANGE_CODEC_TASK_PRIORITY_REQ,
    AUDIO_SET_TRACK_ON_REQ,
    AUDIO_EXE_CODEC_EXT_OPE_REQ,
    AUDIO_TIMESEEK_REQ,
    AUDIO_SET_DOWNLINKLOCALNETMUTE_REQ,
    AUDIO_GETPLAYINGINFO_REQ,
    AUDIO_STOPSELF_IND,
    AUDIO_SET_EXTRA_VOL_REQ,
    AUDIO_SET_EXTRA_VOL_EX_REQ,
#ifdef BT_DIALER_SET_VOLGAIN    
    AUDIO_SET_VOL_GAIN_REQ,
#endif
    AUDIO_SIGNAL_MAX = ((AUDIO_GROUP << 8) | SIGNAL_MAX_OFFSET)
}AUDIO_SIGNALCODE_E;

/*Layer4 GROUP*/
typedef enum
{
	/* be used for phone service */		
	APP_MN_NETWORK_STATUS_IND	 = (( Layer4_GROUP << 8 ) | 1 ) ,	
        APP_MN_NETWORK_INFO_IND,
	APP_MN_PLMN_LIST_CNF,	
	APP_MN_PLMN_SELECT_CNF,	
    APP_MN_PLMN_READ_CNF,
    APP_MN_PLMN_WRITE_CNF,
    APP_MN_CURRENT_RAT_IND,
    APP_MN_PREFER_RAT_RSP,
    APP_MN_CURR_CELL_CAPABILITY_IND,
    APP_MN_AT_TRACE_IND,
	APP_MN_SIM_GET_PIN_IND,	
	APP_MN_SIM_READY_IND,		
	APP_MN_SIM_NOT_READY_IND,	
	APP_MN_SIM_PIN_FUNC_CNF,	
	APP_MN_GET_SIM_TYPE_CNF,    
	APP_MN_GET_UIM_IMSI_CNF,    	
	APP_MN_SCELL_RSSI_IND,	
    APP_MN_MS_POWERING_OFF_IND, 
    APP_MN_DEACTIVE_PS_CNF,	
	APP_MN_NCELL_RSSI_CNF,	
    APP_MN_AOC_MODIFIED_IND,   
	APP_MN_FDN_SERVICE_IND,		
    APP_MN_FDN_CAPABILITY_IND,
    APP_MN_ACL_SERVICE_IND,
	APP_MN_GPRS_ATTACH_RESULT,	
	APP_MN_GPRS_DETACH_RESULT,	
	APP_MN_DETACH_GSM_CNF,		
	APP_MN_PUCT_INFO_CNF,		
	APP_MN_PS_READY_IND,		
	APP_MN_SET_PREF_MODE_CNF,	
	APP_MN_SET_BAND_CNF,		
	APP_MN_SET_SERVICE_TYPE_CNF,	
	APP_MN_SET_ROAM_MODE_CNF,	
	APP_MN_DISPLAY_PLMN_IND,	
	APP_MN_READ_GID_CNF,
	APP_MN_PS_POWER_ON_CNF,  
	APP_MN_PS_POWER_OFF_CNF,  
	APP_MN_SIM_POWER_ON_CNF,  
	APP_MN_SIM_PIN_CHECK_IND,  
	APP_MN_SIM_POWER_OFF_CNF,  
    /* begin mbbms beijing */    
	APP_MN_SIM_MBBMS_ALGO_CNF, 
    /* end mbbms beijing */	
        APP_MN_SIM_COMMON_ALGO_CNF,
	APP_MN_READ_SIM_FILE_BUF_CNF,
	APP_MN_SIM_CA_SEND_CNF,
	APP_MN_SIM_CA_RECEIVE_CNF,
	APP_MN_SIM_CA_EXCHANGE_CNF,    
	APP_MN_SIM_PLUG_IN_IND,
	APP_MN_LND_READY_IND,
	APP_MN_PREFER_PLMN_CHANGE_CNF,
	APP_MN_CPHS_READY_IND,
        APP_MN_CPHS_INFO_IND,
        APP_MN_OPER_NAME_IND,
        APP_MN_NETNAME_READY_IND,
        APP_MN_SIM_RECORD_NUM_CNF,
        APP_MN_SIM_RECORD_READ_CNF,
        APP_MN_SIM_BINARY_READ_CNF,
        APP_MN_SIM_BINARY_UPDATE_CNF,
	APP_MN_SIM_PRESENT_IND,
    APP_MN_EMG_NUM_LIST_IND,
    APP_MN_CSP_LINE2_UPDATE_IND,
    APP_MN_LINE_SELECTED_UPDATE_IND,
    APP_MN_LINE_LOCKSTATUS_UPDATE_IND,

	/* be used for phonebook service */		
	APP_MN_PHONEBOOK_SIGNAL_START,	
    APP_MN_MSISDN_UPDATE_CNF,   
    APP_MN_ADN_UPDATE_CNF,   
    APP_MN_FDN_UPDATE_CNF, 
    APP_MN_LND_UPDATE_CNF,  
    APP_MN_GET_FREE_EXT_INFO_CNF, 
    APP_MN_CRSM_CNF,
    
    /* +vcard dev */
    APP_MN_READ_ADDITIONAL_ENTRY_CNF,
    APP_MN_UPDATE_USER_INFO_CNF,
    APP_MN_DEL_USER_INFO_CNF,
    /* -vcard dev */
    APP_MN_GET_SIM_EF_ENTIRE_INFO_CNF,
    APP_MN_READ_SIM_EF_CNF,
    APP_MN_WRITE_SIM_EF_CNF,
    APP_MN_READ_SIM_RECORD_FILE_CNF,
    APP_MN_UPDATE_SIM_RECORD_FILE_CNF,
    APP_MN_SEARCH_SIM_RECORD_CNF,
    APP_MN_SET_EXT_PROFILE_CNF,
    APP_MN_READ_AUTH_FILE_CNF,
    APP_MN_CFF_IND,
    APP_MN_DCS_UPDATE_CNF,  
    APP_MN_CSP_UPDATE_CNF,  
    APP_MN_PHONEBOOK_SIGNAL_END,  

	/* be used for call service */		
	APP_MN_CALL_SIGNAL_START,
	APP_MN_CALL_READY_IND,   
    APP_MN_CALL_START_IND,	
    APP_MN_ALERTING_IND,	
    APP_MN_SETUP_COMPLETE_IND,	
    APP_MN_SETUP_COMPLETE_CNF,   
    APP_MN_CALL_DISCONNECTED_IND,	
    APP_MN_CALL_ERR_IND,	
    APP_MN_SETUP_IND,	
    APP_MN_START_DTMF_CNF,	
    APP_MN_STOP_DTMF_CNF,    
    APP_MN_CALL_HELD_CNF,	
    APP_MN_CALL_HELD_IND,    
    APP_MN_CALL_HOLDING_IND,
    APP_MN_CALL_RETRIEVED_CNF,	
    APP_MN_CALL_RETRIEVED_IND, 
    APP_MN_CALL_RETRIEVING_IND,
    APP_MN_BUILDING_MPTY_IND,
    APP_MN_SPLITTING_MPTY_IND,
	APP_MN_ECT_INVOKING_IND,
    APP_MN_CALL_SWAP_IND,	
    APP_MN_CALL_SWAP_CNF,
    APP_MN_CALL_WAIT_IND,	
    APP_MN_CALL_NOTIFY_IND,	
    APP_MN_CALL_MODIFY_CNF,	
    APP_MN_CALL_MODIFY_IND,	
    APP_MN_CALL_BARRED_IND,	
    APP_MN_BUILD_MPTY_CNF,
    APP_MN_BUILD_MPTY_IND,
    APP_MN_SPLIT_MPTY_CNF,
	APP_MN_ECT_INVOKE_CNF,
	APP_MN_ECT_INVOKE_IND,    
	APP_MN_CALLING_NAME_IND, 
    APP_MN_ACMMAX_IND,
    APP_MN_TMPTY_EXP_IND,
    APP_MN_SYNC_IND,
    APP_MN_PROGRESS_IND,
    APP_MN_USER_TO_USER_IND,
    APP_MN_DISCONNECTING_IND, 
    APP_MN_CALL_FORWARD_IND,	
    APP_MN_FORWARD_STATUS_IND,
    APP_MN_CONNECTING_IND,   
    APP_MN_DISC_INFO_IND, 
    APP_MN_CLIR_SUPP_REJ_IND,
    APP_MN_CALL_DEFLECT_IND,
    APP_MN_CCBS_ACTIVATE_IND, /* ccbs */
    APP_MN_CCBS_RECALL_IND,   /* ccbs */
    APP_MN_CCBS_ERASE_CNF,    /* ccbs */ 
    APP_MN_CALL_SIGNAL_END,   

	/* be used for gprs service */		
	APP_MN_GPRS_SIGNAL_START,		
    APP_MN_MTACT_RESPOND_MODE_CNF, 
    APP_MN_ACTIVATE_PDP_CONTEXT_CNF, 
    APP_MN_SET_QOS_CNF, 
    APP_MN_SET_MIN_QOS_CNF, 
    APP_MN_SET_EXTEND_QOS_CNF,    
    APP_MN_SET_EXTEND_MIN_QOS_CNF,
    APP_MN_SET_PDP_CONTEXT_CNF, 
    APP_MN_DEACTIVATE_PDP_CONTEXT_CNF,
    APP_MN_DELETE_PDP_CONTEXT_CNF,  
    APP_MN_DELETE_MIN_QOS_CNF,  
    APP_MN_DELETE_QOS_CNF, 
    APP_MN_PUSH_GPRS_DATA_CNF,
    APP_MN_DEACTIVATE_PDP_CONTEXT_IND,

    APP_MN_MODIFY_PDP_CONTEXT_CNF,
    APP_MN_SET_EXT_QOS_CNF,
    APP_MN_SET_EXT_MIN_QOS_CNF,
    APP_MN_SET_TFT_CNF,
    APP_MN_SET_SEC_PDP_CONTEXT_CNF,
    APP_MN_ACTIVATE_PDP_CONTEXT_IND,
    APP_MN_GPRS_DETACH_IND,
    APP_MN_GPS_DATA_SOCKET_IND,
    APP_MN_GPRS_SIGNAL_END,

	/* be used for sms service */		
	APP_MN_SMS_SIGNAL_START,	
    APP_MN_SMS_READY_IND              , 
    APP_MN_SMS_MEM_FULL_IND			  , 
    APP_MN_SMS_MEM_FULL_IND_EX        ,/* bug109821 */	
    APP_MN_SMS_MEM_OVER_FLOW_IND      ,
    APP_MN_READ_SMS_CNF               , 
    APP_MN_UPDATE_SMS_STATE_CNF       , 
    APP_MN_READ_SMS_STATUS_REPORT_CNF , 
    APP_MN_SEND_SMS_CNF               , 
    APP_MN_CANCEL_SMS_CNF             ,
    APP_MN_WRITE_SMS_CNF              , 
    APP_MN_EDIT_SMS_CNF              , 
    APP_MN_SMS_IND                    , 
    APP_MN_SMS_STATUS_REPORT_IND           , 
    APP_MN_READ_SMS_PARAM_CNF         , 
    APP_MN_WRITE_SMS_PARAM_CNF        , 
    APP_MN_DELETE_ALL_SMS_CNF		  , 

    APP_MN_DELETE_SMS_IND,

    APP_MN_SEARCH_NEXT_SMS_CNF,
    APP_MN_SET_ASSERT_SMS_DESTADDR_CNF, 
	APP_MN_SET_SMS_RECEIVE_FUNC_CNF,
	APP_MN_VMW_FALG_IND,
	APP_MN_GET_VMW_FLAG_CNF, 
	APP_MN_SET_VMW_FLAG_CNF,
	APP_MN_SET_VMW_ADDR_CNF,
	APP_MN_GET_VMW_ADDR_CNF,
	APP_MN_SMS_NUM_IND,
	APP_MN_SMS_SIGNAL_END,

	/* be used for smscb service */		
	APP_MN_SMSCB_SIGNAL_START,
    APP_MN_SMSCB_MSG_IND             , 
	APP_MN_SMSCB_MACRO_MSG_IND       , 
	APP_MN_SMSCB_REJ_IND             , 
	APP_MN_SMSCB_MSG_PAGES_IND,
	APP_MN_SMSCB_SET_PARAM_CNF ,
	APP_MN_SMSCB_GET_PARAM_CNF ,
    APP_MN_TDPS_SMSCB_MSG_IND   ,
	APP_MN_SMSCB_SIGNAL_END,

	/* be used for ss service */		
	APP_MN_SS_SIGNAL_START,
	APP_MN_GET_PASSWORD_IND					, 
	APP_MN_USSD_IND							, 
	APP_MN_USSD_NOTIFY_IND					, 
	APP_MN_RELEASE_SS_IND					, 
	APP_MN_BEGIN_REGISTER_SS				, 
	APP_MN_BEGIN_ERASE_SS					, 
	APP_MN_BEGIN_ACTIVATE_SS				, 
	APP_MN_BEGIN_DEACTIVATE_SS				, 
	APP_MN_BEGIN_INTERROGATE_SS				, 
	APP_MN_BEGIN_REGISTER_PASSWORD			, 
	APP_MN_BEGIN_USSD_SERVICE				, 
	APP_MN_REGISTER_SS_CNF					, 
	APP_MN_ERASE_SS_CNF						, 
	APP_MN_ACTIVATE_SS_CNF					, 
	APP_MN_DEACTIVATE_SS_CNF				, 
	APP_MN_INTERROGATE_CNF					, 
	APP_MN_REGISTER_PASSWORD_CNF			,
	APP_MN_SS_BUSYING_IND					,
	APP_MN_USSD_SERVICE_CNF					,
	APP_MN_SS_SIGNAL_END,

	/* be used for stk service */		
	APP_MN_STK_SIGNAL_START,	
    SIMAT_SETUP_EVENT_LIST_REQ,
    SIMAT_NW_SEARCH_MODE_IND,
    APP_MN_SIMAT_REFRESH_IND,
    APP_MN_SIMAT_DISPLAY_TEXT_IND,
    APP_MN_SIMAT_GET_INKEY_IND,
    APP_MN_SIMAT_GET_INPUT_IND,
    APP_MN_SIMAT_PLAY_TONE_IND,
    APP_MN_SIMAT_SETUP_MENU_IND,
    APP_MN_SIMAT_SELECT_ITEM_IND,
    SIMAT_GET_DT_TZ_REQ,
    SIMAT_GET_LANG_REQ,
    APP_MN_SIMAT_SETUP_IDLE_TEXT_IND,
    APP_MN_SIMAT_LANG_NOTIFY_IND,
    APP_MN_SIMAT_SEND_SMS_IND,
    SIMAT_SMS_PP_RSP,
    SIMAT_SMS_CB_RSP,
    APP_MN_SIMAT_SMS_CTL_TO_MMI_IND,
    APP_MN_SIMAT_SEND_SS_IND,
    APP_MN_SIMAT_SEND_USSD_IND,
    SIMAT_MO_SS_CONTROL_RSP,
    SIMAT_MO_USSD_CONTROL_RSP,
    APP_MN_SIMAT_SETUP_CALL_IND,
    APP_MN_SIMAT_SEND_DTMF_IND,
    SIMAT_MO_CC_RSP,
    APP_MN_SIMAT_CC_TO_MMI_IND,
    SIMAT_BC_SMS_RSP,
    SIMAT_PP_SMS_RSP,
    APP_MN_SIMAT_PRO_LOCAL_INFO_IND,
	APP_MN_SIMAT_MORE_TIME_IND,
	APP_MN_SIMAT_REFRESH_CNF,	
    SIMAT_SESSION_TERMINATED_IND,
    APP_MN_SIMAT_SEND_DATA_IND,
    APP_MN_SIMAT_RECEIVE_DATA_IND,
    APP_MN_SIMAT_LAUNCH_BROWSER_IND,
    APP_SIMAT_OPEN_CHANNEL_IND,
    APP_SIMAT_CLOSE_CHANNEL_IND,
    APP_SIMAT_GET_CHANNEL_STATUS_IND,
    APP_MN_SIMAT_DISPLAY_MULTIMEDIA_MSG_IND,
    APP_MN_SIMAT_RETRIEVE_MULTIMEDIA_MSG_IND,
    APP_MN_SIMAT_SUBMIT_MULTIMEDIA_MSG_IND,
    APP_MN_SIMAT_FWD_PC_IND,
    APP_MN_SIMAT_TERMINAL_RESPONSE_CNF,
    APP_MN_SIMAT_ENVELOP_CNF_F,
    APP_SIMAT_EVENT_REFRESH_CNF,
    APP_MN_STK_SIGNAL_END,

    /* be used for diagnositc service */		
    APP_L1_SIGNAL_START,		
	APP_L1_GET_AFC_CNF						, 
	APP_L1_GET_PA_CNF						, 
	APP_L1_GET_AGC_CNF						, 
	APP_L1_GET_BLOCK_ERROR_RATIO_CNF		, 
	APP_MN_READ_DSP_MEM_CNF					, 
	APP_L1_SIGNAL_END,

	/* be used for mp4 */ 
	APP_MP4_DISPLAY_IND,	
	APP_MP4_DEL_LIST_ITEM_IND,
	APP_MP4_OPEN_MAIN_WIN,	
    /* be used for sd card re init */
    APP_SD_REINIT_IND,
    /* used for audio*/
    APP_AUDIO_END_IND,
    APP_WRE_AUDIO_END_IND,
     /* used for asp*/
    APP_ASP_PLAY_AUDIO_END_IND,
    APP_ASP_RECORD_AUDIO_END_IND,
    APP_UDP_DATA_IND,
#ifdef SXH_APPLE_SUPPORT
	APP_APPLE_END_IND,
#endif
    APP_MN_TD_NCELL_INFO_IND,

    APP_MN_SWITCH_ARFCN_CNF,

    APP_BT_CALL_SIGNAL_START,
    APP_BT_HFU_DIAL_NUMBER_RESULT_IND,
    APP_BT_HFU_CIEV_IND,
    APP_BT_HFU_AUDIO_CONNECTED,
    APP_BT_HFU_CLCC_RECORD_IND,
    APP_BT_HFU_CLCC_RESULT_IND,
    APP_BT_HFU_CLIP_IND,
    APP_BT_HFU_RING_IND,
    APP_BT_HFU_ATA_RESULT_IND,
    APP_BT_HFU_HANGUP_RESULT_IND,
    APP_BT_HFU_AUDIO_DISCONNECTED,
    APP_BT_HFU_SEND_DTMF_RESULT_IND,
    APP_BT_HFU_CIND_IND,
    APP_BT_HFU_CALLHOLD_RESULT_IND,
    APP_BT_HFU_SPK_VOL_IND,
    APP_BT_HFU_MIC_VOL_IND,
    APP_BT_HFU_CCWA_IND,
    APP_BT_HFU_ENABLE_VOICE_RECOGN_RESULT_IND, 
    APP_BT_HFU_VOICE_RECOGN_STATE_IND,         
    APP_BT_HFU_REDIAL_RESULT_IND,      
    APP_BT_HFU_MEMORY_DIAL_RESULT_IND,
    APP_BT_HFU_CONNECT_CNF,
    APP_BT_HFU_DISCONNECT_CNF,
    APP_BT_CALL_SIGNAL_END,
	
    APP_BT_ME_ON_CNF,   //0xa218
    APP_BT_ME_OFF_CNF,	//0xa219
    APP_BT_INQ_DEV_NAME,	//0xa21A
    APP_BT_INQ_DEV_ADDR,	//0xa21B
    APP_BT_INQ_COMP_CNF,	//0xa21C
    APP_BT_INQUIRY_CANCEL,	//0xa21D
    APP_BT_VISIBILE_CNF,	//0xa21E
    APP_BT_HIDDEN_CNF,	//0xa21F
    APP_BT_DEV_PIN_REQ, //0xa221
    APP_BT_SSP_NUM_IND,	//0xa222
    APP_BT_DEV_PAIR_COMPLETE,	//0xa223
    APP_BT_DEV_PAIR_COMPLETE_IND,	//0xa224
    APP_BT_DELETE_DEVICE_RES,	//0xa225
    APP_BT_SPP_LINK_STATUS_RES,
    APP_BT_SPP_DATA_RECIEVE_IND,
    APP_BT_SPP_DATA_RECIEVE_CNF,
    APP_BT_SPP_DATA_RECEIVE_EX_IND,
    APP_BT_SPP_CONNECT_IND,
    APP_BT_SPP_DISCONNECT_IND,
    APP_BT_SPP_STATUS_IND,
    APP_BT_SPP_SERVICE_NAME_IND,
    APP_BT_HID_CONNECT_IND,
    APP_BT_HID_DISCONNECT_IND,
    APP_BT_A2DPSNK_CONNECT_CNF,
    APP_BT_A2DPSNK_DISCONNECT_CNF,
    APP_BT_AVRCP_CT_MEDIA_ATTRIBUTES,
    APP_BT_HFAG_SLC_CONNECTED,
    APP_BT_HFAG_SLC_CONNECTED_IND,
    APP_BT_HFAG_SLC_DISCONNECTED,
    APP_BT_HFAG_PLAY_CFM,
    APP_BT_HFAG_STOP_CFM,
    APP_BT_HFAG_HFU_CALL_ANSWER,
    APP_BT_HFAG_HFU_CALL_HANGUP,
    APP_BT_HFAG_HFU_DIAL_NUMBER,
    APP_BT_HFAG_HFU_DIAL_MEMORY,
    APP_BT_HFAG_HFU_DIAL_REDIAL,
    APP_BT_HFAG_HFU_HOLD,
    APP_BT_HFAG_HFU_DTMF_NUMBER,
    APP_BT_HFAG_AUDIO_CONNECTED,
    APP_BT_HFAG_AUDIO_DISCONNECTED,
    APP_BT_HFAG_HFU_STATUS_REQ,
    APP_BT_HFAG_HS_MIC_VOL_CHANGE,
    APP_BT_HFAG_HS_SPK_VOL_CHANGE,
    APP_BT_HFAG_HFU_CLCC,
    APP_BT_LLS_SERVICE_CONN_COMP,
    APP_BT_LLS_SERVICE_DISCONN_COMP,
    APP_BT_IAS_SERVICE_ALERT_LEVEL_IND,
    APP_BT_CTSC_LANGUAGE_RES,
    APP_BT_LINK_DISC_RES,
    APP_BLE_LINK_PAIRED,
    APP_BLE_LINK_CONNECTED,
    APP_BLE_FINDER_FLAG,
    APP_BLE_CMD_CONTROL_IND,
    APP_BLE_CMD_CONTROL_UPDATE_VERSION_IND,
    APP_BLE_STATUS_CTSC_DATE_RES,
    APP_BT_AVRCP_SEND_REWIND_OR_FASTFWD_SINGNAL,
	ATC_AUTO_TEST_CMD_IND,
    APP_MN_IMS_STATE_IND,
    APP_MN_CALL_PATH_IND,
    APP_MN_CHANGE_RAT_CNF,
    APP_MN_CALL_AUDIO_ON_IND,
    APP_MN_CALL_AUDIO_RESTART_IND,
    APP_MN_ERRC_CONN_STATUS_IND,
    APP_MN_HSL_ABORT_IND,
    APP_MN_HSL_RECOVERY_IND,
    APP_MN_LTE_PRIORITY_RSP,
    APP_MN_HSL_START_RSP,
    APP_MN_HSL_STOP_RSP,
    END_APP_SIGNAL
} APP_MN_SIGNAL_E;

/*JAVA GROUP*/
typedef enum
{
	/* be used for sun java mp4 */ 
	APP_JAVA_MP4_DISPLAY_IND = ((JAVA_GROUP << 8)|1),	
	APP_JAVA_SNAPSHOT_END_IND,
	APP_JAVA_MP4_END_IND,	

    /* used for java*/
    APP_JAVA_END_IND,
    APP_JAVA_LAUNCH_INPUT_METHOD_IND,
    APP_JAVA_LAUNCH_FILE_BROWSER_IND,
    APP_JAVA_LAUNCH_WAP_BROWSER_IND,
    APP_JAVA_START_AMS_IND,
    APP_JAVA_STATUSBAR_OPERATION_IND,
    APP_JAVA_SCREEN_REFLUSH_IND,
    APP_JAVA_LAUNCH_PRELOAD_MIDLET_IND,
    APP_JAVA_LAUNCH_VM_EXIT_WIN_IND,
    APP_JAVA_BACKGROUND_TIMER_EVENT,
    APP_JAVA_PDP_ACTIVE,
    APP_JAVA_PDP_DEACTIVE,
    APP_JAVA_VIDEO,
	APP_JAVA_ADD_VCARD_REQ,
	APP_JAVA_MODIFY_VCARD_REQ,
	APP_JAVA_REMOVE_VCARRD_REQ,
	APP_JAVA_SIGNAL_MAX = ((JAVA_GROUP << 8) | SIGNAL_MAX_OFFSET)
}APP_JAVA_SIGNALCODE_E;

/*VIDEO GROUP*/
typedef enum
{
    APP_VP_FRAME_END_IND = ((VIDEO_GROUP << 8)|1),	
    APP_VP_END_IND,
    APP_VP_PLAY_NEXT_FILE_REQ,
    APP_VP_FRAME_END_NEED_DATA,
    APP_VP_ONE_FRAME_REARCH,
    APP_VP_ONE_FRAME_END,
    APP_VP_SIGNAL_MAX = ((VIDEO_GROUP << 8) | SIGNAL_MAX_OFFSET)
}APP_VIDEO_SIGNALCODE_E;

/*MULTIMEDIA GROUP*/
typedef enum
{
    APP_SRVAP_EVENT_START = ((MULTIMEDIA_GROUP << 8)|1),
    APP_SRVAP_EVENT_FROM_AUDIO_SRV,
    APP_SRVAP_EVENT_MAX,

    APP_MULTIMEDIA_SIGNAL_MAX = ((MULTIMEDIA_GROUP << 8) | SIGNAL_MAX_OFFSET)
}APP_MULTIMEDIA_SIGNALCODE_E;
/* Wre Video Player Group */
typedef enum
{
    APP_WRE_VIDEO_FRAME_END_IND = ((WRE_VIDEO_GROUP << 8)|1),
    APP_WRE_VIDEO_END_IND,
    //APP_WRE_VIDEO_PLAY_NEXT_FILE_REQ,
    APP_WRE_VIDEO_SIGNAL_MAX = ((WRE_VIDEO_GROUP << 8) | SIGNAL_MAX_OFFSET)
}APP_WRE_VIDEO_SIGNALCODE_E;

typedef enum
{
    MVIDEO_TIMER = ((MOBILE_VIDEO_GROUP << 8) | 1),
    MVIDEO_CONTACT_OPEN,   
    MVIDEO_OPEN_EDIT_WIN,
    MVIDEO_EXIT_IND,
    MVIDEO_CREATE_REQ,
    MVIDEO_RELEASE_REQ,
    MVIDEO_EXIT_REQ,
    MVIDEO_PLAY_REQ,
    MVIDEO_PAUSE_REQ,
    MVIDEO_SEEK_REQ,
    MVIDEO_STOP_REQ,
    MVIDEO_SET_PARAM_REQ,
    MVIDEO_UPDATE_VOL_REQ,
    MVIDEO_GET_CUR_TIME_REQ,
    MVIDEO_PDP_ACTIVE_REQ,
    MVIDEO_PDP_DEACTIVE_REQ,
    MVIDEO_MSG_MAX = ((MOBILE_VIDEO_GROUP << 8) | SIGNAL_MAX_OFFSET)
}MVIDEO_SIGNALCODE_E;

/*Layer4_GPS_GROUP*/
typedef enum
{
    APP_MN_GPS_DOWNLOAD_CNF = ((Layer4_GPS_GROUP << 8)|1),	
    APP_MN_GPS_INIT_CNF,
    APP_MN_GPS_START_CNF,
    APP_MN_GPS_STOP_CNF,
    APP_MN_GPS_RESET_CNF,
    APP_MN_GPS_READ_STATUS_CNF,
    APP_MN_GPS_READ_INFO_CNF,
    APP_MN_GPS_OUTPUT_CNF,
    APP_MN_GPS_POWEROFF_CNF,
    APP_MN_GPS_OUTPUT_INFO_IND,
    APP_MN_GPS_ERR_IND,
    APP_MN_GPS_FIX_IND,
    
    END_APP_GPS_SIGNAL
    
}APP_MN_GPS_SIGNAL_E;

#ifdef ZDT_NFC_SUPPORT
#define ZDT_NFC_GROUP  (0xF0)
typedef enum _ZDT_NFC_SIGNAL
{
    ZDT_NFC_SIGNAL_START = (( ZDT_NFC_GROUP << 8 ) | 1 ) ,	
    ZDT_NFC_SIGNAL_INIT_OVER,
    ZDT_NFC_SIGNAL_END,
    ZDT_NFC_SIGNAL_MAX = ((ZDT_NFC_GROUP << 8) | SIGNAL_MAX_OFFSET)
}ZDT_NFC_SIG_E;
#endif


#ifdef WLDT_APP_SUPPORT
#define WLDT_APP_GROUP  (0xF9)
typedef enum _WLDT_APP_SIGNAL
{
    WLDT_APP_SIGNAL_START = (( WLDT_APP_GROUP << 8 ) | 1 ) ,	
    WLDT_APP_SIGNAL_CHECK_TIME,
#ifdef WLDT_NET_SUPPORT
    WLDT_APP_SIGNAL_NET_INIT,
    WLDT_APP_SIGNAL_NET_OPEN,
    WLDT_APP_SIGNAL_NET_CLOSE,
    WLDT_APP_SIGNAL_NET_RESET,
    WLDT_APP_SIGNAL_NET_ACTIVE_SUCCESS,
    WLDT_APP_SIGNAL_NET_ACTIVE_FAIL,
    WLDT_APP_SIGNAL_NET_CONNET_FAIL,
#ifdef WLDT_TCP_SUPPORT
    WLDT_APP_SIGNAL_TCP_UNREG,
    WLDT_APP_SIGNAL_TCP_REG,
    WLDT_APP_SIGNAL_TCP_REG_SUCCESS,
    WLDT_APP_SIGNAL_TCP_REG_FAIL,
    WLDT_APP_SIGNAL_TCP_CONNECT_SUCCESS,
    WLDT_APP_SIGNAL_TCP_WRITE_ADD,
    WLDT_APP_SIGNAL_TCP_WRITE_START,
    WLDT_APP_SIGNAL_TCP_WRITE_RESTART,
    WLDT_APP_SIGNAL_TCP_WRITE_SUCCESS,
    WLDT_APP_SIGNAL_TCP_WRITE_FAIL,
    WLDT_APP_SIGNAL_TCP_RCV_DATA,
    WLDT_APP_SIGNAL_TCP_DISCONNECTED,
#endif
#ifdef WLDT_PLAT_CY_SUPPORT
    WLDT_APP_SIGNAL_CY_NET_RESET,
    WLDT_APP_SIGNAL_CY_HEART,
    WLDT_APP_SIGNAL_CY_NET_CB,
#endif
#endif
    WLDT_APP_SIGNAL_END,
    WLDT_APP_SIGNAL_MAX = ((WLDT_APP_GROUP << 8) | SIGNAL_MAX_OFFSET)
}WLDT_APP_SIG_E;
#endif

#ifdef ZDT_APP_SUPPORT
#define ZDT_APP_GROUP  (0xF1)
typedef enum _ZDT_APP_SIGNAL
{
    ZDT_APP_SIGNAL_START = (( ZDT_APP_GROUP << 8 ) | 1 ) ,	
    ZDT_APP_SIGNAL_CHECK_TIME,
    ZDT_APP_SIGNAL_FLYMODE_RESET,
#ifdef ZDT_PCBA_ZW31_SUPPORT
    ZDT_APP_SIGNAL_HALL_INT,
#endif
#ifdef ZDT_GPS_SUPPORT
    ZDT_APP_SIGNAL_GPS_POS_OK,
    ZDT_APP_SIGNAL_GPS_POS_FAIL,
    ZDT_APP_SIGNAL_GPS_POS_OVER,
#endif
#ifdef ZDT_WIFI_SUPPORT
    ZDT_APP_SIGNAL_WIFI_SCAN_OK,
    ZDT_APP_SIGNAL_WIFI_SCAN_FAIL,
#endif
#ifdef ZDT_GSENSOR_SUPPORT
    ZDT_APP_SIGNAL_GSENSOR_MOVE,
    ZDT_APP_SIGNAL_GSENSOR_STILLNESS,
    ZDT_APP_SIGNAL_GSENSOR_FAIL,
    ZDT_APP_SIGNAL_GSENSOR_STEP,
#endif
#ifdef ZDT_HSENSOR_SUPPORT
    ZDT_APP_SIGNAL_HSENSOR_HR,
    ZDT_APP_SIGNAL_HSENSOR_TW,
#endif
#ifdef ZDT_SMS_SUPPORT
    ZDT_APP_SIGNAL_SMS_SEND,
    ZDT_APP_SIGNAL_SMS_RESEND,
    ZDT_APP_SIGNAL_SMS_SEND_OVER,
#endif
#ifdef ZDT_NET_SUPPORT
    ZDT_APP_SIGNAL_NET_INIT,
    ZDT_APP_SIGNAL_NET_OPEN,
    ZDT_APP_SIGNAL_NET_CLOSE,
    ZDT_APP_SIGNAL_NET_RESET,
    ZDT_APP_SIGNAL_NET_ACTIVE_SUCCESS,
    ZDT_APP_SIGNAL_NET_ACTIVE_FAIL,
    ZDT_APP_SIGNAL_NET_CONNET_FAIL,
#ifdef ZDT_UDP_SUPPORT
    ZDT_APP_SIGNAL_UDP_SEND,
    ZDT_APP_SIGNAL_UDP_RESEND,
    ZDT_APP_SIGNAL_UDP_RCV,
    ZDT_APP_SIGNAL_UDP_SEND_OVER,
#endif
#ifdef ZDT_TCP_SUPPORT
    ZDT_APP_SIGNAL_TCP_UNREG,
    ZDT_APP_SIGNAL_TCP_REG,
    ZDT_APP_SIGNAL_TCP_REG_SUCCESS,
    ZDT_APP_SIGNAL_TCP_REG_FAIL,
    ZDT_APP_SIGNAL_TCP_CONNECT_SUCCESS,
    ZDT_APP_SIGNAL_TCP_WRITE_ADD,
    ZDT_APP_SIGNAL_TCP_WRITE_START,
    ZDT_APP_SIGNAL_TCP_WRITE_RESTART,
    ZDT_APP_SIGNAL_TCP_WRITE_SUCCESS,
    ZDT_APP_SIGNAL_TCP_WRITE_FAIL,
    ZDT_APP_SIGNAL_TCP_RCV_DATA,
    ZDT_APP_SIGNAL_TCP_DISCONNECTED,
#endif
#ifdef ZDT_PLAT_HYHL_SUPPORT
    ZDT_APP_SIGNAL_HYHL_HEART,
    ZDT_APP_SIGNAL_HYHL_NET_RESET,
    ZDT_APP_SIGNAL_HYHL_SMS_SERVER,
    ZDT_APP_SIGNAL_HYHL_SMS_SOS,
#endif
#ifdef ZDT_PLAT_YX_SUPPORT
    ZDT_APP_SIGNAL_YX_HEART,
    ZDT_APP_SIGNAL_YX_LOCREPORT,
    ZDT_APP_SIGNAL_YX_MDBC,
    ZDT_APP_SIGNAL_YX_RECORD_TIMEOUT,
    ZDT_APP_SIGNAL_YX_RECORD_START,
    ZDT_APP_SIGNAL_YX_RECORD_STOP,
    ZDT_APP_SIGNAL_YX_RECORD_SUCCESS,
    ZDT_APP_SIGNAL_YX_RECORD_FAIL,
    ZDT_APP_SIGNAL_YX_RECORD_SEND,
    ZDT_APP_SIGNAL_YX_VOC_FILEPLAY,
    ZDT_APP_SIGNAL_YX_VOC_PLAYSTOP,
    ZDT_APP_SIGNAL_YX_NET_RESET,
    ZDT_APP_SIGNAL_YX_VOC_SEND_RESULT,
    ZDT_APP_SIGNAL_YX_VOC_VOLUME,
    ZDT_APP_SIGNAL_YX_LOSE,
    ZDT_APP_SIGNAL_YX_BATSTAUTS,
    ZDT_APP_SIGNAL_YX_MOVE,
    ZDT_APP_SIGNAL_YX_STILL,
    ZDT_APP_SIGNAL_YX_FALLDOWN,
    ZDT_APP_SIGNAL_YX_ALERT,
    ZDT_APP_SIGNAL_YX_WT,
    ZDT_APP_SIGNAL_YX_UNBIND,
    ZDT_APP_SIGNAL_YX_JP_CHANGE,
    ZDT_APP_SIGNAL_YX_LBS_CHANGE,
    ZDT_APP_SIGNAL_YX_LOCTION_END,
    ZDT_APP_SIGNAL_YX_CAPTRUE,
    ZDT_APP_SIGNAL_YX_CAPTRUE_SEND,
    ZDT_APP_SIGNAL_YX_CAPTRUE_RESEND,
    ZDT_APP_SIGNAL_YX_CAPTRUE_SEND_RESULT,
#ifdef ZDT_SUPPORT_BEACON
    ZDT_APP_SIGNAL_YX_IB_ALERT_IN,
    ZDT_APP_SIGNAL_YX_IB_ALERT_OUT,
#endif
#endif
#endif
#ifdef ZDT_PLAT_SHB_SUPPORT
    ZDT_APP_SIGNAL_SHB_HEART,
    ZDT_APP_SIGNAL_SHB_LOCREPORT,
    ZDT_APP_SIGNAL_SHB_NET_RESET,
    ZDT_APP_SIGNAL_SHB_BATSTAUTS,
    ZDT_APP_SIGNAL_SHB_ALERT,
    ZDT_APP_SIGNAL_SHB_LBS_CHANGE,
    ZDT_APP_SIGNAL_SHB_LOCTION_END,
    ZDT_APP_SIGNAL_SHB_CALL_LOG_SEND,
#endif
    ZDT_APP_SIGNAL_CUSTRING_PLAY,
    ZDT_APP_SIGNAL_END,
    ZDT_APP_SIGNAL_MAX = ((ZDT_APP_GROUP << 8) | SIGNAL_MAX_OFFSET)
}ZDT_APP_SIG_E;
#endif
#ifdef ZDT_GPS_SUPPORT
typedef enum _ZDT_GPS_TASK_SIGNAL
{
    SIG_ZDT_GPS_RCV = 0xF201,
    SIG_ZDT_GPS_RCVHEX,
    SIG_ZDT_GPS_RCVTD,
    SIG_ZDT_GPS_RCVCASIC,
    SIG_ZDT_GPS_RCVALLYSTAR,
    SIG_ZDT_GPS_SEND,
    SIG_ZDT_GPS_POS_FAIL,
    SIG_ZDT_GPS_POS_OK,
    SIG_ZDT_GPS_HW_PWON,
    SIG_ZDT_GPS_HW_PWOFF,
    SIG_ZDT_GPS_HW_CHECK_START,
    SIG_ZDT_GPS_HW_CHECK_END,
#ifdef ZDT_GPS_SUPPORT_AGPS
    SIG_ZDT_GPS_EPH_SET_START,
    SIG_ZDT_GPS_EPH_SET_NEXT,
    SIG_ZDT_GPS_EPH_SET_END,
#endif
    SIG_ZDT_GPS_MAX
}ZDT_GPS_TASK_SIG_E;
#endif

#ifdef ZDT_GSENSOR_SUPPORT
typedef enum _ZDT_GSENSOR_TASK_SIGNAL
{
    SIG_ZDT_GSENSOR_STEP = 0xF301,
    SIG_ZDT_GSENSOR_OPEN,
    SIG_ZDT_GSENSOR_CLOSE,
    SIG_ZDT_GSENSOR_TIMER,
    SIG_ZDT_GSENSOR_MOVE,
    SIG_ZDT_GSENSOR_STILL,
    SIG_ZDT_GSENSOR_FAIL,
    SIG_ZDT_GSENSOR_STEPRESET,
    SIG_ZDT_GSENSOR_MAX
}ZDT_GSENSOR_TASK_SIG_E;
#endif

#ifdef ZDT_HSENSOR_SUPPORT
typedef enum _ZDT_HSENSOR_TASK_SIGNAL
{
    SIG_ZDT_HSENSOR_START = 0xF401,
    SIG_ZDT_HSENSOR_OPEN,
    SIG_ZDT_HSENSOR_CLOSE,
    SIG_ZDT_HSENSOR_RESET,
    SIG_ZDT_HSENSOR_TIMER,
    SIG_ZDT_HSENSOR_HR_OPEN,
    SIG_ZDT_HSENSOR_HR_CLOSE,
    SIG_ZDT_HSENSOR_BP_OPEN,
    SIG_ZDT_HSENSOR_BP_CLOSE,
    SIG_ZDT_HSENSOR_SPO2_OPEN,
    SIG_ZDT_HSENSOR_SPO2_CLOSE,
    SIG_ZDT_HSENSOR_SPO2_RESET,
    SIG_ZDT_HSENSOR_SPO2_TIMER,
    SIG_ZDT_HSENSOR_INT,
    SIG_ZDT_HSENSOR_TW_OPEN,
    SIG_ZDT_HSENSOR_TW_CLOSE,
    SIG_ZDT_HSENSOR_TW_TIMER,
    SIG_ZDT_HSENSOR_TW,
    SIG_ZDT_HSENSOR_INT0,
    SIG_ZDT_HSENSOR_INT1,
    SIG_ZDT_HSENSOR_FACTORY_OPEN,
    SIG_ZDT_HSENSOR_FACTORY_CLOSE,
    SIG_ZDT_HSENSOR_MAX
}ZDT_HSENSOR_TASK_SIG_E;
#endif

#ifdef ZDT_NFC_SUPPORT
typedef enum _ZDT_NFC_TASK_SIGNAL
{
    SIG_ZDT_NFC_RCV = 0xF901,
    SIG_ZDT_NFC_SEND,
    SIG_ZDT_NFC_HW_PWON,
    SIG_ZDT_NFC_HW_PWOFF,
    SIG_ZDT_NFC_HW_CHECK_START,
    SIG_ZDT_NFC_HW_CHECK_END,
    SIG_ZDT_NFC_TIMER,
    SIG_ZDT_NFC_INT,
    SIG_ZDT_NFC_MAX
}ZDT_NFC_TASK_SIG_E;
#endif

#ifdef ZDT_HTTP_APP_SUPPORT
#define ZDTHTTP_APP_GROUP  (0xF7)
typedef enum _ZDTHTTP_APP_SIGNAL
{
    ZDTHTTP_APP_SIGNAL_START = (( ZDTHTTP_APP_GROUP << 8 ) | 1 ) ,	

    ZDTHTTP_APP_SIGNAL_HTTP_SEND,
    ZDTHTTP_APP_SIGNAL_HTTP_RESEND,
    ZDTHTTP_APP_SIGNAL_HTTP_RCV,
    ZDTHTTP_APP_SIGNAL_HTTP_SEND_OVER,
    ZDTHTTP_APP_SIGNAL_NET_INIT,
    ZDTHTTP_APP_SIGNAL_NET_RESET,
    ZDTHTTP_APP_SIGNAL_NET_OPEN,
    ZDTHTTP_APP_SIGNAL_NET_CLOSE,
    ZDTHTTP_APP_SIGNAL_PDP_ACTIVE_FAIL,
    ZDTHTTP_APP_SIGNAL_PDP_ACTIVE_SUCCESS,
    ZDTHTTP_APP_SIGNAL_PDP_CONNECT_FAIL,
    ZDTHTTP_APP_SIGNAL_HTTP_REFRESH,

    ZDTHTTP_APP_SIGNAL_END,
    ZDTHTTP_APP_SIGNAL_MAX = ((ZDTHTTP_APP_GROUP << 8) | SIGNAL_MAX_OFFSET)
}ZDTHTTP_APP_SIG_E;
#endif
#ifdef TULING_AI_SUPPORT
#define AI_APP_GROUP  (0xF5)
typedef enum _AI_APP_SIGNAL
{
    AI_APP_SIGNAL_START = (( AI_APP_GROUP << 8 ) | 1 ) ,

    AI_APP_SIGNAL_NET_INIT,
    AI_APP_SIGNAL_NET_OPEN,
    AI_APP_SIGNAL_NET_CLOSE,
    AI_APP_SIGNAL_NET_RESET,
    AI_APP_SIGNAL_NET_ACTIVE_SUCCESS,
    AI_APP_SIGNAL_NET_ACTIVE_FAIL,
    AI_APP_SIGNAL_NET_CONNET_FAIL,

    AI_APP_SIGNAL_TCP_UNREG,
    AI_APP_SIGNAL_TCP_REG,
    AI_APP_SIGNAL_TCP_REG_SUCCESS,
    AI_APP_SIGNAL_TCP_REG_FAIL,
    AI_APP_SIGNAL_TCP_CONNECT_SUCCESS,
    AI_APP_SIGNAL_TCP_WRITE_ADD,
    AI_APP_SIGNAL_TCP_WRITE_START,
    AI_APP_SIGNAL_TCP_WRITE_RESTART,
    AI_APP_SIGNAL_TCP_WRITE_SUCCESS,
    AI_APP_SIGNAL_TCP_WRITE_FAIL,
    AI_APP_SIGNAL_TCP_RCV_DATA,
    AI_APP_SIGNAL_TCP_DISCONNECTED,

    AI_APP_SIGNAL_HTTP_REQUEST,
    

    AI_APP_SIGNAL_AI_RECORD_TIMEOUT,
    AI_APP_SIGNAL_AI_RECORD_START,
    AI_APP_SIGNAL_AI_RECORD_STOP,
    AI_APP_SIGNAL_AI_RECORD_SUCCESS,
    AI_APP_SIGNAL_AI_RECORD_FAIL,
    AI_APP_SIGNAL_AI_RECORD_SEND,
    AI_APP_SIGNAL_AI_VOC_FILEPLAY,
    AI_APP_SIGNAL_AI_VOC_PLAYSTOP,

    AI_APP_SIGNAL_AI_VOC_VOLUME,

    AI_APP_SIGNAL_AI_RCV_MP3_PLAY,
    AI_APP_SIGNAL_AI_RCV_MP3_STOP,

    AI_APP_SIGNAL_END,
    AI_APP_SIGNAL_MAX = ((AI_APP_GROUP << 8) | SIGNAL_MAX_OFFSET)
}AI_APP_SIG_E;
#endif

#ifdef LEBAO_MUSIC_SUPPORT
typedef enum LEBAO_APP_SIGNAL_E
{
	LEBAO_APP_SIGNAL_START = 0xF601,

	LEBAO_APP_SIGNAL_END,
	LEBAO_APP_SIGNAL_MAX
}LEBAO_APP_SIGNAL_E;
#endif


#ifdef ZDT_ZFB_SUPPORT
#define ZFB_APP_GROUP  (0xF8)
typedef enum _ZFB_APP_SIGNAL
{
    ZFB_APP_SIGNAL_START = (( ZFB_APP_GROUP << 8 ) | 1 ) ,	
    ZFB_APP_SIGNAL_CHECK_TIME,
    ZFB_APP_SIGNAL_NET_INIT,
    ZFB_APP_SIGNAL_NET_OPEN_ADD,
    ZFB_APP_SIGNAL_NET_OPEN_START,
    ZFB_APP_SIGNAL_NET_OPEN,
    ZFB_APP_SIGNAL_NET_CLOSE,
    ZFB_APP_SIGNAL_NET_RESET,
    ZFB_APP_SIGNAL_NET_ACTIVE_SUCCESS,
    ZFB_APP_SIGNAL_NET_ACTIVE_FAIL,
    ZFB_APP_SIGNAL_NET_CONNET_FAIL,
    ZFB_APP_SIGNAL_ALIPAY_INIT_START,
    ZFB_APP_SIGNAL_ALIPAY_INIT_CFG,
    ZFB_APP_SIGNAL_ALIPAY_GETBINDSTATUS_CFG,
    ZFB_APP_SIGNAL_ALIPAY_BINDING_START,
    ZFB_APP_SIGNAL_ALIPAY_BINDING_OVER,
    ZFB_APP_SIGNAL_ALIPAY_PAYCODE_CFG,
    ZFB_APP_SIGNAL_ALIPAY_PAYING_OVER,
    ZFB_APP_SIGNAL_ALIPAY_OBTAINCODE_CFG,
    ZFB_APP_SIGNAL_ALIPAY_LOGON_ID_CFG,
    ZFB_APP_SIGNAL_ALIPAY_NICK_NAME_CFG,
    ZFB_APP_SIGNAL_END,
    ZFB_APP_SIGNAL_MAX = ((ZFB_APP_GROUP << 8) | SIGNAL_MAX_OFFSET)
}ZFB_APP_SIG_E;

typedef enum _ZFB_PAY_TASK_SIGNAL
{
    SIG_ZFB_PAY_START = ZFB_APP_SIGNAL_MAX,
    SIG_ZFB_INIT_START,
    SIG_ZFB_INIT_ID2_STEP1,
    SIG_ZFB_INIT_ID2_GET_OTP_CFG,
    SIG_ZFB_INIT_ID2_STEP2,
    SIG_ZFB_INIT_ALIPAY,
    SIG_ZFB_INIT_ALIPAY_OVER,
    SIG_ZFB_ALIPAY_GET_BIND_STATUS,
    SIG_ZFB_ALIPAY_QUERY_BIND_RESULT,
    SIG_ZFB_ALIPAY_QUERY_BIND_STOP,
    SIG_ZFB_ALIPAY_GET_PAYCODE,
    SIG_ZFB_ALIPAY_QUERY_PAY_RESULT,
    SIG_ZFB_ALIPAY_QUERY_PAY_STOP,
    SIG_ZFB_ALIPAY_GET_OBTAINCODE,
    SIG_ZFB_ALIPAY_GET_LOGON_ID,
    SIG_ZFB_ALIPAY_GET_NICK_NAME,
    SIG_ZFB_PAY_MAX
}ZFB_PAY_TASK_SIG_E;
#endif

#ifdef BEACON_APP_SUPPORT
#define BEACON_APP_GROUP  (0xFA)
typedef enum _BEACON_APP_SIGNAL
{
    BEACON_APP_SIGNAL_START = (( BEACON_APP_GROUP << 8 ) | 1 ) ,
    BEACON_APP_SIGNAL_OK,    
    BEACON_APP_SIGNAL_ERR,    
    BEACON_APP_SIGNAL_REBOOT,
    BEACON_APP_SIGNAL_SLEEP,
    BEACON_APP_SIGNAL_CONN,
    BEACON_APP_SIGNAL_CONN_CHECK,
    BEACON_APP_SIGNAL_DISCONN,
    BEACON_APP_SIGNAL_DISCONN_CHECK,
    BEACON_APP_SIGNAL_DATA,
    BEACON_APP_SIGNAL_LINK,
    BEACON_APP_SIGNAL_LINK_ID,
    BEACON_APP_SIGNAL_SCAN,
    BEACON_APP_SIGNAL_NO,
    BEACON_APP_SIGNAL_TASK_SCAN_OK,
    BEACON_APP_SIGNAL_TASK_SCAN_FAIL,
    BEACON_APP_SIGNAL_END,
    BEACON_APP_SIGNAL_MAX = ((BEACON_APP_GROUP << 8) | SIGNAL_MAX_OFFSET)
}BEACON_APP_SIG_E;
#endif
/**---------------------------------------------------------------------------*
 **                         Global Variables                                  *
 **---------------------------------------------------------------------------*/
 
/**---------------------------------------------------------------------------*
 **                         Constant Variables                                *
 **---------------------------------------------------------------------------*/

/**---------------------------------------------------------------------------*
 **                         Function Prototypes                               *
 **---------------------------------------------------------------------------*/

/**---------------------------------------------------------------------------*
 **                         Compiler Flag                                     *
 **---------------------------------------------------------------------------*/    
#ifdef __cplusplus
}
#endif

#endif  // _SIG_CODE_H

// End of sig_code.h


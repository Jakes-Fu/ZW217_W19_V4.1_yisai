#ifndef _RDA8910_LPDDR2_TIMING_H_
#define _RDA8910_LPDDR2_TIMING_H_

/* #define RDA_PALLADIUM_TEST */

#define UDELAY_SYMBOL   0x41b23671

struct ddr_save_pattern {
	uint32_t offs;
	uint32_t val;
};

const struct ddr_save_pattern dmc_off_val[] = {
	{
		REG_DMC_CTRL_FORMAT_CONTROL,
		DMC400_ALIGN_BOUNDARY_ALIGN_BOUNDARY_2_COL_2BIT |
		DMC400_ACC_GRANU_ACC_GRANU_2_DDR_4N |
		DMC400_MEM_BURST_MEM_BURST_2_DDR_BL4 |
		DMC400_MEM_WIDTH_PHY_WIDTH_32_X16_DDR
	},

	{
		REG_DMC_CTRL_ADDRESS_CONTROL,
		DMC400_CHANNEL_BITS_0_CHANNEL_BITS_1MEMIF |
		DMC400_CHIP_BITS_0_CHIP_BITS_1CS |
		DMC400_BANK_BITS_2_BANK_BITS_4BK |
#ifdef RDA_PALLADIUM_TEST
		DMC400_ROW_BITS_13_ROW_BITS | DMC400_COLUMN_BITS_10_COL_BITS
#else
		DMC400_ROW_BITS_13_ROW_BITS | DMC400_COLUMN_BITS_9_COL_BITS
#endif
	},

	{
		REG_DMC_CTRL_DECODE_CONTROL,
#ifdef RDA_PALLADIUM_TEST
		DMC400_STRIP_DECODE_PAGE_ADDR_12_11 |
#else
		DMC400_STRIP_DECODE_PAGE_ADDR_10_9 |
#endif
		DMC400_ADDR_DECODE_CHIP_BANK_ROW_CHANNEL_COL
	},
#ifdef RDA_PALLADIUM_TEST
	{REG_DMC_CTRL_T_REFI,		0x28},
#else
	{REG_DMC_CTRL_T_REFI,		0x26},
#endif
	{REG_DMC_CTRL_T_RFC,		0x00240024},
	{REG_DMC_CTRL_T_MRR,		0x2},
	{REG_DMC_CTRL_T_MRW,		0x5},
	{REG_DMC_CTRL_T_RCD,		0x6},
	{REG_DMC_CTRL_T_RAS,		0x11},
	{REG_DMC_CTRL_T_RP,		0x3},
	{REG_DMC_CTRL_T_RPALL, 		0x3},
	{REG_DMC_CTRL_T_RRD,		0x4},
	{REG_DMC_CTRL_T_FAW,		0x14},
	{REG_DMC_CTRL_READ_LATENCY,	0xe},
	{REG_DMC_CTRL_T_RTR,		0x2},
	{REG_DMC_CTRL_T_RTW,		0x9},
	{REG_DMC_CTRL_T_RTP,		0x3},
	{REG_DMC_CTRL_WRITE_LATENCY,	0xa},
	{REG_DMC_CTRL_T_WR,		0xc},
	{REG_DMC_CTRL_T_WTR,		0x000a000a},
	{REG_DMC_CTRL_T_WTW,		0x000c000c},
	{REG_DMC_CTRL_T_ECKD,		0xb},
	{REG_DMC_CTRL_T_XCKD,		0xb},
	{REG_DMC_CTRL_T_EP,		0x2},
	{REG_DMC_CTRL_T_XP,		0x00030003},
	{REG_DMC_CTRL_T_ESR,		0x2},
	{REG_DMC_CTRL_T_XSR,		0x00380038},
	{REG_DMC_CTRL_T_SRCKD,		0xb},
	{REG_DMC_CTRL_T_CKSRD,		0xb},
	{REG_DMC_CTRL_T_RDDATA_EN,	0x6},
	{REG_DMC_CTRL_T_PHYWRLAT,	0x103},
};

const struct ddr_save_pattern dmc_cmd_off_val[] = {
	{UDELAY_SYMBOL, 1},
	{REG_DMC_CTRL_DIRECT_CMD, 0x0},
	{REG_DMC_CTRL_DIRECT_CMD, 0x1000003f},
	{REG_DMC_CTRL_DIRECT_CMD, 0x5000ff0a},
	{UDELAY_SYMBOL, 1},
	{REG_DMC_CTRL_DIRECT_CMD, 0x10009201},
	{REG_DMC_CTRL_DIRECT_CMD, 0x10000402},
	{REG_DMC_CTRL_DIRECT_CMD, 0x10000203},// MR3, 0x03: 48 ohm, 0x04: 60 ohm
	{UDELAY_SYMBOL, 1},
};

const struct ddr_save_pattern phy_off_val[] = {
	{REG_LPDDR_PHY_LPDDR_RF_CFG_PHY,		0x1},
	{REG_LPDDR_PHY_LPDDR_DRF_CFG,			0x1},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_DLL_DL_0_WR_AC,	0x2},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_DLL_DL_0_WR_DS0,	0x2},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_DLL_DL_0_WR_DS1,	0x2},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_DLL_DL_1_WR_DS0,	0x2},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_DLL_DL_2_WR_DS0,	0x2},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_DLL_DL_3_WR_DS0,	0x1},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_DLL_DL_1_WR_DS1,	0x2},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_DLL_DL_2_WR_DS1,	0x2},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_DLL_DL_3_WR_DS1,	0x1},
	{REG_LPDDR_PHY_LPDDR_DRF_CFG_REG_SEL,		0x0},
	{REG_LPDDR_PHY_LPDDR_DRF_CFG_DQS_IE_SEL_F0,	0x1},
	{REG_LPDDR_PHY_LPDDR_DRF_CFG_DQS_OE_SEL_F0,	0x1},
	{REG_LPDDR_PHY_LPDDR_DRF_CFG_DQS_OUT_SEL_F0,	0x4},
	{REG_LPDDR_PHY_LPDDR_DRF_CFG_DQS_GATE_SEL_F0,	0x3},
	{REG_LPDDR_PHY_LPDDR_DRF_CFG_DATA_IE_SEL_F0,	0x2},
	{REG_LPDDR_PHY_LPDDR_DRF_CFG_DATA_OE_SEL_F0,	0x1},
	{REG_LPDDR_PHY_LPDDR_DRF_CFG_READ_EN_SEL_F0,	0x4},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_EXT,		0x1111},
	{REG_LPDDR_PHY_LPDDR_DRF_TRAIN_CFG,		LPDDR_PHY_DRF_PHYUPD_EN},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_CLOCK_GATE,		0x1f},
	{REG_LPDDR_PHY_LPDDR_RF_CFG_PHY,		0x3},
};
#endif

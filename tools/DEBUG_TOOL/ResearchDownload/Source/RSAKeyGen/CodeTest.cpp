// CodeTest.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "ICodec.h"

/*
static BYTE privite_key[1160] = {
    0x00, 0x01, 0x00, 0x00, 0x03, 0x85, 0x5D, 0x39, 0x15, 0xF1, 0xCC, 0xA8, 0x84, 0x60, 0x3C, 0x18, 
    0xF4, 0xCF, 0xAB, 0x87, 0x63, 0x3F, 0x1B, 0xF7, 0xD2, 0xAE, 0x8A, 0x66, 0x42, 0x1E, 0xFA, 0xD5, 
    0xB1, 0x8D, 0x69, 0x45, 0x21, 0xFD, 0xD8, 0xB4, 0x90, 0x6C, 0x48, 0x24, 0x00, 0xDC, 0xB7, 0x93, 
    0x6F, 0x4B, 0x27, 0x03, 0xDF, 0xBA, 0x96, 0x72, 0x4E, 0x2A, 0x06, 0xE2, 0xBD, 0x99, 0x75, 0x51, 
    0x2D, 0x09, 0xE5, 0xC0, 0x9C, 0x78, 0x54, 0x30, 0x0C, 0xE8, 0xC3, 0x9F, 0x7B, 0x57, 0x33, 0x0F, 
    0xEB, 0xC6, 0xA2, 0x7E, 0x5A, 0x36, 0x12, 0xEE, 0xC9, 0xA5, 0x81, 0x5D, 0x39, 0x15, 0xF1, 0xCC, 
    0xA8, 0x84, 0x60, 0x3C, 0x18, 0xF4, 0xCF, 0xAB, 0x87, 0x63, 0x3F, 0x1B, 0xF7, 0xD2, 0xAE, 0x8A, 
    0x66, 0x42, 0x1E, 0xFA, 0xD5, 0xB1, 0x8D, 0x69, 0x45, 0x21, 0xFD, 0xD8, 0xB4, 0x90, 0x6C, 0x48, 
    0x24, 0x00, 0xDC, 0xB7, 0x62, 0xC1, 0xE4, 0x08, 0x2D, 0x51, 0x75, 0x99, 0xBD, 0xE1, 0x05, 0x2A, 
    0x4E, 0x72, 0x96, 0xBA, 0xDE, 0x02, 0x27, 0x4B, 0x6F, 0x93, 0xB7, 0xDB, 0xFF, 0x23, 0x48, 0x6C, 
    0x90, 0xB4, 0xD8, 0xFC, 0x20, 0x45, 0x69, 0x8D, 0xB1, 0xD5, 0xF9, 0x1D, 0x42, 0x66, 0x8A, 0xAE, 
    0xD2, 0xF6, 0x1A, 0x3F, 0x63, 0x87, 0xAB, 0xCF, 0xF3, 0x17, 0x3C, 0x60, 0x84, 0xA8, 0xCC, 0xF0, 
    0x14, 0x39, 0x5D, 0x81, 0xA5, 0xC9, 0xED, 0x11, 0x36, 0x5A, 0x7E, 0xA2, 0xC6, 0xEA, 0x0E, 0x33, 
    0x57, 0x7B, 0x9F, 0xC3, 0xE7, 0x0B, 0x30, 0x54, 0x78, 0x9C, 0xC0, 0xE4, 0x08, 0x2D, 0x51, 0x75, 
    0x99, 0xBD, 0xE1, 0x05, 0x2A, 0x4E, 0x72, 0x96, 0xBA, 0xDE, 0x02, 0x27, 0x4B, 0x6F, 0x93, 0xB7, 
    0xDB, 0xFF, 0x23, 0x48, 0x6C, 0x90, 0xB4, 0xD8, 0xFC, 0x20, 0x45, 0x69, 0x8D, 0xB1, 0xD5, 0xF9, 
    0x1D, 0x42, 0x66, 0x8A, 0x01, 0x00, 0x01, 0x00, 0x01, 0x51, 0x41, 0xAE, 0x34, 0x40, 0x32, 0x9F, 
    0x25, 0x31, 0x23, 0x90, 0x16, 0x22, 0x14, 0x81, 0x07, 0x13, 0x05, 0x72, 0xF8, 0x03, 0xF6, 0x62, 
    0xE9, 0xF4, 0xE6, 0x53, 0xDA, 0xE5, 0xD7, 0x44, 0xCB, 0xD6, 0xC8, 0x35, 0xBC, 0xC7, 0xB9, 0x26, 
    0xAD, 0xB8, 0xAA, 0x17, 0x9E, 0xA9, 0x9B, 0x08, 0x8F, 0x9A, 0x8C, 0xF9, 0x7F, 0x8B, 0x7D, 0xEA, 
    0x70, 0x7C, 0x6E, 0xDB, 0x61, 0x6D, 0x5F, 0xCC, 0x52, 0x5E, 0x50, 0xBD, 0x43, 0x4F, 0x41, 0xAE, 
    0x34, 0x40, 0x32, 0x9F, 0x25, 0x31, 0x23, 0x90, 0x16, 0x22, 0x14, 0x81, 0x07, 0x13, 0x05, 0x72, 
    0xF8, 0x03, 0xF6, 0x62, 0xE9, 0xF4, 0xE6, 0x53, 0xDA, 0xE5, 0xD7, 0x44, 0xCB, 0xD6, 0xC8, 0x35, 
    0xBC, 0xC7, 0xB9, 0x26, 0xAD, 0xB8, 0xAA, 0x17, 0x9E, 0xA9, 0x9B, 0x08, 0x8F, 0x9A, 0x8C, 0xF9, 
    0x7F, 0x8B, 0x7D, 0xEA, 0x70, 0x7C, 0x6E, 0xDB, 0xF5, 0x22, 0xCD, 0x94, 0x71, 0x31, 0xDC, 0xA3, 
    0x80, 0x40, 0xEB, 0xB2, 0x8F, 0x4F, 0xFA, 0xC1, 0x9E, 0x5E, 0x09, 0xD1, 0xAD, 0x6D, 0x18, 0xE0, 
    0xBC, 0x7C, 0x27, 0xEF, 0xCB, 0x8B, 0x36, 0xFE, 0xDA, 0x9A, 0x45, 0x0D, 0xEA, 0xA9, 0x54, 0x1C, 
    0xF9, 0xB8, 0x63, 0x2B, 0x08, 0xC8, 0x72, 0x3A, 0x17, 0xD7, 0x81, 0x49, 0x26, 0xE6, 0x90, 0x58, 
    0x35, 0xF5, 0x9F, 0x67, 0x44, 0x04, 0xAF, 0x76, 0x53, 0x13, 0xBE, 0x85, 0x62, 0x22, 0xCD, 0x94, 
    0x71, 0x31, 0xDC, 0xA3, 0x80, 0x40, 0xEB, 0xB2, 0x8F, 0x4F, 0xFA, 0xC1, 0x9E, 0x5E, 0x09, 0xD1, 
    0xAD, 0x6D, 0x18, 0xE0, 0xBC, 0x7C, 0x27, 0xEF, 0xCB, 0x8B, 0x36, 0xFE, 0xDA, 0x9A, 0x45, 0x0D, 
    0xEA, 0xA9, 0x54, 0x1C, 0xF9, 0xB8, 0x63, 0x2B, 0x08, 0xC8, 0x72, 0x3A, 0x17, 0xD7, 0x81, 0x49, 
    0x26, 0xE6, 0x90, 0x58, 0x35, 0xF5, 0x9F, 0x67, 0xC1, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 
    0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 
    0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 
    0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 
    0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 
    0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 
    0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 
    0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 
    0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xBD, 0xC3, 0xBB, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 
    0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 
    0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 
    0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 
    0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 
    0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 
    0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 
    0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 
    0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0x41, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 
    0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 
    0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 
    0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 
    0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 
    0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 
    0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 
    0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 
    0x3F, 0x3F, 0x7E, 0x7E, 0x3F, 0x3F, 0x7E, 0x7E, 0x11, 0x9C, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 
    0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 
    0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 
    0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 
    0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 
    0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 
    0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 
    0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 
    0xD0, 0x9B, 0xF9, 0x2D, 0xD0, 0x9B, 0xF9, 0x2D, 0x1C, 0x4D, 0xA6, 0xC9, 0x68, 0x59, 0x7D, 0xC2, 
    0x9C, 0x24, 0x3D, 0x65, 0x75, 0x03, 0x6B, 0xA8, 0x51, 0x0B, 0xA4, 0xF8, 0xF3, 0xC7, 0xBB, 0x2D, 
    0x07, 0x1A, 0x95, 0x38, 0x00, 0x9B, 0x73, 0xD0, 0x5D, 0x58, 0x7A, 0xC1, 0x1B, 0xC4, 0x04, 0xBF, 
    0xFD, 0x3B, 0x9B, 0x42, 0x84, 0x7E, 0xCD, 0x1F, 0xC8, 0x86, 0xA0, 0x96, 0x1A, 0xB9, 0x81, 0x1B, 
    0xB4, 0x00, 0x7A, 0x2B, 0x36, 0xA5, 0x03, 0x77, 0x6B, 0x05, 0x69, 0x28, 0x31, 0xE3, 0x11, 0xCA, 
    0x43, 0xD0, 0x51, 0x95, 0xC6, 0x63, 0x97, 0x8B, 0x15, 0x75, 0xEF, 0x25, 0xD2, 0x0A, 0x84, 0xF0, 
    0x69, 0x23, 0xB0, 0x41, 0x89, 0xFF, 0x6E, 0xA8, 0x92, 0x5B, 0xC8, 0x55, 0x54, 0xB7, 0x8F, 0x5E, 
    0x88, 0x86, 0x90, 0x92, 0xD5, 0xE6, 0x7B, 0x25, 0x75, 0xF3, 0x66, 0x63, 0x7F, 0x05, 0xAE, 0xB9, 
    0xE6, 0xB4, 0xF3, 0x76, 0x67, 0xC4, 0xD7, 0xB3, };

static BYTE aes_key[36] = {0x20,0x00,0x00,0x00,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
*/

int _tmain(int argc, _TCHAR* argv[])
{

    RSA2048KeyGen(NULL);

    //RSA
    /*
    BYTE data[256] = { 
        0x70,0xc6,0xae,0xb1,0x56,0xdd,0x34,0xd6,0x1a,0x25,0xab,0x53,0x5a,0x0e,0x30,0xd0,
        0x70,0x86,0xd9,0x6e,0xf5,0xef,0x52,0xd9,0xfb,0x40,0xa7,0x93,0xd4,0x38,0xc9,0x7d,
        0x64,0x80,0xa6,0xe2,0x6e,0xcb,0x8d,0xb4,0x27,0x5d,0x4e,0xce,0x7d,0xf2,0x53,0xa2,
        0xab,0x0e,0x7e,0xe7,0x32,0x65,0x9e,0x15,0xb4,0xc6,0x2a,0xb1,0xc0,0xc6,0x79,0x1c,
        0x45,0xf8,0x3f,0x48,0x4e,0x2b,0x46,0xab,0x70,0x20,0x4c,0x33,0xf4,0x58,0x9a,0x77,
        0x90,0xf9,0xe5,0xd2,0xb3,0xb4,0xc3,0xc5,0x5f,0xc8,0x5e,0x18,0x6a,0xa1,0x21,0xaa,
        0x80,0x81,0x41,0xeb,0x4b,0x38,0x87,0x7b,0x8a,0xf1,0x4a,0x2b,0x9a,0x03,0xf8,0x1f,
        0xb0,0xab,0x22,0xa4,0xe3,0xb8,0x42,0xbd,0x25,0x85,0x0b,0x06,0xd6,0x16,0x04,0xb7,
        0x3b,0x86,0x3b,0x6d,0x6c,0xee,0x15,0x9a,0x35,0xa1,0x04,0xf8,0x68,0xb6,0xb5,0xd5,
        0x4d,0x25,0x1c,0x37,0x09,0x95,0x68,0x46,0x82,0x8e,0xde,0xb7,0x08,0xf2,0xc0,0x80,
        0x0d,0x42,0xb2,0x5f,0x43,0xa2,0x08,0x5e,0x05,0xb3,0xf2,0x4e,0xfc,0x6b,0xce,0xc5,
        0xa7,0x92,0x84,0xab,0x3f,0xfd,0xe5,0x12,0xb2,0xf7,0x67,0x7f,0xac,0xe9,0x34,0x1d,
        0x60,0x9b,0xf7,0x19,0xc1,0xe4,0xb1,0xdd,0x99,0xfe,0x3e,0x79,0xdf,0x91,0x32,0x5e,
        0xd1,0x6d,0xe4,0x9d,0xf6,0xb1,0x3a,0xfe,0x7a,0x86,0x7b,0x02,0x25,0x84,0x3f,0x9c,
        0x2c,0x4c,0x83,0x4b,0xc4,0xa2,0x7b,0x7a,0x6e,0x84,0x7b,0xba,0x7c,0x47,0xf1,0x9a,
        0xe4,0x7f,0xbb,0x4d,0xec,0x2d,0x87,0xa3,0xde,0x28,0x2c,0x30,0x20,0x29,0x47,0x5b,};

    BYTE output[256] = {0};

    int ret = DecryptData(data,256,output,privite_key,ALG_RSA2048);
    */

    /*
    BYTE data[32] = {
        0xFA,0x0B,0x3B,0x25,0xBC,0x3E,0x25,0xf7,0xd1,0x25,0xf2,0xc0,0x64,0xad,0x89,0x25,
        0x32,0x58,0x07,0x9f,0x46,0x08,0x8a,0xa2,0x8e,0x2b,0x51,0x8c,0xd6,0x40,0xcc,0xaa,};

    BYTE output[32] = {0};

    int ret = DecryptData(data,32,output,aes_key,ALG_AES);
    */    
    
    return 0;
}


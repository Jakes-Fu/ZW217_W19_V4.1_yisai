/******************************************************************************
 ** Copyright:  Copyright 2001-2010 by Spreadtrum Communications,Inc.         *
 **             All Rights Reserved.                                          *
 **             This software is supplied under the terms of a license        *
 **             agreement or non-disclosure agreement with Spreadtrum.        *
 **             Passing on and copying of this document,and communication     *
 **             of its contents is not permitted without prior written        *
 **             authorization.                                                *
 **                                                                           *
 ** ===========================================================================
 **
 **     Generated by code_adapter.Wed Nov 28 11:21:45 2012
 **
 *******************************************************************************/


#ifndef GEN_GSMGPRS_H
#define GEN_GSMGPRS_H


#ifdef  __cplusplus
extern "C" {
#endif


#define XSCT_CADVANCED

XSYSTEMVARS_H


#define EGPRS_CLASS2 SDL_INTEGER_LIT(0)


#define EGPRS_CLASS1 SDL_INTEGER_LIT(1)


#define SAPI_0 SDL_INTEGER_LIT(0)


#define SAPI_1 SDL_INTEGER_LIT(1)


#define SAPI_3 SDL_INTEGER_LIT(3)


#define SAPI_5 SDL_INTEGER_LIT(5)


#define SAPI_7 SDL_INTEGER_LIT(7)


#define SAPI_9 SDL_INTEGER_LIT(9)


#define SAPI_11 SDL_INTEGER_LIT(11)


#define DYNAMIC_ALLOCATION SDL_INTEGER_LIT(0)


#define EXTENDED_DYNAMIC SDL_INTEGER_LIT(1)


#define SINGLE_BLOCK_ALLOCATION SDL_INTEGER_LIT(2)


#define SINGLE_BLOCK_WITHOUT_TBF SDL_INTEGER_LIT(3)


#define MULTI_BLOCK_ALLOCATION SDL_INTEGER_LIT(4)


#define TLLI_ALL1 SDL_INTEGER_LIT(4294967295)


#define QOS_RELIABILITY_CLASS_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_RELIABILITY_ACK_GTP_LLC SDL_INTEGER_LIT(1)


#define QOS_RELIABILITY_UNACK_GTP_ACK_LLC SDL_INTEGER_LIT(2)


#define QOS_RELIABILITY_UNACK_LLC_ACK_RLC SDL_INTEGER_LIT(3)


#define QOS_RELIABILITY_UNACK_RLC_PROTEST SDL_INTEGER_LIT(4)


#define QOS_RELIABILITY_UNACK_RLC_UNPROTEST SDL_INTEGER_LIT(5)


#define QOS_RELIABILITY_SIX SDL_INTEGER_LIT(6)


#define QOS_RELIABILITY_CLASS_RESERVED SDL_INTEGER_LIT(7)


#define QOS_PEAK_THROUGHPUT_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_PEAK_THROUGHPUT_RESERVED SDL_INTEGER_LIT(15)


#define QOS_MEAN_THROUGHPUT_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_MEAN_THROUGHPUT_RESERVED SDL_INTEGER_LIT(30)


#define QOS_MEAN_THROUGHPUT_BESTEFFORT SDL_INTEGER_LIT(31)


#define QOS_DELAY_CLASS_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_DELAY_CLASS_RESERVED SDL_INTEGER_LIT(7)


#define QOS_PRECEDENCE_CLASS_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_PRECEDENCE_CLASS_RESERVED SDL_INTEGER_LIT(7)


#define QOS_DELIVERY_OF_ERR_SDU_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_DELIVERY_OF_ERR_SDU_RESERVED SDL_INTEGER_LIT(7)


#define QOS_DELIVERY_ORDER_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_DELIVERY_ORDER_RESERVED SDL_INTEGER_LIT(3)


#define QOS_TRAFFIC_CLASS_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_TRAFFIC_CLASS_RESERVED SDL_INTEGER_LIT(7)


#define QOS_MAX_SDU_SIZE_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_MAX_SDU_SIZE_RESERVED SDL_INTEGER_LIT(255)


#define QOS_MAX_BIT_RATE_FOR_UPLINK_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_MAX_BIT_RATE_FOR_DOWNLINK_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_RESIDUAL_BER_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_RESIDUAL_BER_RESERVED SDL_INTEGER_LIT(15)


#define QOS_SDU_ERR_RATIO_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_SDU_ERR_RATIO_RESERVED SDL_INTEGER_LIT(15)


#define QOS_TRAFFIC_HANDLING_PRIO_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_TRANSFER_DELAY_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_TRANSFER_DELAY_RESERVED SDL_INTEGER_LIT(63)


#define QOS_GUARANTEED_BIT_RATE_FOR_UPLINK_SUBSCRIBED SDL_INTEGER_LIT(0)


#define QOS_GUARANTEED_BIT_RATE_FOR_DOWNLINK_SUBSCRIBED SDL_INTEGER_LIT(0)


#define DEFAULT_RELIABILITY_CLASS SDL_INTEGER_LIT(3)


#define DEFAULT_PEAK_THROUGHPUT SDL_INTEGER_LIT(9)


#define SUPPORT_SHORT_L2_HEADER SDL_False


#define MAX_L3_MESSAGE_SIZE SDL_INTEGER_LIT(251)


#define MAX_N201_U SDL_INTEGER_LIT(1520)


#define MIN_N201_U SDL_INTEGER_LIT(140)


#define MAX_N201_I SDL_INTEGER_LIT(1520)


#define MIN_N201_I SDL_INTEGER_LIT(140)


#define GMM_CIPHER_NONE SDL_INTEGER_LIT(0)


#define GMM_CIPHER_NEED SDL_INTEGER_LIT(1)


#define GMM_CIPHER_START SDL_INTEGER_LIT(2)


#define GMM_CIPHER_ENDED SDL_INTEGER_LIT(3)


#define DECODE_SUCCESS SDL_INTEGER_LIT(0)


#define INVALID_MESSAGE_TYPE SDL_INTEGER_LIT(1)


#define MESSAGE_TOO_SHORT SDL_INTEGER_LIT(2)


#define INVALID_TRANSACTION_IDENTIFIER SDL_INTEGER_LIT(3)


#define SKIP_INDICATOR_NOT_ZERO SDL_INTEGER_LIT(4)


#define IE_SEQUENCE_ERROR SDL_INTEGER_LIT(5)


#define DUPLICATED_IE SDL_INTEGER_LIT(6)


#define UNRECOGNISED_IE_COMP_REQ SDL_INTEGER_LIT(7)


#define UNRECOGNISED_IE SDL_INTEGER_LIT(8)


#define OPTIONAL_IE_CONTENT_ERROR SDL_INTEGER_LIT(9)


#define MANDATORY_IE_CONTENT_ERROR SDL_INTEGER_LIT(10)


#define MANDATORY_IE_MISSING SDL_INTEGER_LIT(11)


#define INVALID_PROTOCOL_DISCRIMINATOR SDL_INTEGER_LIT(12)


#define CONDITIONAL_IE_ERROR SDL_INTEGER_LIT(13)


#define INVALID_PARAMETER SDL_INTEGER_LIT(14)


#define INVALID_MANDATORY_IE SDL_INTEGER_LIT(15)


#define MESSAGE_LEN_ERROR SDL_INTEGER_LIT(16)


#define CAUSE_UNASSIGNED_NO SDL_INTEGER_LIT(1)


#define CAUSE_NO_ROUTE_TO_DEST SDL_INTEGER_LIT(3)


#define CAUSE_CHAN_UNACCEPTABLE SDL_INTEGER_LIT(6)


#define CAUSE_OPER_DETERM_BARRING SDL_INTEGER_LIT(8)


#define CAUSE_NORMAL_CLEARING SDL_INTEGER_LIT(16)


#define CAUSE_USER_BUSY SDL_INTEGER_LIT(17)


#define CAUSE_NO_USER_RESPONDING SDL_INTEGER_LIT(18)


#define CAUSE_ALERTING_NO_ANSWER SDL_INTEGER_LIT(19)


#define CAUSE_CALL_REJECTED SDL_INTEGER_LIT(21)


#define CAUSE_NUMBER_CHANGED SDL_INTEGER_LIT(22)


#define CAUSE_NONSEL_USER_CLRING SDL_INTEGER_LIT(26)


#define CAUSE_DEST_OUT_OF_ORDER SDL_INTEGER_LIT(27)


#define CAUSE_INVALID_NO_FORMAT SDL_INTEGER_LIT(28)


#define CAUSE_FACILITY_REJECTED SDL_INTEGER_LIT(29)


#define CAUSE_RSP_TO_STATUS_ENQ SDL_INTEGER_LIT(30)


#define CAUSE_NORMAL_UNSPECIFIED SDL_INTEGER_LIT(31)


#define CAUSE_NO_CIRC_CHAN_AV SDL_INTEGER_LIT(34)


#define CAUSE_NET_OUT_OF_ORDER SDL_INTEGER_LIT(38)


#define CAUSE_TEMP_FAILURE SDL_INTEGER_LIT(41)


#define CAUSE_SWITCH_CONGESTION SDL_INTEGER_LIT(42)


#define CAUSE_ACC_INFO_DISCARDED SDL_INTEGER_LIT(43)


#define CAUSE_REQ_CIRC_CHAN_UNAV SDL_INTEGER_LIT(44)


#define CAUSE_RESOURCES_UNAV SDL_INTEGER_LIT(47)


#define CAUSE_QOS_UNAV SDL_INTEGER_LIT(49)


#define CAUSE_REQ_FAC_NOT_SUBSCR SDL_INTEGER_LIT(50)


#define CAUSE_CUG_INCOMING_BARRED SDL_INTEGER_LIT(55)


#define CAUSE_BEAR_CAP_NOT_AUTH SDL_INTEGER_LIT(57)


#define CAUSE_BEAR_CAP_UNAV SDL_INTEGER_LIT(58)


#define CAUSE_SERV_OPT_UNAV SDL_INTEGER_LIT(63)


#define CAUSE_BEAR_SVC_NOT_IMPL SDL_INTEGER_LIT(65)


#define CAUSE_ACM_EQ_OR_GT_ACMMAX SDL_INTEGER_LIT(68)


#define CAUSE_REQ_FACIL_NOT_IMPL SDL_INTEGER_LIT(69)


#define CAUSE_ONLY_RESTRIC_DIG_AV SDL_INTEGER_LIT(70)


#define CAUSE_SVC_OPT_NOT_IMPL SDL_INTEGER_LIT(79)


#define CAUSE_INVALID_TI SDL_INTEGER_LIT(81)


#define CAUSE_USER_NOT_IN_CUG SDL_INTEGER_LIT(87)


#define CAUSE_INCOMPAT_DEST SDL_INTEGER_LIT(88)


#define CAUSE_INVALID_TRANSIT_NET SDL_INTEGER_LIT(91)


#define CAUSE_INVALID_MSG_SEMANTIC SDL_INTEGER_LIT(95)


#define CAUSE_MAND_IE_ERROR SDL_INTEGER_LIT(96)


#define CAUSE_MSG_NONEXISTENT SDL_INTEGER_LIT(97)


#define CAUSE_MSG_GEN_ERROR SDL_INTEGER_LIT(98)


#define CAUSE_IE_NONEXISTENT SDL_INTEGER_LIT(99)


#define CAUSE_INVALID_CONDITION_IE SDL_INTEGER_LIT(100)


#define CAUSE_MSG_INCOMPAT_STATE SDL_INTEGER_LIT(101)


#define CAUSE_RECOV_ON_TIMER_EXP SDL_INTEGER_LIT(102)


#define CAUSE_PROTOCOL_ERROR SDL_INTEGER_LIT(111)


#define CAUSE_INTERWORKING SDL_INTEGER_LIT(127)


#define CAUSE_AUTHENTICATION_REJ SDL_INTEGER_LIT(150)


#define CAUSE_EMERGENCY_CALL_ONLY SDL_INTEGER_LIT(151)


#define CAUSE_IMSI_DETACH SDL_INTEGER_LIT(152)


#define CAUSE_T3230_EXPIRY SDL_INTEGER_LIT(153)


#define CAUSE_RR_CONNECTION_ERROR SDL_INTEGER_LIT(154)


#define CAUSE_SMS_CANCEL_SUCCEEDED SDL_INTEGER_LIT(155)


#define CAUSE_SMS_CANCEL_FAILED  SDL_INTEGER_LIT(156)


#define CAUSE_UNALLOCATED_TMSI SDL_INTEGER_LIT(1)


#define CAUSE_IMSI_UNKNOWN_IN_HLR SDL_INTEGER_LIT(2)


#define CAUSE_ILLEGAL_MS SDL_INTEGER_LIT(3)


#define CAUSE_IMSI_UNKNOWN_IN_VLR SDL_INTEGER_LIT(4)


#define CAUSE_IMEI_NOT_ACCEPTED SDL_INTEGER_LIT(5)


#define CAUSE_ILLEGAL_ME SDL_INTEGER_LIT(6)


#define CAUSE_PLMN_NOT_ALLOWED SDL_INTEGER_LIT(11)


#define CAUSE_LA_NOT_ALLOWED SDL_INTEGER_LIT(12)


#define CAUSE_ROAMING_NOT_ALLOWED SDL_INTEGER_LIT(13)


#define CAUSE_PLMN_GPRS_NOT_ALLOW SDL_INTEGER_LIT(14)


#define CAUSE_LA_NO_SUITABLE_CELL SDL_INTEGER_LIT(15)


#define CAUSE_NETWORK_FAILURE SDL_INTEGER_LIT(17)


#define CAUSE_CONGESTION SDL_INTEGER_LIT(22)


#define CAUSE_SERV_OPT_NOT_SUPPORTED SDL_INTEGER_LIT(32)


#define CAUSE_SERV_OPT_NOT_SUBSCRIBED SDL_INTEGER_LIT(33)


#define CAUSE_SERV_OPT_TEMP_OUT_OF_ORDER SDL_INTEGER_LIT(34)


#define CAUSE_CALL_CANNOT_BE_IDENTIFIED SDL_INTEGER_LIT(38)


#define CAUSE_CALL_BARRED SDL_INTEGER_LIT(10)


#define CAUSE_RESERVED SDL_INTEGER_LIT(11)


#define CAUSE_MEMORY_EXCEEDED SDL_INTEGER_LIT(22)


#define CAUSE_UNIDENTIFIED_SUBSCRIBER SDL_INTEGER_LIT(28)


#define CAUSE_UNKNOWN_SUBSCRIBER SDL_INTEGER_LIT(30)


#define CAUSE_INVALID_SM_TRANSFER_REF SDL_INTEGER_LIT(81)


#define CAUSE_INVALID_IE_CONTENTS SDL_INTEGER_LIT(4096)


#define CAUSE_MM_AUTH_FAILURE SDL_INTEGER_LIT(9)


#define CAUSE_MM_CONNECTION_FAIL SDL_INTEGER_LIT(10)


#define CAUSE_MAX_NUM_CM_CONNS_EXCEEDED SDL_INTEGER_LIT(11)


#define CAUSE_INCOMPATIBLE_MM_STATE SDL_INTEGER_LIT(12)


#define RRC_MSG_NO_ERROR SDL_INTEGER_LIT(20)


#define RRC_INVALID_MSG_TYPE SDL_INTEGER_LIT(21)


#define RRC_MSG_TOO_SHORT SDL_INTEGER_LIT(22)


#define RRC_INVALID_TI SDL_INTEGER_LIT(23)


#define RRC_SKIP_INDICATOR_NOT_ZERO SDL_INTEGER_LIT(24)


#define RRC_IE_SEQUENCE_ERROR SDL_INTEGER_LIT(25)


#define RRC_DUPLICATED_IE SDL_INTEGER_LIT(26)


#define RRC_UNRECOGNISED_IE_COMP_REQ SDL_INTEGER_LIT(27)


#define RRC_UNRECOGNISED_IE SDL_INTEGER_LIT(28)


#define RRC_OPTIONAL_IE_CONTENT_ERROR SDL_INTEGER_LIT(29)


#define RRC_MANDATORY_IE_CONTENT_ERROR SDL_INTEGER_LIT(30)


#define RRC_MANDATORY_IE_MISSING SDL_INTEGER_LIT(31)


#define RRC_INVALID_PROTOCOL_DISCRIMINATOR SDL_INTEGER_LIT(32)


#define RRC_COND_IE_ERROR SDL_INTEGER_LIT(33)


#define RRC_NORMAL_EVENT SDL_INTEGER_LIT(0)


#define RRC_ABNORMAL_REL_UNSPECIFIED SDL_INTEGER_LIT(1)


#define RRC_ABNORMAL_REL_CHAN_UNACCEPT SDL_INTEGER_LIT(2)


#define RRC_ABNORMAL_REL_TIMER_EXPIRY SDL_INTEGER_LIT(3)


#define RRC_ABNORMAL_REL_NO_RF_ACTIVITY SDL_INTEGER_LIT(4)


#define RRC_PREEMPTIVE_RELEASE SDL_INTEGER_LIT(5)


#define RRC_TIMING_ADVANCE_OUT_OF_RANGE SDL_INTEGER_LIT(8)


#define RRC_CHAN_MODE_UNACCEPTABLE SDL_INTEGER_LIT(9)


#define RRC_FREQUENCEY_NOT_IMPLEMENTED SDL_INTEGER_LIT(10)


#define RRC_CALL_ALREADY_CLEARED SDL_INTEGER_LIT(65)


#define RRC_SEMANTICALLY_INCORRECT_MSG SDL_INTEGER_LIT(95)


#define RRC_MANDATORY_IE_ERROR SDL_INTEGER_LIT(96)


#define RRC_MSG_NOT_IMPLEMENTED SDL_INTEGER_LIT(97)


#define RRC_MSG_NOT_COMPAT_WITH_STATE SDL_INTEGER_LIT(98)


#define RRC_CONDITIONAL_IE_ERROR SDL_INTEGER_LIT(100)


#define RRC_NO_CA_AVAILABLE SDL_INTEGER_LIT(101)


#define RRC_PROTOCOL_ERROR_UNSPECIFIED SDL_INTEGER_LIT(111)


#define CAUSE_CC_NO_CAUSE SDL_INTEGER_LIT(13)


#define CAUSE_INSUFFICIENT_TASKS SDL_INTEGER_LIT(14)


#define CAUSE_CP_ACK_NOT_RECEIVED SDL_INTEGER_LIT(15)


#define CAUSE_CP_NO_ERROR SDL_INTEGER_LIT(16)


#define CAUSE_RP_TIMEOUT_ERROR SDL_INTEGER_LIT(17)


#define CAUSE_RP_NO_ERROR SDL_INTEGER_LIT(18)


#define CAUSE_NOT_APPLICABLE SDL_INTEGER_LIT(19)


#define ONE_PHASE_ACCESS SDL_INTEGER_LIT(0)


#define SHORT_ACCESS SDL_INTEGER_LIT(1)


#define TWO_PHASE_ACCESS SDL_INTEGER_LIT(2)


#define PAGE_RESPONSE SDL_INTEGER_LIT(3)


#define CELL_UPDATE SDL_INTEGER_LIT(4)


#define MM_PROCEDURE SDL_INTEGER_LIT(5)


#define SINGLE_BLOCK SDL_INTEGER_LIT(6)


#define CELL_UPDATE_WITH_NOTIFICATION SDL_INTEGER_LIT(7)


#define MM_PROC_ATT SDL_INTEGER_LIT(8)


#define MM_PROC_RAU SDL_INTEGER_LIT(9)


#define MM_PROC_OTHER SDL_INTEGER_LIT(10)


#define SIGNALLING SDL_INTEGER_LIT(11)


#define NOT_MM_CAUSE SDL_INTEGER_LIT(100)


#define LLC_DATA SDL_INTEGER_LIT(0)


#define LLC_UNITDATA SDL_INTEGER_LIT(1)


#define NOT_SACK_OR_ACK SDL_INTEGER_LIT(1)


#define SACK_OR_ACK SDL_INTEGER_LIT(0)


#define GPRS_MNO_NONE SDL_INTEGER_LIT(0)


#define GPRS_MNO_ONE SDL_INTEGER_LIT(1)


#define GPRS_MNO_TWO SDL_INTEGER_LIT(2)


#define GPRS_MNO_THREE SDL_INTEGER_LIT(3)


#define MM_PD SDL_INTEGER_LIT(5)


#define CC_PD SDL_INTEGER_LIT(3)


#define SS_PD SDL_INTEGER_LIT(11)


#define SMS_PD SDL_INTEGER_LIT(9)


#define RR_PD SDL_INTEGER_LIT(6)


#define SCT_PD SDL_INTEGER_LIT(15)


#define MAX_FPLMN_SIZE SDL_INTEGER_LIT(85)


#define MAX_PLMN_SIZE SDL_INTEGER_LIT(8)


#define LONG_PLMN_SIZE SDL_INTEGER_LIT(200)


#define LONG_FPLMN_SIZE SDL_INTEGER_LIT(16)


#define SELECT_PLMN_LIST_SIZE SDL_INTEGER_LIT(16)


#define LAC_LIST_SIZE SDL_INTEGER_LIT(8)


#define MAX_FLAI_SIZE SDL_INTEGER_LIT(10)


#define SMS_NORMAL_EVENT SDL_INTEGER_LIT(0)


#define SMS_ADDR_MAX_LEN SDL_INTEGER_LIT(12)


#define ARFCN_POWERLEVEL_LEN SDL_INTEGER_LIT(454)


#define NETWORK_NAME_ARR_LEN SDL_INTEGER_LIT(40)


#define DEFAULT_DCS_VALUE SDL_INTEGER_LIT(0)


#define UCS_DCS_VALUE SDL_INTEGER_LIT(1)


#define SS_LOW_LAYER_ERROR_NONE SDL_INTEGER_LIT(0)


#define SS_LOW_LAYER_ERROR_NO_ROUTER SDL_INTEGER_LIT(1)


#define SS_LOW_LAYER_ERROR_NO_CONN SDL_INTEGER_LIT(2)


#define SS_LOW_LAYER_ERROR_CONN_REL SDL_INTEGER_LIT(3)


#define SMS_SOR_NORMAL_EVENT SDL_INTEGER_LIT(0)


#define SMS_SOR_CP_ERROR SDL_INTEGER_LIT(1)


#define SMS_SOR_RP_ERROR SDL_INTEGER_LIT(2)


#define SMS_SOR_LOWLAYER_ERROR SDL_INTEGER_LIT(3)


#define SMS_SOR_CANCEL_BY_USER SDL_INTEGER_LIT(4)


#define SMS_SOR_TC1M_EXPIRED SDL_INTEGER_LIT(5)


#define SMS_SOR_TR1M_EXPIRED SDL_INTEGER_LIT(6)


#define SMS_SOR_TR2M_EXPIRED SDL_INTEGER_LIT(7)


#define z1CI_is_egprs_support SDL_INTEGER_LIT(0)


#define MAX_L2_MESSAGE_SIZE SDL_INTEGER_LIT(23)


#define MAX_BA_SIZE SDL_INTEGER_LIT(64)


#define CARD_NUM SDL_INTEGER_LIT(4)


#define MAX_BA_SIZE_THREE_CARD SDL_INTEGER_LIT(256)


#define MAX_CELL_DECODED_SIZE SDL_INTEGER_LIT(32)


#define SEARCH_DECODE_SIZE SDL_INTEGER_LIT(6)


#define MAX_ARFCN_SIZE SDL_INTEGER_LIT(971)


#define INVALID_LINK_TBF SDL_INTEGER_LIT(0)


#define DOWNLINK_TBF SDL_INTEGER_LIT(1)


#define UPLINK_TBF SDL_INTEGER_LIT(2)


#define BOTH_LINK_TBF SDL_INTEGER_LIT(3)


#define GPRS_TBF SDL_INTEGER_LIT(0)


#define EGPRS_TBF SDL_INTEGER_LIT(1)


#define ARQ1 SDL_INTEGER_LIT(0)


#define ARQ2 SDL_INTEGER_LIT(1)


#define MAC_INVALID_BEP_PERIOD2 SDL_INTEGER_LIT(255)


#define MAX_TX_SLOT_NUM SDL_INTEGER_LIT(8)


#define MAX_RX_SLOT_NUM SDL_INTEGER_LIT(8)


#define MAX_TX_DATA_NUM_CLASS12 SDL_INTEGER_LIT(4)


#define BLOCK_SIZE SDL_INTEGER_LIT(54)


#define EGPRS_LOOPBACK_ON SDL_INTEGER_LIT(14)


#define EGPRS_LOOPBACK_OFF SDL_INTEGER_LIT(15)


#define BCCH_HIGH_PRIORITY SDL_INTEGER_LIT(200)


#define FAST_PLMN_PRIORITY SDL_INTEGER_LIT(210)


#define BCCH_HIGHEST_PRIORITY_NORMAL SDL_INTEGER_LIT(255)


#define MAX_BSIC_PRIORITY SDL_INTEGER_LIT(255)


#define WILDCARD_TI SDL_INTEGER_LIT(128)


#define WILDCARD_PD SDL_INTEGER_LIT(128)


#define NUM_TYPE_UNKNOW SDL_INTEGER_LIT(0)


#define NUM_TYPE_INTERNATIONAL SDL_INTEGER_LIT(1)


#define NUM_TYPE_NATIONAL SDL_INTEGER_LIT(2)


#define NUM_TYPE_NETWORK SDL_INTEGER_LIT(3)


#define NUM_TYPE_DEDICATECODE_SHORTCODE SDL_INTEGER_LIT(4)


#define NUM_TYPE_ALPHANUMERIC SDL_INTEGER_LIT(5)


#define NUM_TYPE_ABBREVIATE SDL_INTEGER_LIT(6)


#define NUM_PLAN_UNKNOW SDL_INTEGER_LIT(0)


#define NUM_PLAN_ISDN_TELE SDL_INTEGER_LIT(1)


#define NUM_PLAN_DATA SDL_INTEGER_LIT(3)


#define NUM_PLAN_TELEX SDL_INTEGER_LIT(4)


#define NUM_PLAN_NATIONAL SDL_INTEGER_LIT(8)


#define NUM_PLAN_PRIVATE SDL_INTEGER_LIT(9)


#define NUM_PLAN_ERMES SDL_INTEGER_LIT(10)


#define SUBADDR_NSAP_TYPE SDL_INTEGER_LIT(0)


#define SUBADDR_USER_SPEC_TYPE SDL_INTEGER_LIT(2)


#define UTU_USER_SPEC SDL_INTEGER_LIT(0)


#define UTU_OSI_HIGH_L SDL_INTEGER_LIT(1)


#define UTU_X244 SDL_INTEGER_LIT(2)


#define UTU_IA5_CHAR SDL_INTEGER_LIT(4)


#define UTU_CALL_CONTROL_MSG SDL_INTEGER_LIT(8)


#define CC_NULL_STATE SDL_INTEGER_LIT(0)


#define MM_CONN_PENDING_STATE SDL_INTEGER_LIT(2)


#define CC_PROM_PRESENT_STATE SDL_INTEGER_LIT(34)


#define WAIT_FOR_NETWORK_INFO_STATE SDL_INTEGER_LIT(35)


#define CC_EST_PRESENT_STATE SDL_INTEGER_LIT(36)


#define CC_EST_CNF_STATE SDL_INTEGER_LIT(37)


#define RECALL_PRESENT_STATE SDL_INTEGER_LIT(38)


#define CALL_INITIATED_STATE SDL_INTEGER_LIT(1)


#define MO_CALL_PROCEEDING_STATE SDL_INTEGER_LIT(3)


#define CALL_DELIVERED_STATE SDL_INTEGER_LIT(4)


#define CALL_PRESENT_STATE SDL_INTEGER_LIT(6)


#define CALL_RECEIVED_STATE SDL_INTEGER_LIT(7)


#define CONN_REQ_STATE SDL_INTEGER_LIT(8)


#define MT_CALL_CNF_STATE SDL_INTEGER_LIT(9)


#define ACTIVE_STATE SDL_INTEGER_LIT(10)


#define DISC_REQ_STATE SDL_INTEGER_LIT(11)


#define DISC_IND_STATE SDL_INTEGER_LIT(12)


#define REL_REQ_STATE SDL_INTEGER_LIT(19)


#define MO_MODIFY_STATE SDL_INTEGER_LIT(26)


#define MT_MODIFY_STATE SDL_INTEGER_LIT(27)


#define CALL_REEST_STATE SDL_INTEGER_LIT(80)


#define LOCATION_USER SDL_INTEGER_LIT(0)


#define PRIV_SER_LOC SDL_INTEGER_LIT(1)


#define PUB_SER_LOC SDL_INTEGER_LIT(2)


#define PUB_SER_REMOTE SDL_INTEGER_LIT(4)


#define PRIV_SER_REMOTE SDL_INTEGER_LIT(5)


#define NET_BYN_INTER SDL_INTEGER_LIT(10)


#define PROG_NOT_END_TO_END SDL_INTEGER_LIT(1)


#define PROG_DEST_NO_PLMN SDL_INTEGER_LIT(2)


#define PROG_ORIG_NO_PLMN SDL_INTEGER_LIT(3)


#define PROG_RTN_PLMN SDL_INTEGER_LIT(4)


#define PROG_IN_BAND_INFO SDL_INTEGER_LIT(8)


#define PROG_END_TO_END SDL_INTEGER_LIT(32)


#define PROG_QUEUEING SDL_INTEGER_LIT(64)


#define SIGNAL_DIAL SDL_INTEGER_LIT(0)


#define SIGNAL_RING_BACK SDL_INTEGER_LIT(1)


#define SIGNAL_INTERCEPT SDL_INTEGER_LIT(2)


#define SIGNAL_CONGESTION SDL_INTEGER_LIT(3)


#define SIGNAL_BUSY SDL_INTEGER_LIT(4)


#define SIGNAL_CONFIRM SDL_INTEGER_LIT(5)


#define SIGNAL_ANSWER SDL_INTEGER_LIT(6)


#define SIGNAL_WAITING SDL_INTEGER_LIT(7)


#define SIGNAL_OFF_HOOK SDL_INTEGER_LIT(8)


#define SIGNAL_TONES_OFF SDL_INTEGER_LIT(63)


#define SIGNAL_ALERTING_OFF SDL_INTEGER_LIT(79)


#define ALERT_PATTERN1 SDL_INTEGER_LIT(0)


#define ALERT_PATTERN2 SDL_INTEGER_LIT(1)


#define ALERT_PATTERN3 SDL_INTEGER_LIT(2)


#define ALERT_PATTERN5 SDL_INTEGER_LIT(4)


#define ALERT_PATTERN6 SDL_INTEGER_LIT(5)


#define ALERT_PATTERN7 SDL_INTEGER_LIT(6)


#define ALERT_PATTERN8 SDL_INTEGER_LIT(7)


#define ALERT_PATTERN9 SDL_INTEGER_LIT(8)


#define LEVEL_RECEIVER_READY SDL_INTEGER_LIT(0)


#define LEVEL_RECEIVER_NOT_READY SDL_INTEGER_LIT(15)


#define ADDR_BCD_MAX_LEN SDL_INTEGER_LIT(20)


#define SUB_ADDR_MAX_LEN SDL_INTEGER_LIT(20)


#define CC_CAPABILITY_LEN SDL_INTEGER_LIT(2)


#define BEARER_CAPABILITY_LEN SDL_INTEGER_LIT(16)


#define BEARER_CAPABILITY_LINE_1 SDL_INTEGER_LIT(0)


#define BEARER_CAPABILITY_LINE_2 SDL_INTEGER_LIT(1)


#define BEARER_CAPABILITY_LINE_MAX SDL_INTEGER_LIT(2)


#define REPEAT_CIRCULAR_SUCC_SEL SDL_INTEGER_LIT(1)


#define REPEAT_SUPPORT_FALLBACK SDL_INTEGER_LIT(2)


#define REPEAT_RESERVED SDL_INTEGER_LIT(3)


#define REPEAT_SERVICE_CHAG_FALLBACK SDL_INTEGER_LIT(4)


#define LLC_MSG_LEN SDL_INTEGER_LIT(16)


#define HLC_MSG_LEN SDL_INTEGER_LIT(3)


#define SMALL_USER_INFO_MAX_LEN SDL_INTEGER_LIT(35)


#define USER_INFO_MAX_LEN SDL_INTEGER_LIT(35)


#define DIAG_INFO_MAX_LEN SDL_INTEGER_LIT(28)


#define BACKUP_BEARER_CAPABILITY_LEN SDL_INTEGER_LIT(15)


#define MAC_MAX_NR_OF_REJECT SDL_INTEGER_LIT(31)


#define MAC_NR_OF_RADIO_PRIORITY_VALUES SDL_INTEGER_LIT(4)


#define MAC_MAX_NBR_OF_PAGE_INFO SDL_INTEGER_LIT(4)


#define MAC_MAX_NR_OF_REF_FREQ_LIST SDL_INTEGER_LIT(5)


#define MAC_MAX_NR_OF_CELL_ALLOCATIONS SDL_INTEGER_LIT(64)


#define MAC_MAX_NR_OF_GPRS_MOBILE_ALLOCTIONS SDL_INTEGER_LIT(4)


#define MAC_MAX_NR_OF_PCCCH_DESCRIPTIONS SDL_INTEGER_LIT(4)


#define MAC_MAX_NR_OF_NC_LISTS SDL_INTEGER_LIT(32)


#define MAC_MAX_NR_OF_NC_2_LISTS SDL_INTEGER_LIT(32)


#define MAC_MAX_NR_OF_CH_LIST SDL_INTEGER_LIT(7)


#define MAC_PBCCH_DEFAULT_BCCH_CARRIER SDL_INTEGER_LIT(0)


#define MAC_PBCCH_ARFCN SDL_INTEGER_LIT(2)


#define MAC_PBCCH_MAIO SDL_INTEGER_LIT(3)


#define MAC_NR_OF_TIMESLOTS SDL_INTEGER_LIT(8)


#define MAC_MAX_PSI_MSG_ELEM_COUNT SDL_INTEGER_LIT(5)


#define MAC_MAX_UNKNOWN_PSI_MSG_ELEM_COUNT SDL_INTEGER_LIT(22)


#define MAC_MAX_NR_OF_ADD_FREQ SDL_INTEGER_LIT(32)


#define MAC_IMSI_LENGTH SDL_INTEGER_LIT(8)


#define MAC_IMEI_LENGTH SDL_INTEGER_LIT(8)


#define MAC_IMEISV_LENGTH SDL_INTEGER_LIT(9)


#define MAC_TMSI_LENGTH SDL_INTEGER_LIT(4)


#define MAC_MAX_NR_OF_RFL_NUMBER SDL_INTEGER_LIT(16)


#define MAC_MAX_NR_OF_ARFCN_INDEX SDL_INTEGER_LIT(64)


#define MAC_MAX_NR_OF_START_FREQ_LISTS SDL_INTEGER_LIT(4)


#define MAC_MAX_NR_OF_START_FREQ_SETS SDL_INTEGER_LIT(32)


#define MAC_MAX_NR_OF_EXT_FREQ_LIST SDL_INTEGER_LIT(32)


#define MAC_MAX_NR_OF_PCCCH_CARRIERS SDL_INTEGER_LIT(16)


#define MAC_MAX_MS_RA_CAPAB_COUNT SDL_INTEGER_LIT(2)


#define MAC_MAX_NR_OF_NC_MEASUREMENTS SDL_INTEGER_LIT(7)


#define MAC_MAX_NR_OF_EXT_MEASUREMENTS SDL_INTEGER_LIT(32)


#define MAC_MAX_ACCESS_TECH_TYPE_NUM SDL_INTEGER_LIT(7)


#define MAC_MAX_UNCOMPRESSED_BITMAP_BYTES_LEN SDL_INTEGER_LIT(20)


#define MAC_MAX_COMPRESSED_BITMAP_BYTES_LEN SDL_INTEGER_LIT(16)


#define PACKET_ACCESS_REJECT SDL_INTEGER_LIT(33)


#define PACKET_CELL_CHANGE_ORDER SDL_INTEGER_LIT(1)


#define PACKET_DOWNLINK_ASSIGNMENT SDL_INTEGER_LIT(2)


#define PACKET_MEAS_ORDER SDL_INTEGER_LIT(3)


#define PACKET_PAGING_REQUEST SDL_INTEGER_LIT(34)


#define PACKET_PDCH_RELEASE SDL_INTEGER_LIT(35)


#define PACKET_POLLING_REQUEST SDL_INTEGER_LIT(4)


#define PACKET_PWR_CTRL_AND_TIMING_ADVANCE SDL_INTEGER_LIT(5)


#define PACKET_PRACH_PARAMETERS SDL_INTEGER_LIT(36)


#define PACKET_QUEUEING_NOTIFICATION SDL_INTEGER_LIT(6)


#define PACKET_CELL_CHANGE_CONTINUE SDL_INTEGER_LIT(11)


#define PACKET_TIMESLOT_RECONFIGURE SDL_INTEGER_LIT(7)


#define PACKET_TBF_RELEASE SDL_INTEGER_LIT(8)


#define PACKET_UPLINK_ACK_NACK SDL_INTEGER_LIT(9)


#define PACKET_UPLINK_ASSIGNMENT SDL_INTEGER_LIT(10)


#define PACKET_DL_DUMMY_CTRL_BLOCK SDL_INTEGER_LIT(37)


#define PACKET_SYS_INFO_1 SDL_INTEGER_LIT(49)


#define PACKET_SYS_INFO_2 SDL_INTEGER_LIT(50)


#define PACKET_SYS_INFO_3 SDL_INTEGER_LIT(51)


#define PACKET_SYS_INFO_3_BIS SDL_INTEGER_LIT(52)


#define PACKET_SYS_INFO_4 SDL_INTEGER_LIT(53)


#define PACKET_SYS_INFO_5 SDL_INTEGER_LIT(54)


#define PACKET_SYS_INFO_6 SDL_INTEGER_LIT(48)


#define PACKET_SYS_INFO_7 SDL_INTEGER_LIT(56)


#define PACKET_SYS_INFO_8 SDL_INTEGER_LIT(57)


#define PACKET_SYS_INFO_13 SDL_INTEGER_LIT(55)


#define PACKET_SYS_INFO_14 SDL_INTEGER_LIT(58)


#define PACKET_CELL_CHANGE_FAILURE SDL_INTEGER_LIT(0)


#define PACKET_CTRL_ACK SDL_INTEGER_LIT(1)


#define PACKET_DOWNLINK_ACK_NACK SDL_INTEGER_LIT(2)


#define UPLINK_DUMMY_CTRL_BLOCK SDL_INTEGER_LIT(3)


#define PACKET_MEASUREMENT_REPORT SDL_INTEGER_LIT(4)


#define PACKET_RESOURCE_REQUEST SDL_INTEGER_LIT(5)


#define PACKET_CELL_CHANGE_NOTIFY SDL_INTEGER_LIT(12)


#define PACKET_MOBILE_TBF_STATUS SDL_INTEGER_LIT(6)


#define PACKET_PSI_STATUS SDL_INTEGER_LIT(7)


#define EGPRS_PACKET_DOWNLINK_ACK_NACK SDL_INTEGER_LIT(8)


#define ADDITIONAL_MS_RADIO_ACCESS_CAPAB SDL_INTEGER_LIT(11)


#define EGPRS_PACKET_CHANNEL_REQUEST SDL_INTEGER_LIT(14)


#define PACKET_CHANNEL_REQUEST SDL_INTEGER_LIT(15)


#define PACKET_CTRL_ACK_8 SDL_INTEGER_LIT(130)


#define PACKET_CTRL_ACK_11 SDL_INTEGER_LIT(131)


#define MAC_INVALID_MSG_TYPE SDL_INTEGER_LIT(255)


#define RR_PACKET_UPLINK_ASSIGNMENT SDL_INTEGER_LIT(136)


#define RR_PACKET_DOWNLINK_ASSIGNMENT SDL_INTEGER_LIT(137)


#define DECODE_OK SDL_INTEGER_LIT(100)


#define ERROR_ADDRESS_INFO_PART SDL_INTEGER_LIT(101)


#define ERROR_DISTRIBUTION_PART SDL_INTEGER_LIT(102)


#define ERROR_MESSAGE_ESCAPE SDL_INTEGER_LIT(103)


#define ERROR_NON_DISTRIBUTION_PART SDL_INTEGER_LIT(104)


#define ERROR_UNKNOWN_MSG_T SDL_INTEGER_LIT(105)


#define MS_ACCESS_TECH_TYPE_MAX_NUM SDL_INTEGER_LIT(8)


#define MAX_NSAPI_NUMBER SDL_INTEGER_LIT(11)


#define MAX_PDP_CONTEXT_STATUS_ID SDL_INTEGER_LIT(16)


#define z1IB_GMM_CAUSE_START SDL_INTEGER_LIT(256)


#define GMM_CAUSE_IMPLICITLY_DETACHED SDL_INTEGER_LIT(257)


#define GMM_DETACH_REQ_RECEIVED SDL_INTEGER_LIT(258)


#define RECEIVED_IMSII_PAGE SDL_INTEGER_LIT(259)


#define RECEIVED_NO_CELL SDL_INTEGER_LIT(260)


#define RECEIVED_NO_SIM SDL_INTEGER_LIT(261)


#define RECEIVED_LIMITED_CELL SDL_INTEGER_LIT(262)


#define GMM_REATTACH_REQ SDL_INTEGER_LIT(263)


#define APN_LENGTH SDL_INTEGER_LIT(100)


#define ALL_NSAPI SDL_INTEGER_LIT(0)


#define LLC_OR_SNDCP_FAILURE SDL_INTEGER_LIT(25)


#define INSUFFICIENT_RESOURCES SDL_INTEGER_LIT(26)


#define MISSING_OR_UNKNOWN_APN SDL_INTEGER_LIT(27)


#define UNKNOWN_PDP_ADDRESS_OR_TYPE SDL_INTEGER_LIT(28)


#define USER_AUTHENTICATION_FAILED SDL_INTEGER_LIT(29)


#define ACTIVATION_REJECTED_BY_GGSN SDL_INTEGER_LIT(30)


#define ACTIVATION_REJECTED_UNSPECIFIED SDL_INTEGER_LIT(31)


#define SERVICE_OPTION_NOT_SUPPORTED SDL_INTEGER_LIT(32)


#define REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED SDL_INTEGER_LIT(33)


#define SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER SDL_INTEGER_LIT(34)


#define NSAPI_ALREADY_USED SDL_INTEGER_LIT(35)


#define REGULAR_DEACTIVATION SDL_INTEGER_LIT(36)


#define QOS_NOT_ACCEPTED SDL_INTEGER_LIT(37)


#define NETWORK_FAILURE SDL_INTEGER_LIT(38)


#define REACTIVATION_REQUIRED SDL_INTEGER_LIT(39)


#define SEMANTIC_ERROR_IN_THE_TFT_OPERATION SDL_INTEGER_LIT(41)


#define SYNTACTICAL_ERROR_IN_THE_TFT_OPERATION SDL_INTEGER_LIT(42)


#define UNKNOWN_PDP_CONTEXT SDL_INTEGER_LIT(43)


#define PDP_CONTEXT_WITHOUT_TFT_ALREADY_ACTIVATE SDL_INTEGER_LIT(46)


#define SEMANTIC_ERRORS_IN_PACKET_FILTER SDL_INTEGER_LIT(44)


#define SYNTACTICAL_ERRORS_IN_PACKET_FILTER SDL_INTEGER_LIT(45)


#define INVALID_TRANSACTION_IDENTIFIER_VALUE SDL_INTEGER_LIT(81)


#define INVALID_MANDATORY_INFORMATION SDL_INTEGER_LIT(96)


#define MESSAGE_TYPE_NONEXISTENT_OR_NOT_IMPLEMENTED SDL_INTEGER_LIT(97)


#define MESSAGE_TYPE_NOT_COMPATIBLE_WITH_THE_PROTOCOL_STATE SDL_INTEGER_LIT(98)


#define GPRS_ATTACH SDL_INTEGER_LIT(1)


#define GPRS_ATTACH_WHILE_IMSI SDL_INTEGER_LIT(2)


#define GPRS_COMBINED_ATTACH SDL_INTEGER_LIT(3)


#define GPRS_ATT_RESULT_NONE SDL_INTEGER_LIT(1)


#define GPRS_ATT_RESULT_GPRS SDL_INTEGER_LIT(2)


#define GPRS_ATT_RESULT_COMBINED SDL_INTEGER_LIT(3)


#define GPRS_DETACH SDL_INTEGER_LIT(1)


#define GPRS_IMSI_DETACH SDL_INTEGER_LIT(2)


#define GPRS_COMBINED_DETACH SDL_INTEGER_LIT(3)


#define GPRS_DETACH_SWITCH_TO_CALI SDL_INTEGER_LIT(4)


#define GMM_MN_ATTACH_PARA_WRONG SDL_INTEGER_LIT(0)


#define GMM_MN_ATTACH_BOTH_SUCCESS SDL_INTEGER_LIT(1)


#define GMM_MN_ATTACH_GPRS_SUCCESS SDL_INTEGER_LIT(2)


#define GMM_MN_ATTACH_FAIL SDL_INTEGER_LIT(3)


#define GMM_MN_ATTACH_FAIL_WITH_GPRS_NOT_ALLOW SDL_INTEGER_LIT(4)


#define GMM_MN_ATTACH_FAIL_WITH_IMSI_ATTACH SDL_INTEGER_LIT(5)


#define GMM_MN_ATTACH_FAIL_WITH_ATTEMPT_MAX SDL_INTEGER_LIT(6)


#define GMM_MN_ATTACH_FAIL_WITH_ACCESS_BARRED SDL_INTEGER_LIT(7)


#define GMM_MN_ATTACH_FAIL_WITH_PLMN_NOT_ALLOW SDL_INTEGER_LIT(8)


#define GMM_MN_ATTACH_GSM_FAIL_WITH_ATTEMPT_MAX SDL_INTEGER_LIT(9)


#define GMM_MN_DETACH_PARA_WRONG SDL_INTEGER_LIT(0)


#define GMM_MN_DETACH_GPRS SDL_INTEGER_LIT(1)


#define GMM_MN_DETACH_GSM SDL_INTEGER_LIT(2)


#define GMM_MN_DETACH_BOTH SDL_INTEGER_LIT(3)


#define GMM_MN_DETACH_GPRS_WITH_IMSI_ATTACH SDL_INTEGER_LIT(4)


#define GMM_MN_DETACH_GPRS_WITH_GPRS_NOT_ALLOW SDL_INTEGER_LIT(5)


#define GMM_MN_DETACH_BOTH_FAIL_WITH_RAUEMPT_MAX SDL_INTEGER_LIT(6)


#define GMM_MN_DETACH_FAIL_WITH_GMM_WRONG SDL_INTEGER_LIT(7)


#define GMM_MN_DETACH_FAIL_WITH_PLMN_NOT_ALLOW SDL_INTEGER_LIT(8)


#define GMM_MN_DETACH_GSM_FAIL_WITH_ATTEMPT_MAX SDL_INTEGER_LIT(9)


#define APP_CAUSE_USER SDL_INTEGER_LIT(400)


#define CAUSE_ACCESS_NOT_ALLOW SDL_INTEGER_LIT(401)


#define GMM_MAX_CKSN SDL_INTEGER_LIT(7)


#define GMM_MIN_CKSN SDL_INTEGER_LIT(0)


#define PLMN_LIST_FORBIDDEN SDL_INTEGER_LIT(1)


#define LAI_LIST_FORBIDDEN SDL_INTEGER_LIT(2)


#define ROAM_LIST_FORBIDDEN SDL_INTEGER_LIT(3)


#define MOBILE_TYPE_NO SDL_INTEGER_LIT(0)


#define MOBILE_TYPE_IMSI SDL_INTEGER_LIT(1)


#define MOBILE_TYPE_IMEI SDL_INTEGER_LIT(2)


#define MOBILE_TYPE_IMEISV SDL_INTEGER_LIT(3)


#define MOBILE_TYPE_TMSI_PTMSI SDL_INTEGER_LIT(4)


#define MOBILE_TYPE_TMGI_MBMS SDL_INTEGER_LIT(5)


#define MAX_EMG_NUM_LIST_SIZE SDL_INTEGER_LIT(10)


#define CELL_NO SDL_INTEGER_LIT(1)


#define CELL_LIMITED_SERVICE SDL_INTEGER_LIT(2)


#define CELL_GPRS_DISABLE SDL_INTEGER_LIT(3)


#define GMM_NO_SIM SDL_INTEGER_LIT(4)


#define GMM_ATTACH_REQUEST SDL_INTEGER_LIT(1)


#define GMM_ATTACH_ACCEPT SDL_INTEGER_LIT(2)


#define GMM_ATTACH_COMPLETE SDL_INTEGER_LIT(3)


#define GMM_ATTACH_REJECT SDL_INTEGER_LIT(4)


#define GMM_DETACH_REQUEST SDL_INTEGER_LIT(5)


#define GMM_DETACH_ACCEPT SDL_INTEGER_LIT(6)


#define GMM_RAU_REQUEST SDL_INTEGER_LIT(8)


#define GMM_RAU_ACCEPT SDL_INTEGER_LIT(9)


#define GMM_RAU_COMPLETE SDL_INTEGER_LIT(10)


#define GMM_RAU_REJECT SDL_INTEGER_LIT(11)


#define GMM_PTMSI_ALLOC_COMMAND SDL_INTEGER_LIT(16)


#define GMM_PTMSI_ALLOC_COMPLETE SDL_INTEGER_LIT(17)


#define GMM_AUTH_CIPH_REQUEST SDL_INTEGER_LIT(18)


#define GMM_AUTH_CIPH_RESP SDL_INTEGER_LIT(19)


#define GMM_AUTH_CIPH_REJ SDL_INTEGER_LIT(20)


#define GMM_AUTH_CIPH_FAIL SDL_INTEGER_LIT(28)


#define GMM_IDENTITY_REQUEST SDL_INTEGER_LIT(21)


#define GMM_IDENTITY_RESP SDL_INTEGER_LIT(22)


#define GMM_STATUS SDL_INTEGER_LIT(32)


#define GMM_INFORMATION SDL_INTEGER_LIT(33)


#define GMM_CAUSE_NOT_INCLUDE SDL_INTEGER_LIT(1)


#define GMM_ILLEGAL_MS SDL_INTEGER_LIT(3)


#define GMM_ILLEGAL_ME SDL_INTEGER_LIT(6)


#define GMM_GPRS_NOT_ALLOWED SDL_INTEGER_LIT(7)


#define GMM_BOTH_NOT_ALLOW SDL_INTEGER_LIT(8)


#define GMM_CANNOT_DERIVED_MS_IDENTITY SDL_INTEGER_LIT(9)


#define GMM_IMPLICITLY_DETACHED SDL_INTEGER_LIT(10)


#define GMM_PLMN_NOT_ALLOW SDL_INTEGER_LIT(11)


#define GMM_LA_NOT_ALLOW SDL_INTEGER_LIT(12)


#define GMM_ROAM_NOT_ALLOW SDL_INTEGER_LIT(13)


#define GMM_PLMN_GPRS_NOT_ALLOW SDL_INTEGER_LIT(14)


#define GMM_LA_NO_SUITABLE_CELL SDL_INTEGER_LIT(15)


#define GMM_IMSI_UNKNOWN SDL_INTEGER_LIT(2)


#define GMM_MSC_UNREACHABLE SDL_INTEGER_LIT(16)


#define GMM_NETWORK_FAILURE SDL_INTEGER_LIT(17)


#define GMM_CONGESTION SDL_INTEGER_LIT(22)


#define GMM_RETRY_NEW_CELL SDL_INTEGER_LIT(48)


#define GMM_SEMANTICALLY_INCORECT_MSG SDL_INTEGER_LIT(95)


#define GMM_INVALID_MANDATORY_INFORM SDL_INTEGER_LIT(96)


#define GMM_MSG_NOT_EXISTENT SDL_INTEGER_LIT(97)


#define GMM_IE_NOT_EXISTENT SDL_INTEGER_LIT(99)


#define GMM_PERMENANT_NOT_ALLOWED SDL_INTEGER_LIT(104)


#define GMM_TEMPORARILY_NOT_ALLOWED SDL_INTEGER_LIT(105)


#define GMM_ACCESS_BARRED SDL_INTEGER_LIT(106)


#define GMM_SUSPENDED SDL_INTEGER_LIT(107)


#define GMM_DETACHING SDL_INTEGER_LIT(108)


#define GMM_RAU_PROCESSING SDL_INTEGER_LIT(109)


#define GMM_UNKNOWN_ERROR SDL_INTEGER_LIT(110)


#define GMM_PROTOCOL_ERROR SDL_INTEGER_LIT(111)


#define GMM_CAUSE_NOTDEFINE SDL_INTEGER_LIT(255)


#define GMM_MM_CAUSE_START SDL_INTEGER_LIT(256)


#define GMM_ATTEMPT_COUNTER_EQUAL_5 SDL_INTEGER_LIT(257)


#define GMM_ATTEMPT_COUNTER_SMALLER_5 SDL_INTEGER_LIT(258)


#define GMM_TIMER_EXPIRY SDL_INTEGER_LIT(259)


#define GMM_COMBINED_ATT_ABORT SDL_INTEGER_LIT(260)


#define GMM_FORCE_DETACHED SDL_INTEGER_LIT(261)


#define RAU_FAIL_T3330_TIME_OUT SDL_INTEGER_LIT(262)


#define RAU_FAIL_LOWER_LAYER_FAIL SDL_INTEGER_LIT(263)


#define RAU_FAIL_RETRY_NEW_CELL SDL_INTEGER_LIT(264)


#define RAU_FAIL_NOT_RETRY_NEW_CELL SDL_INTEGER_LIT(265)


#define RAU_FAIL_OTHER SDL_INTEGER_LIT(267)


#define GMM_ACCESS_CLASS_BARRED SDL_INTEGER_LIT(266)


#define GU1_UPDATED SDL_INTEGER_LIT(0)


#define GU2_NOT_UPDATED SDL_INTEGER_LIT(1)


#define GU3_ROAM_NOT_ALLOWED SDL_INTEGER_LIT(3)


#define GSGN_RE_ATTACH_REQUIRED SDL_INTEGER_LIT(1)


#define GSGN_RE_ATTACH_NOT_REQUIRED SDL_INTEGER_LIT(2)


#define GSGN_IMSI_DETACH SDL_INTEGER_LIT(3)


#define GMM_MS_INIT_GPRS_DETACH SDL_INTEGER_LIT(4)


#define GMM_MS_INIT_IMSI_DETACH SDL_INTEGER_LIT(5)


#define GMM_MS_INIT_COMB_DETACH SDL_INTEGER_LIT(6)


#define GMM_STANDBY SDL_INTEGER_LIT(2)


#define GMM_FORCE_STANDBY SDL_INTEGER_LIT(3)


#define GMM_READY SDL_INTEGER_LIT(4)


#define GMM_DETACHED SDL_INTEGER_LIT(5)


#define PAGE_GPRS_PTMSI SDL_INTEGER_LIT(1)


#define PAGE_GPRS_IMSI SDL_INTEGER_LIT(2)


#define PAGE_NON_GPRS SDL_INTEGER_LIT(3)


#define GMM_ATTACH_END SDL_INTEGER_LIT(1)


#define GMM_RAU_END SDL_INTEGER_LIT(2)


#define GMM_OTHER_END SDL_INTEGER_LIT(3)


#define GMM_ACCESS_REJ_T3142 SDL_INTEGER_LIT(1)


#define GMM_CAUSE_LLC_ERROR SDL_INTEGER_LIT(2)


#define RLC_TBF_FAILURE SDL_INTEGER_LIT(1)


#define TBF_FAIL_WITH_RLC_DEACTIVED SDL_INTEGER_LIT(2)


#define RLC_ACCESS_FORBID SDL_INTEGER_LIT(3)


#define TBF_FAIL_WITH_LOW_PRIORITY SDL_INTEGER_LIT(4)


#define TBF_FAIL_WITH_RLC_SUSPENDED SDL_INTEGER_LIT(5)


#define TBF_RLC_DISCARD_LLC_PDU SDL_INTEGER_LIT(6)


#define RLC_ACCESS_FORBID_T3142 SDL_INTEGER_LIT(7)


#define TX_MAX_SLOT_NUM SDL_INTEGER_LIT(8)


#define MAX_UPLINK_SLOT_NUM SDL_INTEGER_LIT(4)


#define RLC_MODE_ACK SDL_INTEGER_LIT(0)


#define RLC_MODE_UNACK SDL_INTEGER_LIT(1)


#define LLC_PDU_ACK SDL_INTEGER_LIT(0)


#define LLC_PDU_UNACK SDL_INTEGER_LIT(1)


#define CS1 SDL_INTEGER_LIT(0)


#define CS2 SDL_INTEGER_LIT(1)


#define CS3 SDL_INTEGER_LIT(2)


#define CS4 SDL_INTEGER_LIT(3)


#define BURST_8_BIT SDL_INTEGER_LIT(4)


#define BURST_11_BIT SDL_INTEGER_LIT(5)


#define BURST_8_BIT_ON_PCCCH SDL_INTEGER_LIT(6)


#define BURST_11_BIT_ON_PCCCH SDL_INTEGER_LIT(7)


#define CS1_ON_PCCCH SDL_INTEGER_LIT(8)


#define MCS1 SDL_INTEGER_LIT(9)


#define MCS2 SDL_INTEGER_LIT(10)


#define MCS3 SDL_INTEGER_LIT(11)


#define MCS4 SDL_INTEGER_LIT(12)


#define MCS5 SDL_INTEGER_LIT(13)


#define MCS6 SDL_INTEGER_LIT(14)


#define MCS7 SDL_INTEGER_LIT(15)


#define MCS8 SDL_INTEGER_LIT(16)


#define MCS9 SDL_INTEGER_LIT(17)


#define MCS5_7 SDL_INTEGER_LIT(18)


#define MCS6_9 SDL_INTEGER_LIT(19)


#define MCSERROR SDL_INTEGER_LIT(20)


#define CS1_NUMBER SDL_INTEGER_LIT(20)


#define CS2_NUMBER SDL_INTEGER_LIT(30)


#define CS3_NUMBER SDL_INTEGER_LIT(36)


#define CS4_NUMBER SDL_INTEGER_LIT(50)


#define UL_ONE_PHASE_EST_OK SDL_INTEGER_LIT(0)


#define UL_TWO_PHASE_ACCESS_OK SDL_INTEGER_LIT(1)


#define UL_TWO_PHASE_EST_OK SDL_INTEGER_LIT(2)


#define UL_EST_FAIL_DOWNLINK SDL_INTEGER_LIT(3)


#define UL_ACCESS_REJ_T3142 SDL_INTEGER_LIT(4)


#define UL_ACCESS_REJ_T3172 SDL_INTEGER_LIT(5)


#define UL_ACCESS_FAIL_WITH_NULL SDL_INTEGER_LIT(6)


#define UL_ACCESS_FAIL_WITH_CS SDL_INTEGER_LIT(7)


#define UL_ACCESS_FAIL_WITH_SYS_INFO SDL_INTEGER_LIT(8)


#define UL_ACCESS_FORBID SDL_INTEGER_LIT(9)


#define DL_ACCESS_FAIL_WITH_SYS_INFO SDL_INTEGER_LIT(10)


#define SINGLE_BLOCK_EST_OK SDL_INTEGER_LIT(11)


#define UL_ACCESS_MAC_ASK_MORE SDL_INTEGER_LIT(12)


#define UL_ACCESS_REJ_T3172_TWO_PHASE SDL_INTEGER_LIT(13)


#define UL_ACCESS_REJ_T3146 SDL_INTEGER_LIT(14)


#define NOT_TLLI SDL_INTEGER_LIT(0)


#define HAVE_TLLI SDL_INTEGER_LIT(4)


#define CONTENTION_SUCCESS SDL_INTEGER_LIT(0)


#define CONTENTION_FAIL SDL_INTEGER_LIT(1)


#define CONTENTION_FAIL_WITH_RETRY SDL_INTEGER_LIT(2)


#define CONTENTION_FAIL_DL_EST SDL_INTEGER_LIT(3)


#define CONTENTION_FAIL_WITH_CS SDL_INTEGER_LIT(4)


#define NORMAL_REL SDL_INTEGER_LIT(0)


#define z1OM_NORMAL_REL_T3182_UNACK SDL_INTEGER_LIT(1)


#define z1ON_ABNORMAL_REL SDL_INTEGER_LIT(2)


#define z1OO_NET_REL_NORMAL SDL_INTEGER_LIT(3)


#define z1OP_REL_TBF_WITH_RETRY SDL_INTEGER_LIT(5)


#define z1OQ_REL_TBF_WITHOUT_RETRY SDL_INTEGER_LIT(6)


#define z1OR_REL_TBF_WITH_SYS_INFO SDL_INTEGER_LIT(7)


#define z1OS_REL_TBF_RESOURCE_REJECT SDL_INTEGER_LIT(8)


#define z1OT_REL_TBF_CELL_RESELECTION SDL_INTEGER_LIT(9)


#define z1OU_REL_TBF_WITH_SINGLE_BLOCK SDL_INTEGER_LIT(10)


#define z1OV_RELEASE_TBF_FOR_GSM SDL_INTEGER_LIT(11)


#define z1OW_NORMAL_REL_WITH_NEW SDL_INTEGER_LIT(12)


#define NO_DOWNLINK SDL_INTEGER_LIT(0)


#define HAVE_DOWNLINK SDL_INTEGER_LIT(1)


#define ADD_NORMAL_PDU SDL_INTEGER_LIT(0)


#define ADD_SPARE_PDU SDL_INTEGER_LIT(1)


#define ADD_HIGHER_PRIORITY_PDU SDL_INTEGER_LIT(2)


#define ADD_LOWER_PRIORITY_PDU SDL_INTEGER_LIT(3)


#define ADD_PDU_ERROR SDL_INTEGER_LIT(4)


#define RELEASE_TBF_WITHOUT_EST SDL_INTEGER_LIT(0)


#define EST_WITH_NETWORK_ALLOW SDL_INTEGER_LIT(1)


#define EST_WITH_NETWORK_REJECT SDL_INTEGER_LIT(2)


#define LLC_PRIORITY_DIFF SDL_INTEGER_LIT(1)


#define MAC_FIXED_OPEN_REQ SDL_INTEGER_LIT(2)


#define TIMER_SECOND_DURATION SDL_INTEGER_LIT(1000000000)


#define BLOCK_PERIOD_DURATION SDL_INTEGER_LIT(18460000)


#define OPEN_ENDED SDL_INTEGER_LIT(0)


#define CLOSE_ENDED SDL_INTEGER_LIT(1)


#define INVALID_ENDED SDL_INTEGER_LIT(255)


#define RLC_RELEASE_NORMAL SDL_INTEGER_LIT(1)


#define RLC_RELEASE_WITH_PREV_DATA SDL_INTEGER_LIT(2)


#define RLC_RELEASE_DESTRUCTIVE SDL_INTEGER_LIT(3)


#define CELL_SUS_NO_UPLINK_TBF SDL_INTEGER_LIT(1)


#define CELL_SUS_ACCESS SDL_INTEGER_LIT(2)


#define CELL_SUS_WAIT_ACCESS SDL_INTEGER_LIT(3)


#define CELL_SUS_TRANSFER SDL_INTEGER_LIT(4)


#define CELL_SUS_CONTENTION SDL_INTEGER_LIT(5)


#define CELL_SUS_WAITING_RELEASE SDL_INTEGER_LIT(6)


#define UPLINK_RECEIVE_FAI_NULL SDL_INTEGER_LIT(0)


#define RELEASE_THEN_EST_NEW SDL_INTEGER_LIT(1)


#define RELEASE_THEN_TO_IDLE SDL_INTEGER_LIT(2)


#define RLC_TBF_FOR_ATT_OR_RAU SDL_INTEGER_LIT(1)


#define RLC_TBF_FOR_GMM_PROC_OTHER SDL_INTEGER_LIT(2)


#define RLC_TBF_FOR_MEAS_REPORT SDL_INTEGER_LIT(3)


#define RLC_TBF_FOR_OTHER_CAUSE SDL_INTEGER_LIT(4)


#define z1PU_RETRY_MAX SDL_INTEGER_LIT(3)


#define T3164_VAL SDL_DURATION_LIT(5.0, 5, 0)


#define T3186_VAL SDL_DURATION_LIT(5.0, 5, 0)


#define T3162_VAL SDL_DURATION_LIT(5.0, 5, 0)


#define T3190_VAL SDL_DURATION_LIT(5.0, 5, 0)


#define T3176_VAL SDL_DURATION_LIT(5.0, 5, 0)


#define DL_IDLE SDL_INTEGER_LIT(0)


#define DL_START SDL_INTEGER_LIT(1)


#define DL_ACTIVE SDL_INTEGER_LIT(2)


#define DL_RELEASE SDL_INTEGER_LIT(3)


#define UL_IDLE SDL_INTEGER_LIT(0)


#define UL_ONE_PHASE_ACCESS SDL_INTEGER_LIT(1)


#define UL_TWO_PHASE_ACCESS SDL_INTEGER_LIT(2)


#define UL_ACTIVE SDL_INTEGER_LIT(3)


#define UL_RELEASE SDL_INTEGER_LIT(4)


#define ONE_PHASE_WAITING_UL_ASSI SDL_INTEGER_LIT(0)


#define ONE_PHASE_START_TO_CONTENTION SDL_INTEGER_LIT(1)


#define ONE_PHASE_CONTENTION_RESOLUTION_ACTIVE SDL_INTEGER_LIT(2)


#define ONE_PHASE_START_TO_TWO_PHASE SDL_INTEGER_LIT(3)


#define ONE_PHASE_QUEUE_WAITING_UL_ASSI SDL_INTEGER_LIT(4)


#define ONE_PHASE_ACCESS_REJECT SDL_INTEGER_LIT(5)


#define ONE_PHASE_SINGLE_BLOCK_WITHOUT_TBF SDL_INTEGER_LIT(6)


#define TWO_PHASE_WAITING_UL_ASSI SDL_INTEGER_LIT(0)


#define TWO_PHASE_WAITING_UL_TBF_START SDL_INTEGER_LIT(1)


#define TRANSFER_UL_ACTIVE SDL_INTEGER_LIT(0)


#define TRANSFER_NET_REJECT SDL_INTEGER_LIT(1)


#define UL_ABNORMAL_RELEASE_WITH_RETRY SDL_INTEGER_LIT(0)


#define UL_RELEASE_PENDING SDL_INTEGER_LIT(1)


#define POLL_PRI_DATA SDL_INTEGER_LIT(0)


#define POLL_PRI_CTRL_NO_OPT SDL_INTEGER_LIT(1)


#define POLL_PRI_CTRL_WITH_OPT SDL_INTEGER_LIT(2)


#define POLL_PRI_BY_REQUEST SDL_INTEGER_LIT(3)


#define POLL_PRI_DATA_NEW_REQ SDL_INTEGER_LIT(4)


#define POLL_PRI_DATA_FAI SDL_INTEGER_LIT(5)


#define INVALID_N3104 SDL_INTEGER_LIT(65535)


#define UL_REL_REQ SDL_INTEGER_LIT(0)


#define TBF_EST_SEND_RESOURCE SDL_INTEGER_LIT(1)


#define TBF_EST_SEND_CONTROL_ACK SDL_INTEGER_LIT(2)


#define MAX_CTRQ_SIZE SDL_INTEGER_LIT(8)


#define MAX_POLLED_SIZE SDL_INTEGER_LIT(14)


#define CONTROL_BLOCK_SIZE SDL_INTEGER_LIT(23)


#define MAC_MAX_RER_REF_NUM SDL_INTEGER_LIT(4)


#define MAC_DATA_BLOCK_TYPE SDL_INTEGER_LIT(0)


#define MAC_CTRL_BLOCK_WITHOUT_OPT SDL_INTEGER_LIT(1)


#define MAC_CTRL_BLOCK_WITH_OPT SDL_INTEGER_LIT(2)


#define MAC_CTRL_BLOCK_WITH_PR SDL_INTEGER_LIT(3)


#define AUTH_PARA_RAND_LENGTH SDL_INTEGER_LIT(16)


#define SCT_MIN_PDU_LENGTH SDL_INTEGER_LIT(140)


#define SCT_DEFAULT_PEAK_THROUGHPUT SDL_INTEGER_LIT(4)


#define SCT_DEFAULT_RADIO_PRIORITY SDL_INTEGER_LIT(1)


#define SCT_GPRS_BEGIN SDL_INTEGER_LIT(0)


#define SCT_GPRS_END SDL_INTEGER_LIT(1)


#define SCT_PSEUDORANDOM SDL_INTEGER_LIT(0)


#define SCT_LOOPEDBACK SDL_INTEGER_LIT(1)


#define SCT_GMSK_8PSK SDL_INTEGER_LIT(0)


#define SCT_GMSK SDL_INTEGER_LIT(1)


#define SCT_GPRS_TEST SDL_INTEGER_LIT(0)


#define SCT_EGPRS_LOOPBACK_TEST SDL_INTEGER_LIT(1)


#define SCT_LOOP_BACK SDL_INTEGER_LIT(0)


#define SCT_DAI_TEST SDL_INTEGER_LIT(1)


#define INVALID_TYPE SDL_INTEGER_LIT(2)


#define z1RJ_MAX_SWEEP_ITEMS SDL_INTEGER_LIT(32)


#define z1RK_MAX_FRAMES_PER_CYCLE SDL_INTEGER_LIT(52)


#define z1RL_MAX_CYCLE_NUM SDL_INTEGER_LIT(13)


#define z1RM_MAX_BROADCAST_FRAME_NUM SDL_INTEGER_LIT(676)


#define z1RN_BCCH_REPORT_IN_IDLE_DUR SDL_DURATION_LIT(30.0, 30, 0)


#define z1RO_BCCH_REPORT_IN_NULL_DUR SDL_DURATION_LIT(60.0, 60, 0)


#define z1RP_SCELL_MEAS_IDLE_DUR SDL_DURATION_LIT(8.00, 8, 0)


#define z1RQ_NCELL_MEAS_IDLE_DUR SDL_DURATION_LIT(3.00, 3, 0)


#define z1RR_MEAS_TRANSFER_DUR SDL_DURATION_LIT(5.00, 5, 0)


#define z1RS_RA_INTERVAL_DUR SDL_DURATION_LIT(0.70, 0, 700000000)


#define z1RT_L2_DATA_SEND_DUR SDL_DURATION_LIT(0.1, 0, 100000000)


#define z1RU_INDEX_BIT_SI1 SDL_INTEGER_LIT(1)


#define z1RV_INDEX_BIT_SI2 SDL_INTEGER_LIT(2)


#define z1RW_INDEX_BIT_SI2BIS SDL_INTEGER_LIT(4)


#define z1RX_INDEX_BIT_SI2TER SDL_INTEGER_LIT(8)


#define z1RY_INDEX_BIT_SI3 SDL_INTEGER_LIT(16)


#define z1RZ_INDEX_BIT_SI4 SDL_INTEGER_LIT(32)


#define z1S0_INDEX_BIT_SI5 SDL_INTEGER_LIT(64)


#define z1S1_INDEX_BIT_SI5BIS SDL_INTEGER_LIT(128)


#define z1S2_INDEX_BIT_SI5TER SDL_INTEGER_LIT(256)


#define z1S3_INDEX_BIT_SI6 SDL_INTEGER_LIT(512)


#define z1S4_INDEX_BIT_SI7 SDL_INTEGER_LIT(1024)


#define z1S5_INDEX_BIT_SI8 SDL_INTEGER_LIT(2048)


#define z1S6_INDEX_BIT_SI9 SDL_INTEGER_LIT(4096)


#define z1S7_INDEX_BIT_SI13 SDL_INTEGER_LIT(8192)


#define z1S8_INDEX_BIT_SI16 SDL_INTEGER_LIT(16384)


#define z1S9_INDEX_BIT_SI17 SDL_INTEGER_LIT(32768)


#define z1SA_INDEX_BIT_SI18 SDL_INTEGER_LIT(65536)


#define z1SB_INDEX_BIT_SI19 SDL_INTEGER_LIT(131072)


#define z1SC_INDEX_BIT_SI20 SDL_INTEGER_LIT(262144)


#define z1SD_INDEX_BIT_PSI1 SDL_INTEGER_LIT(524288)


#define z1SE_INDEX_BIT_PSI2 SDL_INTEGER_LIT(1048576)


#define z1SF_INDEX_BIT_PSI3 SDL_INTEGER_LIT(2097152)


#define z1SG_INDEX_BIT_PSI3BIS SDL_INTEGER_LIT(4194304)


#define z1SH_INDEX_BIT_PSI4 SDL_INTEGER_LIT(8388608)


#define z1SI_INDEX_BIT_PSI5 SDL_INTEGER_LIT(16777216)


#define z1SJ_INDEX_BIT_PSI6 SDL_INTEGER_LIT(33554432)


#define z1SK_INDEX_BIT_PSI7 SDL_INTEGER_LIT(67108864)


#define z1SL_INDEX_BIT_PSI8 SDL_INTEGER_LIT(134217728)


#define z1SM_INDEX_BIT_PSI13 SDL_INTEGER_LIT(268435456)


#define z1SN_INDEX_BIT_PSI14 SDL_INTEGER_LIT(536870912)


typedef z_ctypes_6_ShortInt *SHORTINT_PTR_T;


typedef SDL_Octet MAC_MSG_BLOCK_ARR_T[SDL_INTEGER_LIT(23)];


typedef z_ctypes_6_ShortInt  RELIABILITY_CLASS_T;


typedef z_ctypes_6_ShortInt  PEAK_THROUGHPUT_CLASS_T;


typedef z_ctypes_6_ShortInt  MEAN_THROUGHPUT_CLASS_T;


typedef z_ctypes_6_ShortInt  DELAY_CLASS_T;


typedef z_ctypes_6_ShortInt  PRECEDENCE_CLASS_T;


typedef z_ctypes_6_ShortInt  DELIVERY_OF_ERR_SDU_T;


typedef z_ctypes_6_ShortInt  DELIVERY_ORDER_T;


typedef z_ctypes_6_ShortInt  TRAFFIC_CLASS_T;


typedef z_ctypes_6_ShortInt  MAX_SDU_SIZE_T;


typedef z_ctypes_6_ShortInt  MAX_BIT_RATE_FOR_UPLINK_T;


typedef z_ctypes_6_ShortInt  MAX_BIT_RATE_FOR_DOWNLINK_T;


typedef z_ctypes_6_ShortInt  RESIDUAL_BER_T;


typedef z_ctypes_6_ShortInt  SDU_ERR_RATIO_T;


typedef z_ctypes_6_ShortInt  TRAFFIC_HANDLING_PRIO_T;


typedef z_ctypes_6_ShortInt  TRAFFIC_HANDING_PRIO_T;


typedef z_ctypes_6_ShortInt  GUARANTEED_BIT_RATE_FOR_UPLINK_T;


typedef z_ctypes_6_ShortInt  GUARANTEED_BIT_RATE_FOR_DOWNLINK_T;


typedef struct TOTAL_QOS_T_s {
    RELIABILITY_CLASS_T  reliability;
    PEAK_THROUGHPUT_CLASS_T  peak_thrput;
    DELAY_CLASS_T  delay_class;
    PRECEDENCE_CLASS_T  precedence;
    MEAN_THROUGHPUT_CLASS_T  mean_thrput;
    SDL_Boolean  is_r99;
    DELIVERY_OF_ERR_SDU_T  delivery_of_err_sdu;
    DELIVERY_ORDER_T  delivery_order;
    TRAFFIC_CLASS_T  traffic_class;
    MAX_SDU_SIZE_T  max_sdu_size;
    MAX_BIT_RATE_FOR_UPLINK_T  max_bit_rate_for_uplink;
    MAX_BIT_RATE_FOR_DOWNLINK_T  max_bit_rate_for_downlink;
    RESIDUAL_BER_T  residual_ber;
    SDU_ERR_RATIO_T  sdu_err_ratio;
    TRAFFIC_HANDLING_PRIO_T  traffic_handling_prio;
    TRAFFIC_HANDING_PRIO_T  transfer_delay;
    GUARANTEED_BIT_RATE_FOR_UPLINK_T  guaranteed_bit_rate_for_uplink;
    GUARANTEED_BIT_RATE_FOR_DOWNLINK_T  guaranteed_bit_rate_for_downlink;
} TOTAL_QOS_T;


typedef struct QOS_PARAM_T_s {
    RELIABILITY_CLASS_T  reliability;
    PEAK_THROUGHPUT_CLASS_T  peak_throughput;
} QOS_PARAM_T;


typedef SDL_Integer  L3_SIZE_T;


typedef SDL_Octet L3_MESSAGE_ARR_T[MAX_L3_MESSAGE_SIZE];


typedef L3_MESSAGE_ARR_T *L3_INFO_PTR_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE ATC_PC_TYPE_E;
#define ATC_PC_OFF 0
#define ATC_PC_ON 1
#define ATC_PC_RFC1144 2
#define ATC_PC_RFC2507 3


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE ATC_DC_TYPE_E;
#define ATC_DC_OFF 0
#define ATC_DC_ON 1
#define ATC_DC_V42BIS 2


typedef struct COMPRESS_INFO_T_s {
    ATC_PC_TYPE_E  h_comp;
    ATC_DC_TYPE_E  d_comp;
} COMPRESS_INFO_T;


typedef z_ctypes_A_UnsignedLongInt  XID_BLOCK_SIZE_T;


typedef z_ctypes_6_ShortInt  N201_U_T;


typedef z_ctypes_6_ShortInt  N201_I_T;


typedef z_ctypes_A_UnsignedLongInt  PDU_SIZE_T;


typedef z_ctypes_6_ShortInt  NSAPI_NUM_T;


typedef z_ctypes_6_ShortInt  CIPHER_T;


typedef z_ctypes_6_ShortInt  RSSI_T;


typedef z_ctypes_A_UnsignedLongInt  CELL_ID_T;


typedef struct MSG_HEADER_T_s {
    SDL_Octet  pd;
    SDL_Octet  ti_si;
    z_ctypes_8_UnsignedShortInt  msg_type;
} MSG_HEADER_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SYNC_CAUSE_E;
#define CIPHERING 0
#define RESOURCE_ASSIGNMENT 1
#define CHANNEL_MODE_MODIFICATION 2
#define NO_CIPHERING 3


typedef z_ctypes_8_UnsignedShortInt  GSM_CAUSE_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE GSM_EST_TYPE_E;
#define MM_LOCATION_UPDATE 0
#define MM_IMSI_DETACH 1
#define CC_NORMAL_CALL 2
#define CC_EMERGENCY_CALL 3
#define CC_REESTABLISHMENT 4
#define SS_SERVICE 5
#define SMS_SERVICE 6
#define RESPONSE_PAGING 7
#define ONE_PHASE_PACKET_ACCESS 8
#define SINGLE_BLOCK_PACKET_ACCESS 9


typedef z_ctypes_6_ShortInt  RACH_ACCESS_T;


typedef z_ctypes_6_ShortInt  FRAME_SIZE_T;


typedef z_ctypes_6_ShortInt  LLC_DATA_TYPE_T;


typedef struct LLC_TRANS_Q_NODE_T_s *LLC_TRANS_Q_PTR_T;


typedef struct LLC_FRAME_T_s *LLC_FRAME_PTR_T;


typedef z_ctypes_6_ShortInt  NETWORK_MODE_E;


typedef z_ctypes_8_UnsignedShortInt  MNC_T;


typedef z_ctypes_8_UnsignedShortInt  MCC_T;


typedef struct PLMN_T_s {
    MCC_T  mcc;
    MNC_T  mnc;
    z_ctypes_6_ShortInt  mnc_digit_num;
} PLMN_T;


typedef z_ctypes_8_UnsignedShortInt  LAC_T;


typedef SDL_Octet  RAC_T;


typedef struct LAI_T_s {
    MCC_T  mcc;
    MNC_T  mnc;
    z_ctypes_6_ShortInt  mnc_digit_num;
    LAC_T  lac;
} LAI_T;


typedef struct CGI_T_s {
    MCC_T  mcc;
    MNC_T  mnc;
    z_ctypes_6_ShortInt  mnc_digit_num;
    LAC_T  lac;
    RAC_T  rac;
    CELL_ID_T  cell_id;
} CGI_T;


typedef struct RAI_T_s {
    MCC_T  mcc;
    MNC_T  mnc;
    z_ctypes_6_ShortInt  mnc_digit_num;
    LAC_T  lac;
    RAC_T  rac;
} RAI_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE REEST_ALLOWED_OR_NOT_E;
#define REEST_NOT_ALLOWED 0
#define REEST_ALLOWED 1


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CALL_PRIOR_E;
#define CALL_NO_PRIOR 0
#define CALL_PRIOR_LEVER4 1
#define CALL_PRIOR_LEVER3 2
#define CALL_PRIOR_LEVER2 3
#define CALL_PRIOR_LEVER1 4
#define CALL_PRIOR_LEVER0 5
#define CALL_PRIOR_LEVERB 6
#define CALL_PRIOR_LEVERA 7


typedef SDL_Octet FOUR_OCTET_ARR_T[SDL_INTEGER_LIT(4)];


typedef struct TMSI_T_s {
    SDL_Boolean  valid_flag;
    FOUR_OCTET_ARR_T  tmsi_value;
} TMSI_T;


typedef struct P_TMSI_T_s {
    SDL_Boolean  valid_flag;
    FOUR_OCTET_ARR_T  value;
} P_TMSI_T;


typedef SDL_Octet EIGHT_OCTET_ARR_T[SDL_INTEGER_LIT(8)];


typedef SDL_Octet NINE_OCTET_ARR_T[SDL_INTEGER_LIT(9)];


typedef struct IMSI_T_s {
    SDL_Boolean  valid_flag;
    SDL_Octet  length;
    EIGHT_OCTET_ARR_T  imsi_value;
} IMSI_T;


typedef struct IMEI_T_s {
    EIGHT_OCTET_ARR_T  imei_value;
} IMEI_T;


typedef struct IMEISV_T_s {
    NINE_OCTET_ARR_T  imeisv_value;
} IMEISV_T;


typedef struct FPLMN_SIM_T_s {
    SDL_Boolean  present;
    PLMN_T  fplmn;
} FPLMN_SIM_T;


typedef FPLMN_SIM_T FPLMN_ARR_T[MAX_FPLMN_SIZE];


typedef PLMN_T PLMN_ARR_T[MAX_PLMN_SIZE];


typedef struct PLMN_LIST_T_s {
    SDL_Octet  length;
    PLMN_ARR_T  plmn_arr;
} PLMN_LIST_T;


typedef PLMN_T PLMN_LONG_ARR_T[LONG_PLMN_SIZE];


typedef struct PLMN_LONG_LIST_T_s {
    SDL_Octet  length;
    PLMN_LONG_ARR_T  plmn_arr;
} PLMN_LONG_LIST_T;


typedef struct FPLMN_LIST_T_s {
    SDL_Octet  max_num;
    SDL_Octet  length;
    FPLMN_ARR_T  fplmn_arr;
} FPLMN_LIST_T;


typedef FPLMN_SIM_T FPLMN_LONG_ARR_T[LONG_FPLMN_SIZE];


typedef struct FPLMN_LONG_LIST_T_s {
    SDL_Octet  length;
    FPLMN_LONG_ARR_T  fplmn_arr;
} FPLMN_LONG_LIST_T;


typedef PLMN_T SELECT_PLMN_ARR_T[SELECT_PLMN_LIST_SIZE];


typedef struct SELECT_PLMN_LIST_T_s {
    SDL_Octet  length;
    SELECT_PLMN_ARR_T  plmn_arr;
} SELECT_PLMN_LIST_T;


typedef LAC_T LAC_ARR_T[LAC_LIST_SIZE];


typedef struct LAC_LIST_T_s {
    SDL_Octet  length;
    LAC_ARR_T  lac_arr;
} LAC_LIST_T;


typedef struct PLMN_LAC_T_s {
    PLMN_T  plmn;
    LAC_LIST_T  lac_list;
    RSSI_T  plmn_max_rssi;
} PLMN_LAC_T;


typedef PLMN_LAC_T AVAILABLE_PLMN_LA_ARR_T[SELECT_PLMN_LIST_SIZE];


typedef struct AVAILABLE_PLMN_LA_LIST_T_s {
    SDL_Octet  length;
    AVAILABLE_PLMN_LA_ARR_T  plmn_la_arr;
} AVAILABLE_PLMN_LA_LIST_T;


typedef LAI_T FLAI_ARR_T[MAX_FLAI_SIZE];


typedef struct FLAI_LIST_T_s {
    SDL_Octet  length;
    FLAI_ARR_T  flai_arr;
} FLAI_LIST_T;


typedef struct PD_TI_REF_T_s {
    z_ctypes_6_ShortInt  pd;
    z_ctypes_6_ShortInt  ti;
} PD_TI_REF_T;


typedef struct L3_MSG_UNIT_T_s {
    z_ctypes_8_UnsignedShortInt  length;
    L3_MESSAGE_ARR_T  l3_msg;
} L3_MSG_UNIT_T;


typedef SDL_Octet  CKSN_T;


typedef z_ctypes_8_UnsignedShortInt  ACC_CONTROL_CLASS_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE MM_UPDATE_STATUS_E;
#define MM_UPDATED 0
#define MM_NOT_UPDATED 1
#define MM_PLMN_NOT_ALLOWED 2
#define MM_LAI_NOT_ALLOWED 3
#define MM_REVERSE_STATE 4


typedef SDL_Octet RAND_T[SDL_INTEGER_LIT(16)];


typedef SDL_Octet SRES_T[SDL_INTEGER_LIT(4)];


typedef z_ctypes_A_UnsignedLongInt  NPDU_SIZE_T;


typedef struct SEND_SNPDU_ACK_T_s *SEND_SNPDU_ACK_PTR_T;


typedef struct NPDU_BUFFER_UNIT_T_s *NPDU_BUFFER_UNIT_PTR_T;


typedef struct SNPDU_INFO_T_s *SNPDU_INFO_PTR_T;


typedef NPDU_BUFFER_UNIT_PTR_T  REFERENCE_T;


typedef struct SEND_SNPDU_ACK_LIST_T_s *SEND_SNPDU_ACK_LIST_PTR_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SNDCP_CAUSE_T;
#define LLC_SNDCP_CAUSE_NO_ERROR 0
#define RELEASE_CAUSE_DM_RECEIVED 1
#define RELEASE_CAUSE_INVALID_XID_RESPONSE 2
#define RELEASE_CAUSE_NO_PEER_RESPONSE 3
#define RELEASE_CAUSE_NORMAL_RELEASE 4
#define SNDCP_CAUSE_INVALID_PRIMITIVE 5
#define SNDCP_CAUSE_NOT_IMPLEMENTED 6
#define SNDCP_CAUSE_INVALID_XID_COMMAND 7
#define SNDCP_CAUSE_INVALID_XID_RESPONSE 8
#define SNDCP_CAUSE_LLC_ERROR 9


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE LLC_LINK_STATE_E;
#define STATE_INITVAL 0
#define STATE_LL_EST_WAIT 1
#define STATE_LL_EST_START 2
#define STATE_LL_EST_RESTART 3
#define STATE_LL_EST_END 4
#define STATE_LL_REL_WAIT 5
#define STATE_LL_REL_START 6


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE LLC_PRO_TYPE_E;
#define LLC_PRO_XID 0
#define LLC_PRO_EST 1
#define LLC_PRO_REL 2


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE FLOW_CTRL_MODE_E;
#define FLOW_CTRL_UNACK_MODE 0
#define FLOW_CTRL_ACK_MODE 1
#define FLOW_CTRL_BOTH_MODE 2


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE GPRS_FLOW_CTRL_MOD_E;
#define GPRS_FLOW_CTRL_MOD_L4 0
#define GPRS_FLOW_CTRL_MOD_SNDCP 1
#define GPRS_FLOW_CTRL_MOD_LLC 2
#define GPRS_FLOW_CTRL_MOD_RLC 3
#define GPRS_FLOW_CTRL_MOD_INVALID 4


typedef z_ctypes_8_UnsignedShortInt  SMI_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SMS_PS_ERROR_E;
#define SMS_NO_AVIAL_TI 0
#define SMS_NO_VALID_SMI 1
#define SMS_UNACCEPT_MEM_REQ 2
#define SMS_LOW_LAYER_FAILURE 3


typedef SDL_Octet SMS_ADDR_ARR_T[SMS_ADDR_MAX_LEN];


typedef struct SMS_ADDR_T_s {
    z_ctypes_8_UnsignedShortInt  length;
    SMS_ADDR_ARR_T  addr_arr_t;
} SMS_ADDR_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SMS_PATH_E;
#define SMS_GSM_PATH 0
#define SMS_GPRS_PATH 1


typedef struct RACH_CONTROL_PARAM_T_s {
    SDL_Octet  max_retrans;
    SDL_Octet  tx_integer;
    SDL_Octet  cba;
    REEST_ALLOWED_OR_NOT_E  re_est;
    z_ctypes_8_UnsignedShortInt  access_class;
} RACH_CONTROL_PARAM_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CCCH_CONFIG_E;
#define PCH1_NC 0
#define PCH1_C 1
#define PCH2_NC 2
#define PCH3_NC 3
#define PCH4_NC 4


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CBQ2_E;
#define CELL_BAR_QUA2_INACT 0
#define RESERVED 1
#define NORMAL_PRIO 2
#define LOW_PRIO 3


typedef struct CCCH_T_s {
    SDL_Boolean  mscr;
    SDL_Boolean  att;
    SDL_Octet  bs_ag;
    CCCH_CONFIG_E  ccch_config;
    CBQ2_E  cbq2;
    SDL_Octet  bs_pa;
    SDL_Octet  t3212_value;
    z_ctypes_6_ShortInt  ccch_group;
    z_ctypes_6_ShortInt  paging_group;
} CCCH_T;


typedef struct CELL_SELECTION_PARAM_T_s {
    SDL_Octet  crh;
    SDL_Octet  ms_txpwr_maxcch;
    SDL_Octet  rxlev_access_min;
    SDL_Octet  si3_acs;
    SDL_Octet  si4_acs;
    SDL_Boolean  neci;
    SDL_Octet  ms_txpwr_dbm;
    SDL_Octet  p;
} CELL_SELECTION_PARAM_T;


typedef struct OPTION_SEL_PARAM_T_s {
    SDL_Boolean  sel_param_present;
    SDL_Octet  cbq;
    SDL_Octet  cell_resel_off;
    SDL_Octet  temporary_off;
    SDL_Octet  penalty_time;
    SDL_Octet  sel_param_pos;
} OPTION_SEL_PARAM_T;


typedef struct OPTION_POWER_OFFSET_T_s {
    SDL_Boolean  power_offset_present;
    SDL_Octet  power_offset;
} OPTION_POWER_OFFSET_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE BCCH_POSITION_E;
#define BCCH_NORM 0
#define BCCH_EXT 1


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE PLMN_STATE_E;
#define NORM_SEARCH 0
#define FIND_PLMN_SEARCH 1
#define LIMITED_SERVICE_SEARCH 2
#define SHOW_PLMN_LIST_SEARCH 3


typedef struct GPRS_IND_T_s {
    SDL_Boolean  gprs_ind_present;
    SDL_Octet  ra_colour;
    BCCH_POSITION_E  si13_position;
} GPRS_IND_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE NC_ORDER_E;
#define NC0 0
#define NC1 1
#define NC2 2
#define NC_SPARE 3


typedef struct PCCCH_ORG_PARAM_T_s {
    SDL_Boolean  bs_pcc_rel;
    SDL_Octet  bs_pbcch_blks;
    SDL_Octet  bs_pag_blks_res;
    SDL_Octet  bs_prach_blks;
} PCCCH_ORG_PARAM_T;


typedef SDL_Octet CA_REF_NUM_ARR_T[SDL_INTEGER_LIT(4)];


typedef struct RR_SI13_PBCCH_LOCATION_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  si13_position_present;
    BCCH_POSITION_E  si13_position;
    SDL_Octet  pbcch_tn;
    SDL_Octet  psi1_repeat_period;
} RR_SI13_PBCCH_LOCATION_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CELL_PRIO_E;
#define NO_CELL 0
#define ACCEPTABLE_CELL_IN_FORBID_LIST 1
#define ACCEPTABLE_CELL 2
#define LOW_PRIO_CELL 3
#define NORMAL_PRIO_CELL 4


typedef struct RXLEV_T_s {
    RSSI_T  rxlev_full;
    RSSI_T  rxlev_sub;
} RXLEV_T;


typedef struct RXQUAL_T_s {
    SDL_Octet  rxqual_full;
    SDL_Octet  rxqual_sub;
} RXQUAL_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE RR_SERVICE_STATE_E;
#define NO_SERVICE 0
#define LIMITED_SERVICE 1
#define ONLY_GSM_SERVICE 2
#define GSM_GPRS_SERVICE 3


typedef SDL_Octet NETWORK_NAME_ARR_T[NETWORK_NAME_ARR_LEN];


typedef z_ctypes_6_ShortInt  CODE_SCHEME_E;


typedef struct NETWORK_NAME_T_s {
    CODE_SCHEME_E  code_scheme;
    SDL_Boolean  is_add_ci;
    z_ctypes_8_UnsignedShortInt  length;
    NETWORK_NAME_ARR_T  name;
} NETWORK_NAME_T;


typedef SDL_Character  LOCAL_TIME_ZONE_T;


typedef struct UT_LT_ZONE_T_s {
    SDL_Octet  year;
    SDL_Octet  month;
    SDL_Octet  day;
    SDL_Octet  hour;
    SDL_Octet  minute;
    SDL_Octet  second;
    SDL_Integer  time_zone;
} UT_LT_ZONE_T;


typedef z_ctypes_A_UnsignedLongInt  LSA_IDENTITY_T;


typedef struct DAYLIGHT_SAVING_TIME_T_s {
    SDL_Octet  value;
} DAYLIGHT_SAVING_TIME_T;


typedef struct MMGMM_INFORMATION_T_s {
    SDL_Boolean  full_name_for_network_flag;
    SDL_Boolean  short_name_for_network_flag;
    SDL_Boolean  local_time_zone_flag;
    SDL_Boolean  ut_lt_zone_flag;
    SDL_Boolean  lsa_identity_flag;
    SDL_Boolean  daylight_saving_time_flag;
    NETWORK_NAME_T  full_network_name;
    NETWORK_NAME_T  short_network_name;
    LOCAL_TIME_ZONE_T  local_time_zone;
    UT_LT_ZONE_T  ut_lt_zone;
    LSA_IDENTITY_T  lsa_identity;
    DAYLIGHT_SAVING_TIME_T  daylight_saving_time;
} MMGMM_INFORMATION_T;


typedef SDL_Octet MSG_HEADER_ARR_T[SDL_INTEGER_LIT(2)];


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE BSIC_FAIL_CAUSE_E;
#define DSP_DECODE_FAIL 0
#define FORBIDDEN_PLMN 1
#define LAYER1_BUSY 2
#define LAYER1_PGREORG 3


typedef SDL_Boolean  SS_VERSION_PRESENT_T;


typedef SDL_Octet  SS_VERSION_VALUE_T;


typedef SDL_Boolean  IS_MORE_SMS_T;


typedef SDL_Octet  MS_MODE_T;


typedef SDL_Boolean  IS_SGSN_R99_T;


typedef SDL_Boolean  IS_REJECT_RECALL_T;


typedef SDL_Boolean  IS_CAUSE_PRESENT_T;


typedef z_ctypes_8_UnsignedShortInt  SS_LOW_LAYER_ERROR_E;


typedef z_ctypes_8_UnsignedShortInt  SMS_CAUSE_TYPE_T;


typedef struct SMS_CAUSE_T_s {
    SMS_CAUSE_TYPE_T  sms_cause_type;
    z_ctypes_8_UnsignedShortInt  sms_cause_value;
} SMS_CAUSE_T;


typedef z_ctypes_8_UnsignedShortInt  ARFCN_T;


typedef z_ctypes_8_UnsignedShortInt ARFCN_LIST_ARR_T[MAX_BA_SIZE];


typedef struct ARFCN_LIST_T_s {
    z_ctypes_6_ShortInt  num;
    ARFCN_LIST_ARR_T  arfcn_list_arr;
} ARFCN_LIST_T;


typedef SDL_Octet  BSIC_T;


typedef struct ARFCN_BSIC_T_s {
    BSIC_T  bsic;
    ARFCN_T  arfcn;
} ARFCN_BSIC_T;


typedef ARFCN_BSIC_T ARFCN_BSIC_LIST_ARR_T[MAX_CELL_DECODED_SIZE];


typedef struct ARFCN_BSIC_LIST_T_s {
    z_ctypes_6_ShortInt  num;
    ARFCN_BSIC_LIST_ARR_T  arfcn_bsic_list_arr;
} ARFCN_BSIC_LIST_T;


typedef SDL_Octet KC_T[SDL_INTEGER_LIT(8)];


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE MS_BAND_E;
#define EGSM900 0
#define DCS1800 1
#define EGSM_DCS_DUALBAND 2
#define PCS1900 3
#define GSM850 4
#define EGSM_PCS_DUALBAND 5
#define GSM850_DCS_DUALBAND 6
#define GSM850_PCS_DUALBAND 7
#define GSM850_EGSM_DUALBAND 8
#define GSM850_EGSM_PCS_TRIBAND 9
#define GSM850_EGSM_DCS_TRIBAND 10
#define EGSM_DCS_PCS_TRIBAND 11
#define GSM850_EGSM_DCS_PCS_QUALBAND 12
#define DCS_PCS_DUALBAND 13
#define GSM850_DCS_PCS_TRIBAND 14
#define INVALID_BAND 15


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE RRA_COMMAND_E;
#define NO_COMMAND 0
#define BCCH_FIRST_COMMAND 1
#define FORCED_CELL_RESEL_COMMAND 2


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CAMP_RESULT_E;
#define CAMP_OK 0
#define CAMP_FAIL_NONSYNC 1


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE BCCH_COLLISION_TYPE_E;
#define NO_COMMAND 0
#define BCCH_BCCH_COLLISION 1
#define BCCH_TRAFFIC_COLLISION 2


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CHANNEL_TYPE_E;
#define SACCH 0
#define SDCCH 1
#define FACCH_H 2
#define FACCH_F 3
#define BCCH 4
#define PCH 5
#define AGCH 6
#define PBCCH 7
#define PPCH 8
#define PAGCH 9
#define PDTCH 10
#define PACCH 11
#define NO_CHANNEL 12


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CHANNEL_MODE_E;
#define SIGNAL_ONLY 0
#define F_H_RATE_VER_1 1
#define F_H_RATE_VER_2 2
#define F_H_RATE_VER_3 3
#define DATA_43D_14U 4
#define DATA_29D_14U 5
#define DATA_43D_29U 6
#define DATA_14D_43U 7
#define DATA_14D_29U 8
#define DATA_29D_43U 9
#define DATA_43_RATE 10
#define DATA_32_RATE 11
#define DATA_29_RATE 12
#define DATA_14_RATE 13
#define DATA_12_RATE 14
#define DATA_6_RATE 15
#define DATA_3_RATE 16


typedef struct MULTI_RATE_CFG_T_s {
    SDL_Boolean  MR_cfg_present;
    SDL_Octet  MR_ver;
    SDL_Boolean  icmi;
    SDL_Octet  start_mode;
    SDL_Octet  acs;
    SDL_Octet  thr_hyst_num;
    SDL_Octet  thresh1;
    SDL_Octet  hyst1;
    SDL_Octet  thresh2;
    SDL_Octet  hyst2;
    SDL_Octet  thresh3;
    SDL_Octet  hyst3;
} MULTI_RATE_CFG_T;


typedef SDL_Octet *OCTET_PTR_T;


typedef SDL_Octet  MS_MULTISLOT_CAPABILITY_T;


typedef SDL_Octet  SUB_CHANNEL_T;


typedef SDL_Octet  MS_TXPWR_CAPABILITY_T;


typedef SDL_Octet  MS_EGPRS_CAPABILITY_T;


typedef SDL_Boolean  BA_IS_VALID_T;


typedef SDL_Boolean  DTX_USED_T;


typedef z_ctypes_6_ShortInt  CCCH_GROUP_T;


typedef SDL_Integer  L2_SIZE_T;


typedef SDL_Octet L2_MESSAGE_ARR_T[MAX_L2_MESSAGE_SIZE];


typedef z_ctypes_6_ShortInt  SAPI_NUM_T;


typedef z_ctypes_A_UnsignedLongInt  TLLI_T;


typedef SDL_Octet POLLING_TS_INDEX_ARR_T[MAX_TX_SLOT_NUM];


typedef SDL_Octet RXLEV_ARR_T[MAX_ARFCN_SIZE];


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE DCH_TYPE_E;
#define TCH_H 0
#define TCH_F 1
#define SDCCH_4 2
#define SDCCH_8 3


typedef struct CHANNEL_DESCRIPTION_T_s {
    DCH_TYPE_E  dch_type;
    SDL_Octet  sub_channel;
    SDL_Octet  tn;
    SDL_Octet  tsc;
    SDL_Boolean  hopping_ind;
    SDL_Octet  maio;
    SDL_Octet  hsn;
    ARFCN_T  arfcn;
} CHANNEL_DESCRIPTION_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE PAGING_MODE_E;
#define PAGING_NORMAL 0
#define PAGING_EXTENDED 1
#define PAGING_REORGANISATION 2
#define PAGING_SAME_AS_BEFORE 3


typedef SDL_Octet  TXPWR_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SI13_INDICATOR_E;
#define SI13_NOT_PRESENT 0
#define SI13_NORM 1
#define SI13_EXT 2


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE PAGING_COORDINATION_E;
#define CS_ONLY_ON_PCH 0
#define CS_PS_PAGING_ON_PPCH 1
#define CS_PS_PAGING_ON_PCH 2
#define CS_PCH_AND_PS_PPCH_OR_PCH 3


typedef SDL_Octet  BA_IND_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SYSINFO_READ_MODE_E;
#define CON_BCCH 0
#define CON_BCCH_A_EXT 1
#define SINGLE_BCCH 2
#define SINGLE_EXT_BCCH 3
#define PACKET_SYSINFO_1 4
#define CON_PBCCH 5
#define CON_PBCCH_WITH_LOW_REP_RATE 6
#define CON_PBCCH_WITH_HIGH_REP_RATE 7
#define MULTIPLE_SINGLE_BCCH 8


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SYSINFO_IND_E;
#define SYSINFO_ALL 0
#define SYSINFO_1 1
#define SYSINFO_2TER 2
#define SYSINFO_2BIS 3
#define SYSINFO_2QUATER 4
#define SYSINFO_3 5
#define SYSINFO_4 6
#define SYSINFO_7 7
#define SYSINFO_8 8
#define SYSINFO_9 9
#define SYSINFO_13 10
#define SYSINFO_2 11


typedef SDL_Octet  LR_START_T;


typedef struct PBCCH_DESCRIPTION_T_s {
    SDL_Octet  pb;
    SDL_Octet  tsc;
    SDL_Octet  tn;
    SDL_Boolean  pbcch_present;
    SDL_Boolean  pbcch_hopping;
    z_ctypes_8_UnsignedShortInt  arfcn;
    z_ctypes_8_UnsignedShortInt  bcch_arfcn;
    SDL_Octet  hsn;
    SDL_Octet  maio;
    ARFCN_LIST_T  ma_list;
    MS_BAND_E  band;
} PBCCH_DESCRIPTION_T;


typedef z_ctypes_A_UnsignedLongInt  ABSOLUTE_FRAME_NUMBER_T;


typedef L2_MESSAGE_ARR_T  PHYSICAL_BLOCK_ARR_T;


typedef SDL_Boolean  BCCH_DECODE_INDICATOR_T;


typedef SDL_Boolean  SCELL_BCCH_ON_T;


typedef SDL_Octet  RACH_AB_T;


typedef z_ctypes_8_UnsignedShortInt  DELAY_SLOTS_T;


typedef SDL_Octet  PMAX_T;


typedef struct REDUCED_FRAME_NUMBER_T_s {
    SDL_Octet  fn_m32;
    SDL_Octet  fn_m51;
    SDL_Octet  fn_m26;
} REDUCED_FRAME_NUMBER_T;


typedef struct STARTING_TIME_T_s {
    SDL_Boolean  starting_time_present;
    REDUCED_FRAME_NUMBER_T  starting_time;
} STARTING_TIME_T;


typedef struct ABSOLUTE_STARTING_TIME_T_s {
    SDL_Boolean  starting_time_present;
    ABSOLUTE_FRAME_NUMBER_T  starting_time;
} ABSOLUTE_STARTING_TIME_T;


typedef ARFCN_LIST_T  MOBILE_ALLOCATION_T;


typedef struct FREQ_PARAM_BEFORE_T_s {
    SDL_Boolean  freq_param_present;
    SDL_Octet  maio;
    ARFCN_LIST_T  ma_list;
} FREQ_PARAM_BEFORE_T;


typedef SDL_Octet  TIMING_ADVANCE_T;


typedef SDL_Octet  RADIO_LINK_TIMEOUT_T;


typedef SDL_Boolean  PWRC_T;


typedef SDL_Boolean  APPLY_DTX_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CIPHER_ALGORITHM_E;
#define CIPHER_WITH_A5_1 0
#define CIPHER_WITH_A5_2 1
#define CIPHER_WITH_A5_3 2
#define CIPHER_WITH_A5_4 3
#define CIPHER_WITH_A5_5 4
#define CIPHER_WITH_A5_6 5
#define CIPHER_WITH_A5_7 6


typedef struct CIPHER_PARAM_T_s {
    SDL_Boolean  cipher_mode;
    CIPHER_ALGORITHM_E  cipher_algorithm;
} CIPHER_PARAM_T;


typedef struct SLOT_DESCRIPTION_T_s {
    SDL_Octet  tn;
    SDL_Boolean  uplink;
    SDL_Boolean  downlink;
    SDL_Octet  channel_set;
    CHANNEL_MODE_E  channel_mode;
} SLOT_DESCRIPTION_T;


typedef SLOT_DESCRIPTION_T MULTI_SLOTS_T[SDL_INTEGER_LIT(8)];


typedef struct CHANNEL_ASSIGN_T_s {
    CHANNEL_DESCRIPTION_T  channel_desc;
    CHANNEL_MODE_E  channel_mode;
    MOBILE_ALLOCATION_T  ma_list;
    ABSOLUTE_STARTING_TIME_T  starting_time;
    SDL_Boolean  param_before_present;
    CHANNEL_DESCRIPTION_T  channel_before;
    MOBILE_ALLOCATION_T  ma_list_before;
    TXPWR_T  txpwr;
    SDL_Boolean  cipher_set;
    CIPHER_PARAM_T  cipher_param;
    MULTI_SLOTS_T  multi_slots;
    MULTI_RATE_CFG_T  multi_rate_cfg;
} CHANNEL_ASSIGN_T;


typedef struct CELL_DESCRIPTION_T_s {
    SDL_Octet  bsic;
    ARFCN_T  arfcn;
} CELL_DESCRIPTION_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SYNCHRON_TYPE_E;
#define NON_SYNCHRONIZED 0
#define SYNCHRONIZED 1
#define PRE_SYNCHRONIZED 2
#define PSEUDO_SYNCHRONIZED 3


typedef struct SYNCHRON_PARAM_T_s {
    SYNCHRON_TYPE_E  synchron_type;
    SDL_Boolean  report_otd;
    SDL_Boolean  normal_cell_ind;
    SDL_Octet  rtd;
    TIMING_ADVANCE_T  timing_advance;
} SYNCHRON_PARAM_T;


typedef struct HANDOVER_PARAM_T_s {
    CELL_DESCRIPTION_T  cell_description;
    SYNCHRON_PARAM_T  synchron_param;
    SDL_Octet  handover_ref;
    SDL_Boolean  access_type;
} HANDOVER_PARAM_T;


typedef struct MOBILE_OTD_T_s {
    SDL_Boolean  otd_present;
    z_ctypes_A_UnsignedLongInt  otd;
} MOBILE_OTD_T;


typedef struct MULTIBAND_REP_T_s {
    SDL_Boolean  multiband_report_present;
    SDL_Octet  multiband_report;
} MULTIBAND_REP_T;


typedef SDL_Octet  NCC_PERMITTED_T;


typedef struct CELL_MEAS_T_s {
    ARFCN_T  arfcn;
    BSIC_T  bsic;
    SDL_Octet  rxlev;
    z_ctypes_A_UnsignedLongInt  delta_fn;
    z_ctypes_6_ShortInt  otd;
    SDL_Octet  dsc_cur;
} CELL_MEAS_T;


typedef z_ctypes_8_UnsignedShortInt  NCELL_NUM_T;


typedef CELL_MEAS_T NCELL_MEAS_REPORT_T[SDL_INTEGER_LIT(6)];


typedef CELL_MEAS_T DUAL_NCELL_MEAS_REPORT_T[SDL_INTEGER_LIT(28)];


typedef struct SCELL_MEAS_REPORT_T_s {
    SDL_Octet  rxlev_full;
    SDL_Octet  rxlev_sub;
    SDL_Octet  rxqual_full;
    SDL_Octet  rxqual_sub;
    TXPWR_T  txpwr;
    RADIO_LINK_TIMEOUT_T  rlt_cur;
} SCELL_MEAS_REPORT_T;


typedef struct BCCH_IF_LEVEL_T_s {
    SDL_Boolean  valid_flag;
    SDL_Octet  i_level;
} BCCH_IF_LEVEL_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE L1_ERROR_CODE_E;
#define DOWN_LINK_FAIL 0
#define RADIO_LINK_FAIL 1
#define RR_MT_COLLISION 2
#define RR_CS_OVERRIDE_PS 3


typedef struct PCCCH_DESC_T_s {
    SDL_Octet  tsc;
    SDL_Octet  tn;
    SDL_Boolean  hopping_ind;
    ARFCN_T  arfcn;
    SDL_Octet  hsn;
    SDL_Octet  maio;
    ARFCN_LIST_T  ma_list;
} PCCCH_DESC_T;


typedef SDL_Octet  NC_NON_DRX_PERIOD_T;


typedef SDL_Octet  NC_REPORT_PERIOD_I_T;


typedef SDL_Octet  NC_REPORT_PERIOD_T_T;


typedef ARFCN_LIST_T  NC_FREQUENCY_LIST_T;


typedef SDL_Octet  BCCH_INTERF_LEVEL_T;


typedef SDL_Octet  EXT_MEAS_MODE_T;


typedef SDL_Octet  EXT_REPORT_PERIOD_T;


typedef ARFCN_LIST_T  EXT_FREQUENCY_LIST_T;


typedef SDL_Boolean  INT_FREQ_VALID_T;


typedef SDL_Octet  INT_FREQ_INDEX_T;


typedef struct CELL_MEAS_T_s *NC_EM_REPORT_PTR_T;


typedef SDL_Octet IF_LEVEL_LIST_T[SDL_INTEGER_LIT(8)];


typedef z_ctypes_6_ShortInt  TBF_DIRECTION_T;


typedef z_ctypes_6_ShortInt  TBF_MODE_T;


typedef z_ctypes_6_ShortInt  ARQ_MODE_T;


typedef struct PACKET_CHANNEL_T_s {
    SDL_Octet  tsc;
    SDL_Octet  ul_timeslot_masks;
    SDL_Octet  dl_timeslot_masks;
    SDL_Octet  ptcch_timeslot;
    ARFCN_T  arfcn;
    SDL_Octet  hsn;
    SDL_Boolean  channel_hopping;
    SDL_Octet  maio;
    ARFCN_LIST_T  ma_list;
} PACKET_CHANNEL_T;


typedef struct GPRS_TIMING_ADVANCE_T_s {
    SDL_Octet  time_advance_value;
    SDL_Boolean  time_advance_index_present;
    SDL_Octet  time_advance_index;
    SDL_Octet  time_advance_timeslotnumber;
} GPRS_TIMING_ADVANCE_T;


typedef struct TBF_STARTING_TIME_T_s {
    SDL_Boolean  starting_time_present;
    SDL_Boolean  absolute_or_reduced;
    ABSOLUTE_FRAME_NUMBER_T  absolute_frame_number;
    REDUCED_FRAME_NUMBER_T  reduced_frame_number;
} TBF_STARTING_TIME_T;


typedef SDL_Octet USF_ARR_T[SDL_INTEGER_LIT(8)];


typedef struct MEAS_PARAM_T_s {
    SDL_Boolean  meas_param_present;
    TBF_STARTING_TIME_T  meas_starting_time;
    SDL_Octet  meas_bitmap;
    SDL_Octet  meas_interval;
} MEAS_PARAM_T;


typedef z_ctypes_6_ShortInt  z11O_BEP_PERIOD2;


typedef struct EGPRS_TBF_PARAM_T_s {
    z11O_BEP_PERIOD2  bep_period2;
    ARQ_MODE_T  arq;
    SDL_Octet  multiblock_num;
} EGPRS_TBF_PARAM_T;


typedef SDL_Octet BLOCK_ARR_T[BLOCK_SIZE];


typedef struct BLOCK_STRUCT_T_s {
    z_ctypes_6_ShortInt  data_flag;
    CHANNEL_TYPE_E  channel_type;
    z_ctypes_6_ShortInt  send_type;
    z_ctypes_6_ShortInt  puncture_type;
    BLOCK_ARR_T  array;
} BLOCK_STRUCT_T;


typedef struct BLOCK_STRUCT_T_s *BLOCK_STRUCT_PTR_T;


typedef BLOCK_STRUCT_PTR_T BLOCK_STRUCT_PTR_ARR_T[MAX_TX_SLOT_NUM];


typedef BLOCK_STRUCT_PTR_ARR_T *BLOCK_STRUCT_PTR_ARR_PTR_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE AB_FORMAT_E;
#define AB_8 0
#define AB_11 1


typedef SDL_Octet EGPRS_RACH_AB_T[SDL_INTEGER_LIT(2)];


typedef SDL_Octet PRACH_AB_T[SDL_INTEGER_LIT(2)];


typedef SDL_Boolean  IS_EGPRS_PRACH_T;


typedef PRACH_AB_T *PRACH_AB_PTR_T;


typedef EGPRS_RACH_AB_T *EGPRS_RACH_AB_PTR_T;


typedef SDL_Octet GAMMA_ARR_T[SDL_INTEGER_LIT(8)];


typedef SDL_Boolean SMSCB_SCHEDULE_TABLE_T[SDL_INTEGER_LIT(48)];


typedef SDL_Octet SMSCB_BLOCK_ARR_T[SDL_INTEGER_LIT(23)];


typedef struct SMSCB_SCHEDULE_T_s {
    z_ctypes_8_UnsignedShortInt  begin_slot_num;
    z_ctypes_8_UnsignedShortInt  end_slot_num;
    SMSCB_SCHEDULE_TABLE_T  schedule_table;
} SMSCB_SCHEDULE_T;


typedef SDL_Octet  ALPHA_T;


typedef SDL_Octet  T_AVG_W_T;


typedef SDL_Octet  BA_VALID_T;


typedef SDL_Octet  T_AVG_T_T;


typedef SDL_Octet  PB_T;


typedef SDL_Boolean  USE_BCCH_T;


typedef SDL_Octet  N_AVG_T;


typedef SDL_Boolean  CBCH_ACT_T;


typedef SDL_Boolean  INPUT_SWITCH_T;


typedef SDL_Boolean  OUTPUT_SWITCH_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE LOOP_LIST_E;
#define LOOP_A 0
#define LOOP_B 1
#define LOOP_C 2
#define LOOP_D 3
#define LOOP_E 4
#define LOOP_F 5
#define LOOP_G 6
#define LOOP_I 7
#define LOOP_MAX 8


typedef SDL_Boolean  TONE_SWITCH_T;


typedef z_ctypes_8_UnsignedShortInt  TONE_DURATION_T;


typedef z_ctypes_8_UnsignedShortInt  INPUT_LEVEL_T;


typedef z_ctypes_8_UnsignedShortInt  OUTPUT_LEVEL_T;


typedef z_ctypes_6_ShortInt  MAC_MODE_T;


typedef z_ctypes_6_ShortInt  LLC_PDU_TYPE_T;


typedef z_ctypes_6_ShortInt  RADIO_PRIORITY_T;


typedef z_ctypes_6_ShortInt  RLC_MODE_T;


typedef struct CHAN_DESCR_T_s {
    PEAK_THROUGHPUT_CLASS_T  peak;
    RADIO_PRIORITY_T  prior;
    RLC_MODE_T  mode;
    LLC_PDU_TYPE_T  pdu_type;
    z_ctypes_6_ShortInt  octet_count;
} CHAN_DESCR_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE TEST_INTERFACE_E;
#define NORMAL_OPERATION 0
#define SPEECH_DECODER_DTX 1
#define SPEECH_ENCODER_DTX 2
#define z0OV3_RESERVED_VALUE 3
#define ACOUSTIC_DEVICE_AD_DA 4


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE DTX_ALLOWED_E;
#define NEITHER_USE_DTX 0
#define ONLY_FULL_RATE_USE_DTX 1
#define ONLY_HALF_RATE_USE_DTX 2
#define BOTH_USE_DTX 3


typedef struct SINGLE_SI_REQ_T_s {
    ARFCN_T  arfcn;
    MS_BAND_E  cell_band;
    SYSINFO_READ_MODE_E  si_read_mode;
    SYSINFO_IND_E  si_ind;
    SDL_Octet  tc;
} SINGLE_SI_REQ_T;


typedef SINGLE_SI_REQ_T SINGLE_BCCH_DECODE_LIST_ARR_T[SDL_INTEGER_LIT(4)];


typedef struct MULTIPLE_SINGLE_BCCH_DECODE_T_s {
    z_ctypes_6_ShortInt  num;
    SINGLE_BCCH_DECODE_LIST_ARR_T  si_req_list;
} MULTIPLE_SINGLE_BCCH_DECODE_T;


typedef z_ctypes_8_UnsignedShortInt  BCCH_TC_MASK_T;


typedef struct BCCH_DECODE_T_s {
    ARFCN_T  arfcn;
    BCCH_TC_MASK_T  tc_mask;
    MS_BAND_E  band;
    SDL_Boolean  bcch_first;
    z_ctypes_6_ShortInt  bcch_priority;
    SDL_Boolean  force_decode;
} BCCH_DECODE_T;


typedef BCCH_DECODE_T BCCH_DECODE_LIST_T[SEARCH_DECODE_SIZE];


typedef struct BSIC_DECODE_T_s {
    ARFCN_T  arfcn;
    MS_BAND_E  band;
    z_ctypes_6_ShortInt  bsic_priority;
} BSIC_DECODE_T;


typedef BSIC_DECODE_T BSIC_DECODE_LIST_T[SEARCH_DECODE_SIZE];


typedef struct RF_SCAN_MEAS_T_s {
    z_ctypes_8_UnsignedShortInt  arfcn_index;
    SDL_Octet  rxlev;
} RF_SCAN_MEAS_T;


typedef RF_SCAN_MEAS_T RF_SCAN_MEAS_LIST_T[MAX_BA_SIZE_THREE_CARD];


typedef SDL_Octet  CELL_PARAM_ID_T;


typedef struct RR_CELL_INFO_T_s {
    SDL_Octet  present;
    ARFCN_T  arfcn;
    BSIC_T  bsic;
    SDL_Octet  rxlev;
    z_ctypes_6_ShortInt  C1;
    z_ctypes_6_ShortInt  C2;
    z_ctypes_6_ShortInt  C31;
    z_ctypes_6_ShortInt  C32;
} RR_CELL_INFO_T;


typedef struct RR_CELL_INFO_TRAFFIC_T_s {
    SDL_Octet  present;
    ARFCN_T  arfcn;
    BSIC_T  bsic;
    SDL_Octet  rxlev;
    z_ctypes_6_ShortInt  rxlev_full;
    z_ctypes_6_ShortInt  rxlev_sub;
    z_ctypes_6_ShortInt  rxqual_full;
    z_ctypes_6_ShortInt  rxqual_sub;
} RR_CELL_INFO_TRAFFIC_T;


typedef RR_CELL_INFO_T RR_NCELLS_INFO_T[SDL_INTEGER_LIT(6)];


typedef struct RR_CELLS_INFO_T_s {
    SDL_Octet  rr_task_no;
    RR_CELL_INFO_T  scell;
    RR_NCELLS_INFO_T  ncells;
} RR_CELLS_INFO_T;


typedef struct RR_CELL_INFO_EX_T_s {
    SDL_Octet  ms_txpwr_max_ccch;
    SDL_Octet  rxlev_access_min;
    SDL_Octet  CBA;
    SDL_Octet  CBQ;
    SDL_Octet  CRO;
    SDL_Octet  TempOffset;
    SDL_Octet  PT;
    SDL_Octet  CRH;
} RR_CELL_INFO_EX_T;


typedef RR_CELL_INFO_EX_T RR_NCELLS_INFO_EX_T[SDL_INTEGER_LIT(6)];


typedef struct RR_CELLS_INFO_EX_T_s {
    RR_CELL_INFO_EX_T  scell;
    RR_NCELLS_INFO_EX_T  ncells;
} RR_CELLS_INFO_EX_T;


typedef struct RR_CELLS_INFO_TRAFFIC_T_s {
    SDL_Octet  rr_task_no;
    RR_CELL_INFO_TRAFFIC_T  scell;
    RR_NCELLS_INFO_T  ncells;
} RR_CELLS_INFO_TRAFFIC_T;


typedef z_ctypes_8_UnsignedShortInt  CARD_MASK_T;


typedef SDL_Boolean  IS_MEAS_VALID_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE RELEASE_MODE_E;
#define RELEASE_NORMAL 0
#define RELEASE_LOCAL_END 1


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE ESTABLISH_MODE_E;
#define ESTABLISH_NORMAL 0
#define ESTABLISH_CONTENSION_RESOLUTION 1


typedef SDL_Boolean  OUT_STANDING_ACKS_T;


typedef SDL_Boolean  DO_CONFIRM_T;


typedef SDL_Boolean  UNSERVED_DATA_REQS_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE DL_ERR_IND_E;
#define z0PG0_DL_ERR_T200_EXPIRED 0
#define z0PG1_DL_ERR_REESTABLISH 1
#define z0PG2_DL_ERR_UNEXPECTED_UA 2
#define z0PG3_DL_ERR_UNEXPECTED_DM1 3
#define z0PG4_DL_ERR_UNEXPECTED_DM2 4
#define z0PG5_DL_ERR_UNEXPECTED_SFRAME 5
#define z0PG6_DL_ERR_SEQ_ERR 6
#define z0PG7_DL_ERR_WRONG_UFRAME 7
#define z0PG8_DL_ERR_L2_HEADER_NOT_SUPPORT 8
#define z0PG9_DL_ERR_L2_HEADER_NOT_APPLICABLE 9
#define z0PGA_DL_ERR_WRONG_SFRAME 10
#define z0PGB_DL_ERR_IFRAME_MBIT 11
#define z0PGC_DL_ERR_IFRAME_LENGTH 12
#define z0PGD_DL_ERR_FRAME_NOT_IMPLEMENTED 13


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE RR_DM_STATE_E;
#define DM_INVALID 0
#define DM_RESEL_WAIT_TRR_IND 1
#define DM_RESEL_START 2
#define DM_RESEL_WAIT_BSIC 3
#define DM_RESEL_WAIT_BCCH 4
#define DM_RESEL_WAIT_CAMP_CNF 5
#define DM_HO_WAIT_TRR_IND 6
#define DM_HO_START 7
#define DM_HO_WAIT_HO_CNF 8
#define DM_HO_WAIT_DL_EST_CNF 9
#define DM_HO_WAIT_PHYINOF 10
#define DM_HO_WAIT_HO_COMP_SENT_CNF 11
#define DM_GSM_PLMN_SEARCHING 12
#define DM_PS_HO_CCOFU_WAIT_TRR_IND 13
#define DM_PS_HO_CCOFU_START 14
#define DM_PS_HO_CCOFU_WAIT_BSIC 15
#define DM_PS_HO_CCOFU_WAIT_BCCH 16
#define DM_PS_HO_CCOFU_WAIT_SI13 17
#define DM_PS_HO_CCOFU_WAIT_PBCCH 18
#define DM_PS_HO_CCOFU_WAIT_CAMP_CNF 19
#define DM_PS_HO_CCOFU_WAIT_MAC_CNF 20
#define DM_PS_HO_CCOFU_WAIT_RA_CNF 21
#define DM_PS_HO_CCOFU_WAIT_PH_IA_CNF 22
#define DM_PS_HO_CCOFU_WAIT_DL_EST_CNF 23
#define DM_PS_HO_CCOTU_WAIT_PH_ASS_CNF 24
#define DM_PS_HO_CCOTU_WAIT_DL_RECON_CNF 25
#define DM_PS_HO_CCOFU_WAIT_EST 26
#define DM_PS_HO_CCOTU_REVERT_WAIT_CAMP_CNF 27


typedef SDL_Octet BA_LIST_ARR_T[SDL_INTEGER_LIT(16)];


typedef struct BCCH_INFO_T_s {
    LAI_T  lai;
    CELL_ID_T  cell_id;
    SDL_Boolean  att;
    SDL_Octet  t3212_value;
    REEST_ALLOWED_OR_NOT_E  call_reest_allowed;
    BA_LIST_ARR_T  ba_undecoded;
    BA_IS_VALID_T  ba_valid;
    BA_LIST_ARR_T  bis_ba_undecoded;
    BA_IS_VALID_T  bis_ba_valid;
    ARFCN_T  arfcn;
    MS_BAND_E  band;
    SDL_Boolean  mscr;
} BCCH_INFO_T;


typedef struct GPRS_INFO_T_s {
    NETWORK_MODE_E  network_oper_mode;
    RAI_T  rai;
    IS_SGSN_R99_T  sgsnr;
} GPRS_INFO_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE RR_ACT_TYPE_E;
#define RR_ACT_NORMAL 0
#define RR_ACT_EMERGENCY_ONLY 1
#define RR_ACT_NO_SERVICE 2


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE GPRS_IND_E;
#define GPRS_NOT_SUPPORT 0
#define GPRS_DO_SUPPORT 1
#define GPRS_SUPPORT_NOT_DECIDED 2


typedef z_ctypes_8_UnsignedShortInt  RELEASE_CAUSE_T;


typedef SDL_Octet  ACCESS_REJ_TIME_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE MMRR_ABORT_CAUSE_E;
#define WATCHDOG_TIMER_EXPIRY 0
#define T3240_EXP 1
#define RR_RANDOM_ACC_FAIL 2
#define RR_ACC_REJ 3
#define RR_ACC_BAR 4
#define RR_CONNECT_FAIL 5
#define RR_LAI_CHG 6
#define RR_BAND_CHG 7
#define RR_ACC_CONFLICT 8
#define RR_NO_CELL 9


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE MMRR_ABORT_REQ_TYPE_E;
#define ABORT_RR_CONNECTION 0
#define ABORT_PLMN_LIST 1


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE HOLD_AUXILIARY_STATE_E;
#define HOLD_IDLE 0
#define HOLD_REQUEST 1
#define CALL_HOLD 2
#define RETRIEVE_REQUEST 3


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE MPTY_AUXILIARY_STATE_E;
#define MPTY_IDLE 0
#define MPTY_REQUEST 1
#define CALL_IN_MPTY 2
#define SPLIT_REQUEST 3


typedef z_ctypes_8_UnsignedShortInt  NUMBER_TYPE_E;


typedef z_ctypes_8_UnsignedShortInt  NUMBER_PLAN_E;


typedef z_ctypes_8_UnsignedShortInt  SUBADDRESS_TYPE_E;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE LENGTH_TYPE_E;
#define LENGTH_EVEN 0
#define LENGTH_ODD 1


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CLIR_E;
#define CLIR_SUPPRESSION 0
#define CLIR_INVOCATION 1
#define CLIR_NETWORK_DECIDE 2


typedef z_ctypes_8_UnsignedShortInt  USER_USER_PD_E;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CODE_STD_E;
#define CODE_ITU_STD 0
#define CODE_INTERNATIONAL_STD 1
#define CODE_NATION_STD 2
#define CODE_GSM_STD 3


typedef z_ctypes_8_UnsignedShortInt  CALL_STATE_E;


typedef z_ctypes_8_UnsignedShortInt  LOCATION_E;


typedef z_ctypes_8_UnsignedShortInt  PROG_DES_E;


typedef z_ctypes_8_UnsignedShortInt  SIGNAL_VALUE_E;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE PRESENT_IND_E;
#define PRESENT_ALLOW 0
#define PRESENT_RESTRICT 1
#define PRESENT_NUM_NO_AVAILABLE 2


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SCREEN_IND_E;
#define NOT_SCREEN 0
#define SCREEN_VRF_PASS 1
#define SCREEN_VRF_FAIL 2
#define SCREEN_NETWORK_PVD 3


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE NOTIFY_E;
#define NOTIFY_SUSPEND 0
#define NOTIFY_RESUME 1
#define NOTIFY_BEARER_CHANGE 2


typedef z_ctypes_8_UnsignedShortInt  ALERT_PATTERN_E;


typedef z_ctypes_8_UnsignedShortInt  CONGESTION_LEVEL_E;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE NO_CLIR_CAUSE_E;
#define CLIR_UNAVAILABLE 0
#define CLIR_REJECT_BY_USER 1
#define CLIR_INTERACT_OTHER 2
#define CLIR_PAYPHONE 3


typedef SDL_Octet CALL_ADDR_ARR_T[ADDR_BCD_MAX_LEN];


typedef SDL_Octet CALL_SUB_ADDR_ARR_T[SUB_ADDR_MAX_LEN];


typedef struct AUX_STATE_T_s {
    HOLD_AUXILIARY_STATE_E  hold_st;
    MPTY_AUXILIARY_STATE_E  mpty_st;
} AUX_STATE_T;


typedef struct CALLED_NUMBER_T_s {
    NUMBER_TYPE_E  number_type;
    NUMBER_PLAN_E  number_plan;
    z_ctypes_8_UnsignedShortInt  num_len;
    CALL_ADDR_ARR_T  party_num;
} CALLED_NUMBER_T;


typedef struct CALLING_NUMBER_T_s {
    NUMBER_TYPE_E  number_type;
    NUMBER_PLAN_E  number_plan;
    PRESENT_IND_E  present_ind;
    SCREEN_IND_E  screen_ind;
    z_ctypes_8_UnsignedShortInt  num_len;
    CALL_ADDR_ARR_T  party_num;
} CALLING_NUMBER_T;


typedef SDL_Octet CC_CAPABILITY_BUF_T[CC_CAPABILITY_LEN];


typedef struct CC_CAPABILITY_T_s {
    z_ctypes_8_UnsignedShortInt  cc_len;
    CC_CAPABILITY_BUF_T  cc_buf;
} CC_CAPABILITY_T;


typedef SDL_Octet BEARER_CAPABILITY_BUF_T[BEARER_CAPABILITY_LEN];


typedef struct BEARER_CAPABILITY_T_s {
    z_ctypes_8_UnsignedShortInt  bc_len;
    BEARER_CAPABILITY_BUF_T  bc_buf;
} BEARER_CAPABILITY_T;


typedef z_ctypes_8_UnsignedShortInt  BEARER_CAPABILITY_TYPE_E;


typedef z_ctypes_8_UnsignedShortInt  RE_INDICATION_E;


typedef L3_MSG_UNIT_T  FACILITY_T;


typedef z_ctypes_8_UnsignedShortInt  RE_INDICATION_E;


typedef struct SUBADDR_T_s {
    SUBADDRESS_TYPE_E  sub_addr_type;
    LENGTH_TYPE_E  odd_even_type;
    z_ctypes_8_UnsignedShortInt  addr_len;
    CALL_SUB_ADDR_ARR_T  sub_num;
} SUBADDR_T;


typedef SDL_Octet LLC_MSG_ARR_T[LLC_MSG_LEN];


typedef struct LLC_MSG_T_s {
    z_ctypes_8_UnsignedShortInt  msg_len;
    LLC_MSG_ARR_T  llc_msg;
} LLC_MSG_T;


typedef SDL_Octet HLC_MSG_ARR_T[HLC_MSG_LEN];


typedef struct HLC_MSG_T_s {
    z_ctypes_8_UnsignedShortInt  msg_len;
    HLC_MSG_ARR_T  hlc_msg;
} HLC_MSG_T;


typedef SDL_Octet SMALL_USER_ARR_T[SMALL_USER_INFO_MAX_LEN];


typedef struct SMALL_USER_USER_T_s {
    USER_USER_PD_E  user_protocol;
    z_ctypes_8_UnsignedShortInt  info_len;
    SMALL_USER_ARR_T  info;
} SMALL_USER_USER_T;


typedef SDL_Octet USER_ARR_T[USER_INFO_MAX_LEN];


typedef struct USER_USER_T_s {
    USER_USER_PD_E  user_protocol;
    z_ctypes_8_UnsignedShortInt  info_len;
    USER_ARR_T  info;
} USER_USER_T;


typedef struct PROGRESS_IND_T_s {
    CODE_STD_E  code_std;
    LOCATION_E  local;
    PROG_DES_E  descrip;
} PROGRESS_IND_T;


typedef struct SIGNAL_T_s {
    SIGNAL_VALUE_E  value;
} SIGNAL_T;


typedef struct CAUSE_T_s {
    LOCATION_E  local;
    GSM_CAUSE_T  cause_v;
} CAUSE_T;


typedef struct SETUP_CNF_VALUE_T_s {
    SDL_Boolean  progress_present;
    SDL_Boolean  connect_num_present;
    SDL_Boolean  conn_sub_addr_present;
    SDL_Boolean  user_to_user_present;
    PROGRESS_IND_T  progress;
    CALLING_NUMBER_T  conn_addr;
    SUBADDR_T  conn_sub_addr;
    USER_USER_T  user_to_user;
} SETUP_CNF_VALUE_T;


typedef struct REJ_IND_VALUE_T_s {
    CAUSE_T  cause;
} REJ_IND_VALUE_T;


typedef struct CALL_PROCEEDING_IND_VALUE_T_s {
    SDL_Boolean  bc1_present;
    SDL_Boolean  bc2_present;
    SDL_Boolean  progress_present;
    SDL_Boolean  prior_present;
    SDL_Boolean  multicall_is_supported;
    RE_INDICATION_E  repeat_ind;
    BEARER_CAPABILITY_T  bc1;
    BEARER_CAPABILITY_T  bc2;
    PROGRESS_IND_T  progress;
    CALL_PRIOR_E  prior;
} CALL_PROCEEDING_IND_VALUE_T;


typedef struct CALL_PROGRESS_IND_VALUE_T_s {
    PROGRESS_IND_T  progress;
    SDL_Boolean  user_to_user_present;
    USER_USER_T  user_to_user;
} CALL_PROGRESS_IND_VALUE_T;


typedef struct ALERT_IND_VALUE_T_s {
    SDL_Boolean  progress_present;
    SDL_Boolean  user_to_user_present;
    PROGRESS_IND_T  progress;
    USER_USER_T  user_to_user;
} ALERT_IND_VALUE_T;


typedef NOTIFY_E  NOTIFY_IND_VALUE_T;


typedef struct DISC_IND_VALUE_T_s {
    CAUSE_T  cause;
    SDL_Boolean  progress_present;
    SDL_Boolean  user_to_user_present;
    PROGRESS_IND_T  progress;
    USER_USER_T  user_to_user;
    SDL_Boolean  allowed_action_present;
    SDL_Boolean  active_ccbs_possible;
} DISC_IND_VALUE_T;


typedef struct REL_IND_VALUE_T_s {
    SDL_Boolean  user_to_user_present;
    CAUSE_T  cause1;
    CAUSE_T  cause2;
    USER_USER_T  user_to_user;
} REL_IND_VALUE_T;


typedef SDL_Octet  START_DTMF_REQ_VALUE_T;


typedef struct START_DTMF_CNF_VALUE_T_s {
    SDL_Boolean  dtmf_present;
    SDL_Octet  dtmf_char;
    CAUSE_T  cause;
} START_DTMF_CNF_VALUE_T;


typedef struct MODIFY_IND_VALUE_T_s {
    BEARER_CAPABILITY_T  bc;
    SDL_Boolean  llc_present;
    SDL_Boolean  hlc_present;
    LLC_MSG_T  llc;
    HLC_MSG_T  hlc;
    SDL_Boolean  rev_callsetup_dir;
    SDL_Boolean  immediate_mod_ind;
} MODIFY_IND_VALUE_T;


typedef struct MODIFY_CNF_VALUE_T_s {
    BEARER_CAPABILITY_T  bc;
    SDL_Boolean  cause_present;
    CAUSE_T  cause;
    SDL_Boolean  llc_present;
    LLC_MSG_T  llc;
    SDL_Boolean  hlc_present;
    HLC_MSG_T  hlc;
    SDL_Boolean  rev_callsetup_dir;
    SDL_Boolean  immediate_mod_ind;
} MODIFY_CNF_VALUE_T;


typedef struct HOLD_OR_RETRIEVE_CNF_VALUE_E_s {
    SDL_Boolean  is_success;
    CAUSE_T  cause;
} HOLD_OR_RETRIEVE_CNF_VALUE_E;


typedef struct ENQ_STATUS_RSP_VALUE_T_s {
    SDL_Boolean  axu_state_present;
    AUX_STATE_T  axu_state;
} ENQ_STATUS_RSP_VALUE_T;


typedef struct USER_INFO_VALUE_T_s {
    USER_USER_T  user_to_user;
    SDL_Boolean  is_more_data;
} USER_INFO_VALUE_T;


typedef struct CONGESTION_CONT_VALUE_T_s {
    CONGESTION_LEVEL_E  congestion_level;
    CAUSE_T  cause;
} CONGESTION_CONT_VALUE_T;


typedef struct SETUP_RSP_VALUE_T_s {
    SDL_Boolean  conn_sub_addr_present;
    SDL_Boolean  user_to_user_present;
    SUBADDR_T  conn_subaddr;
    USER_USER_T  user_to_user;
} SETUP_RSP_VALUE_T;


typedef struct DISC_REQ_VALUE_T_s {
    SDL_Boolean  user_to_user_present;
    USER_USER_T  user_to_user;
    CAUSE_T  cause;
} DISC_REQ_VALUE_T;


typedef struct REJ_REQ_VALUE_T_s {
    CAUSE_T  cause;
    SDL_Boolean  user_to_user_present;
    USER_USER_T  user_to_user;
} REJ_REQ_VALUE_T;


typedef struct REL_REQ_VALUE_T_s {
    SDL_Boolean  time_is_expired;
    SDL_Boolean  user_to_user_present;
    USER_USER_T  user_to_user;
    SDL_Boolean  facility_present;
    L3_MSG_UNIT_T  facility;
    SDL_Boolean  ss_version_present;
    SDL_Octet  ss_version;
    CAUSE_T  cause;
} REL_REQ_VALUE_T;


typedef struct ALERT_REQ_VALUE_T_s {
    SDL_Boolean  user_to_user_present;
    USER_USER_T  user_to_user;
} ALERT_REQ_VALUE_T;


typedef SDL_Octet BACKUP_BEARER_CAPABILITY_BUF_T[BACKUP_BEARER_CAPABILITY_LEN];


typedef struct BACKUP_BEARER_CAPABILITY_T_s {
    z_ctypes_8_UnsignedShortInt  bc_len;
    BACKUP_BEARER_CAPABILITY_BUF_T  bc_buf;
} BACKUP_BEARER_CAPABILITY_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE MN_MM_REG_CAUSE_E;
#define MS_POWER_ON_WITH_SIM 0
#define MS_POWER_ON_NO_SIM 1
#define MS_SIM_INSERT 2
#define MS_PLMN_RESELECTION 3
#define MS_USER_REQ_MANUAL_PLMN_SELECTION 4


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE HANDSET_STATE_E;
#define MS_NORMAL_SERVICE 0
#define MS_EMERGENCY_SERVICE_ONLY 1
#define MS_NO_CELL 2
#define MS_NULL 3


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE MN_MM_NREG_CAUSE_E;
#define MS_POWER_OFF 0
#define MS_SIM_REMOVE 1
#define MS_SIM_INVALID 2
#define MS_GSM_DETACH 3
#define MS_DEACT_TO_CALI 4


typedef struct CURRENT_CELL_INFO_T_s {
    NETWORK_MODE_E  network_mode;
    PLMN_T  plmn;
    SDL_Boolean  gprs_support;
    RAI_T  rai;
    CELL_ID_T  cellid;
    BA_LIST_ARR_T  bis_ba_undecoded;
    BA_IS_VALID_T  bis_ba_valid;
} CURRENT_CELL_INFO_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE MN_MM_NREG_IND_CAUSE_E;
#define NREG_IND_ABNORMAL_CELL 0
#define NREG_IND_BAD_SIM 1
#define NREG_IND_IMSI_UNKNOW_IN_HLR 2
#define NREG_IND_PLMN_NOT_ALLOW 3
#define NREG_IND_LAI_NOT_ALLOW_R 4
#define NREG_IND_LAI_NOT_ALLOW_S 5
#define NREG_IND_ACC_NOT_ALLOW 6
#define NREG_IND_ACC_NETWORK_BUSY 7
#define NREG_IND_ATTEMP_FAILURE 8
#define NREG_IND_SIM_AUTH_FAIL 9


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE MS_ATTACH_TYPE_E;
#define GSM_ONLY 0
#define GSM_AND_GPRS 1
#define GPRS_ONLY 2


typedef SDL_Boolean  IS_MS_SUPPORT_CS_T;


typedef SDL_Boolean  IS_MS_SUPPORT_PS_T;


typedef SDL_Boolean  IS_AUTO_PLMN_SEL_T;


typedef SDL_Boolean  IS_FORBID_ROAMING_T;


typedef SDL_Boolean  IS_PHONE_CTRL_PLMN_T;


typedef struct CSN_NODE_T_s *CSN_NODE_PTR_T;


typedef struct CSN_LIST_T_s {
    CSN_NODE_PTR_T  first;
    CSN_NODE_PTR_T  cur;
} CSN_LIST_T;


typedef struct CSN_LIST_T_s *CSN_LIST_PTR_T;


typedef CSN_LIST_PTR_T  ADD_FREQ_LIST_PTR;


typedef CSN_LIST_PTR_T  CELL_ALLOCATION_LIST_PTR;


typedef CSN_LIST_PTR_T  CHANNEL_GROUP_PTR;


typedef CSN_LIST_PTR_T  EXT_FREQ_LIST_PTR;


typedef CSN_LIST_PTR_T  GPRS_MOBILE_ALLOCTIONS_PTR;


typedef CSN_LIST_PTR_T  NEIGHBOUR_CELL_PARS_2_PTR;


typedef CSN_LIST_PTR_T  NEIGHBOUR_CELL_PARS_PTR;


typedef CSN_LIST_PTR_T  PCCCH_DESCRIPTION_PTR;


typedef CSN_LIST_PTR_T  REFERENCED_FREQ_LIST_PTR;


typedef CSN_LIST_PTR_T  REJECT_LIST_PTR;


typedef CSN_LIST_PTR_T  REMOVED_FREQ_PTR;


typedef struct START_FRAME_NUMBER_T_s {
    SDL_Octet  encoding;
    z_ctypes_8_UnsignedShortInt  frame_number;
} START_FRAME_NUMBER_T;


typedef struct PACKET_REQ_REF_T_s {
    SDL_Boolean  ie_present;
    PRACH_AB_T  random_acc_info;
    START_FRAME_NUMBER_T  frame_number;
} PACKET_REQ_REF_T;


typedef struct GLOBAL_TFI_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  tfi_type;
    SDL_Octet  tfi;
} GLOBAL_TFI_T;


typedef struct ASSIGNED_TFI_T_s {
    SDL_Boolean  ul_tfi_present;
    SDL_Boolean  dl_tfi_present;
    SDL_Octet  ul_tfi;
    SDL_Octet  dl_tfi;
} ASSIGNED_TFI_T;


typedef struct REJECT_T_s {
    SDL_Boolean  wait_indication_present;
    SDL_Octet  wait_indication;
    SDL_Boolean  wait_indication_size;
    SDL_Boolean  tlli_present;
    z_ctypes_A_UnsignedLongInt  tlli;
    PACKET_REQ_REF_T  req_ref;
    GLOBAL_TFI_T  global_tfi;
} REJECT_T;


typedef struct REF_ADDR_T_s {
    GLOBAL_TFI_T  global_tfi;
    SDL_Boolean  tlli_present;
    SDL_Boolean  tqi_present;
    z_ctypes_8_UnsignedShortInt  tqi;
    z_ctypes_A_UnsignedLongInt  tlli;
    PACKET_REQ_REF_T  req_ref;
} REF_ADDR_T;


typedef struct HCS_PARS_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  gprs_priority_class;
    SDL_Octet  gprs_hsc_thr;
} HCS_PARS_T;


typedef struct SI13_PBCCH_LOCATION_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  location_type;
    SDL_Boolean  si13_location;
    SDL_Octet  pbcch_location;
    SDL_Octet  psi1_repeat_period;
} SI13_PBCCH_LOCATION_T;


typedef struct CELL_SELECTION_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  exc_acc;
    SDL_Octet  bsic;
    SDL_Octet  cell_bar_access_2;
    SDL_Boolean  same_ra_as_serv_cell;
    SDL_Boolean  gprs_rxlev_acc_min_present;
    SDL_Octet  gprs_rxlev_acc_min;
    SDL_Octet  gprs_ms_txpwr_max_cch;
    SDL_Boolean  gprs_temp_offset_present;
    SDL_Octet  gprs_temp_offset;
    SDL_Octet  gprs_penalty_time;
    SDL_Boolean  gprs_resel_offset_present;
    SDL_Octet  gprs_resel_offset;
    HCS_PARS_T  hcs_pars;
    SI13_PBCCH_LOCATION_T  si13_pbcch_location;
} CELL_SELECTION_T;


typedef struct FREQ_DIFF_LIST_T_s {
    SDL_Octet  freq_diff;
    SDL_Octet  bsic;
    CELL_SELECTION_T  cell_selection;
} FREQ_DIFF_LIST_T;


typedef struct NC_FREQ_LIST_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  rem_freq_present;
    SDL_Octet  nr_of_rem_freq;
    REMOVED_FREQ_PTR  rem_freq;
    ADD_FREQ_LIST_PTR  add_freq_list;
} NC_FREQ_LIST_T;


typedef struct NC_MEAS_PARS_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  nw_ctrl_order;
    SDL_Boolean  nc_non_drx_period_present;
    SDL_Octet  nc_non_drx_period;
    SDL_Octet  nc_reporting_period_i;
    SDL_Octet  nc_reporting_period_t;
    NC_FREQ_LIST_T  nc_freq_list;
} NC_MEAS_PARS_T;


typedef struct GLOBAL_PACKET_TIMING_ADVANCE_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  ta_value_present;
    SDL_Octet  ta_value;
    SDL_Boolean  ul_ta_index_present;
    SDL_Octet  ul_ta_index;
    SDL_Octet  ul_ta_timeslot_nbr;
    SDL_Boolean  dl_ta_index_present;
    SDL_Octet  dl_ta_index;
    SDL_Octet  dl_ta_timeslot_nbr;
} GLOBAL_PACKET_TIMING_ADVANCE_T;


typedef struct PACKET_TIMING_ADVANCE_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  ta_value_present;
    SDL_Octet  ta_value;
    SDL_Boolean  ta_index_present;
    SDL_Octet  ta_index;
    SDL_Octet  ta_timeslot_nbr;
} PACKET_TIMING_ADVANCE_T;


typedef struct INDIRECT_ENCODING_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  maio;
    SDL_Octet  ma_number;
    SDL_Boolean  ma_change_mark1_present;
    SDL_Octet  ma_change_mark1;
    SDL_Boolean  ma_change_mark2_present;
    SDL_Octet  ma_change_mark2;
} INDIRECT_ENCODING_T;


typedef SDL_Octet RFL_NUMBER_ARRAY_T[MAC_MAX_NR_OF_RFL_NUMBER];


typedef struct RFL_NUMBER_LIST_T_s {
    SDL_Octet  rfl_nbr_count;
    RFL_NUMBER_ARRAY_T  rfl_nbr;
} RFL_NUMBER_LIST_T;


typedef SDL_Octet ARFCN_INDEX_ARRAY_T[MAC_MAX_NR_OF_ARFCN_INDEX];


typedef struct ARFCN_INDEX_LIST_T_s {
    SDL_Octet  arfcn_index_count;
    ARFCN_INDEX_ARRAY_T  arfcn_index;
} ARFCN_INDEX_LIST_T;


typedef SDL_Octet MAC_MS_PAR_IMEI_ARR_T[SDL_INTEGER_LIT(8)];


typedef SDL_Octet MAC_MA_BITMAP_T[SDL_INTEGER_LIT(8)];


typedef struct GPRS_MOBILE_ALLOCATION_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  hsn;
    SDL_Boolean  rfl_nbr_list_present;
    RFL_NUMBER_LIST_T  rfl_nbr_list;
    SDL_Boolean  ma_bitmap_present;
    SDL_Octet  ma_length;
    MAC_MA_BITMAP_T  ma_bitmap;
    ARFCN_INDEX_LIST_T  arfcn_index_list;
} GPRS_MOBILE_ALLOCATION_T;


typedef struct DIRECT_ENCODING_1_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  maio;
    GPRS_MOBILE_ALLOCATION_T  mobile_alloc;
} DIRECT_ENCODING_1_T;


typedef SDL_Octet RFL_ARR_T[SDL_INTEGER_LIT(18)];


typedef struct DIRECT_ENCODING_2_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  maio;
    SDL_Octet  hsn;
    SDL_Octet  length;
    RFL_ARR_T  ma_freq_list;
} DIRECT_ENCODING_2_T;


typedef struct FREQ_PARS_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  tsc;
    SDL_Octet  selector;
    z_ctypes_8_UnsignedShortInt  arfcn;
    INDIRECT_ENCODING_T  indirect;
    DIRECT_ENCODING_1_T  direct_1;
    DIRECT_ENCODING_2_T  direct_2;
} FREQ_PARS_T;


typedef struct GAMMA_VALUE_T_s {
    SDL_Boolean  present;
    SDL_Octet  gamma;
} GAMMA_VALUE_T;


typedef GAMMA_VALUE_T GAMMA_VALUE_ARR_T[MAC_NR_OF_TIMESLOTS];


typedef struct POWER_CTRL_PARAMS_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  alpha_present;
    SDL_Octet  alpha;
    GAMMA_VALUE_ARR_T  gamma_value_list;
} POWER_CTRL_PARAMS_T;


typedef struct MEAS_MAPPING_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  meas_interval;
    SDL_Octet  meas_bitmap;
    START_FRAME_NUMBER_T  meas_start_time;
} MEAS_MAPPING_T;


typedef struct MAC_MS_PAR_IMEI_T_s {
    SDL_Octet  length;
    MAC_MS_PAR_IMEI_ARR_T  data;
} MAC_MS_PAR_IMEI_T;


typedef SDL_Octet IMEISV_VALUE_ARR_T[MAC_IMEISV_LENGTH];


typedef struct MS_IDENTITY_IMEISV_T_s {
    IMEISV_VALUE_ARR_T  data;
} MS_IDENTITY_IMEISV_T;


typedef struct MS_IDENTITY_T_s {
    SDL_Octet  ie_present;
    SDL_Octet  identity_type;
    MAC_MS_PAR_IMEI_T  imei;
    MS_IDENTITY_IMEISV_T  imeisv;
    IMSI_T  imsi;
    P_TMSI_T  ptmsi;
    TMSI_T  tmsi;
} MS_IDENTITY_T;


typedef struct RR_CON_EST_TYPE_T_s {
    SDL_Boolean  tmsi_present;
    SDL_Octet  mobile_identity_len;
    MS_IDENTITY_T  mobile_identity;
    TMSI_T  tmsi;
    SDL_Octet  channel_needed;
    SDL_Boolean  rr_priority_present;
    SDL_Octet  rr_priority;
} RR_CON_EST_TYPE_T;


typedef struct TBF_CON_EST_TYPE_T_s {
    SDL_Boolean  ptmsi_present;
    SDL_Octet  mobile_identity_len;
    P_TMSI_T  ptmsi;
    MS_IDENTITY_T  mobile_identity;
} TBF_CON_EST_TYPE_T;


typedef struct GLOBAL_POWER_CTRL_PARAMS_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  alpha;
    SDL_Octet  t_avg_w;
    SDL_Octet  t_avg_t;
    SDL_Octet  pb;
    SDL_Boolean  pc_meas_chan;
    SDL_Boolean  int_meas_ch_list_avail;
    SDL_Octet  n_avg_i;
} GLOBAL_POWER_CTRL_PARAMS_T;


typedef SDL_Octet PERSIST_LEVEL_T[SDL_INTEGER_LIT(4)];


typedef SDL_Octet MAX_RETRANS_T[SDL_INTEGER_LIT(4)];


typedef struct PRACH_CTRL_PARAMETERS_T_s {
    z_ctypes_8_UnsignedShortInt  acc_ctrl_class;
    SDL_Octet  s;
    SDL_Octet  tx_init;
    MAX_RETRANS_T  max_retrans;
    SDL_Boolean  presist_level_present;
    PERSIST_LEVEL_T  presist_level;
} PRACH_CTRL_PARAMETERS_T;


typedef struct SERVING_CELL_PARS_T_s {
    SDL_Octet  cell_bar_access_2;
    SDL_Boolean  exc_acc;
    SDL_Octet  gprs_rxlev_acc_min;
    SDL_Octet  gprs_ms_txpwr_max_cch;
    HCS_PARS_T  hcs_pars;
    SDL_Octet  multiband_reporting;
} SERVING_CELL_PARS_T;


typedef struct GENERAL_CELL_SEL_PARS_T_s {
    SDL_Octet  gprs_cell_resel_hyst;
    SDL_Boolean  gprs_cell_resel_hyst_present;
    SDL_Octet  c31_hyst;
    SDL_Octet  c32_qual;
    SDL_Boolean  rand_acc_retry;
    SDL_Boolean  t_resel_present;
    SDL_Octet  t_resel;
    SDL_Boolean  ra_reselect_hyst_present;
    SDL_Octet  ra_reselect_hyst;
} GENERAL_CELL_SEL_PARS_T;


typedef struct NEIGHBOUR_LIST_T_s {
    SDL_Octet  freq_diff;
    CELL_SELECTION_T  cell_selection;
} NEIGHBOUR_LIST_T;


typedef struct FREQ_DIFF_SET_T_s {
    SDL_Octet  freq_diff;
    SDL_Boolean  same_ra_as_serv_cell;
    SDL_Octet  cell_bar_access_2;
    SDL_Octet  bcc;
} FREQ_DIFF_SET_T;


typedef struct NEIGHBOUR_PAR_SET_T_s {
    SDL_Boolean  ncc_present;
    SDL_Octet  ncc;
    SDL_Octet  exc_acc;
    SDL_Boolean  gprs_rxlev_acc_min_present;
    SDL_Octet  gprs_rxlev_acc_min;
    SDL_Boolean  gprs_ms_txpwr_max_cch_present;
    SDL_Octet  gprs_ms_txpwr_max_cch;
    SDL_Boolean  gprs_priority_class_present;
    SDL_Octet  gprs_priority_class;
    SDL_Boolean  gprs_hsc_thr_present;
    SDL_Octet  gprs_hsc_thr;
    SI13_PBCCH_LOCATION_T  si13_pbcch_location;
    SDL_Octet  gprs_temp_offset;
    SDL_Octet  gprs_penalty_time;
    SDL_Octet  gprs_resel_offset;
} NEIGHBOUR_PAR_SET_T;


typedef struct CHANNEL_GROUP_T_s {
    SDL_Boolean  type;
    SDL_Octet  ma_number;
    z_ctypes_8_UnsignedShortInt  arfcn;
    SDL_Octet  maio;
    SDL_Octet  ts_allocation;
} CHANNEL_GROUP_T;


typedef struct EXT_MEAS_PARS_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  ext_meas_order;
    SDL_Octet  ncc_permitted;
    SDL_Boolean  int_freq_present;
    SDL_Octet  int_freq;
    SDL_Boolean  ext_rep_type_present;
    SDL_Octet  ext_rep_type;
    SDL_Octet  ext_rep_period;
    EXT_FREQ_LIST_PTR  freq_list;
} EXT_MEAS_PARS_T;


typedef struct GPRS_POWER_CTRL_PARAMS_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  alpha;
    SDL_Octet  t_avg_w;
    SDL_Octet  t_avg_t;
    SDL_Octet  pc_meas_chan;
    SDL_Octet  n_avg_i;
} GPRS_POWER_CTRL_PARAMS_T;


typedef struct PBCCH_DESCR_T_s {
    SDL_Octet  pb;
    SDL_Octet  tsc;
    SDL_Octet  tn;
    SDL_Octet  selector;
    z_ctypes_8_UnsignedShortInt  arfcn;
    SDL_Octet  maio;
} PBCCH_DESCR_T;


typedef struct GPRS_CELL_OPTIONS_T_s {
    SDL_Octet  nmo;
    SDL_Octet  t3168;
    SDL_Octet  t3192;
    SDL_Octet  drx_timer_max;
    SDL_Octet  access_burst_type;
    SDL_Octet  ctrl_ack_type;
    SDL_Octet  bs_cv_max;
    SDL_Boolean  pan_present;
    SDL_Octet  pan_dec;
    SDL_Octet  pan_inc;
    SDL_Octet  pan_max;
} GPRS_CELL_OPTIONS_T;


typedef struct PCCCH_ORAGANIZATION_PARAMETERS_T_s {
    SDL_Boolean  bs_pcc_rel;
    SDL_Octet  bs_pbcch_blks;
    SDL_Octet  bs_pag_blks_res;
    SDL_Octet  bs_prach_blks;
} PCCCH_ORAGANIZATION_PARAMETERS_T;


typedef SDL_Octet OCTET_2_ARR_T[SDL_INTEGER_LIT(2)];


typedef struct LOCATION_AREA_ID_T_s {
    OCTET_2_ARR_T  mcc;
    OCTET_2_ARR_T  lac;
    SDL_Octet  mnc;
} LOCATION_AREA_ID_T;


typedef struct CELL_IDENTIFICATION_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  rac;
    z_ctypes_8_UnsignedShortInt  cell_id_value;
    LOCATION_AREA_ID_T  lai;
} CELL_IDENTIFICATION_T;


typedef struct NON_GPRS_CELL_OPT_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  att_bit;
    SDL_Boolean  t3212_present;
    SDL_Octet  t3212;
    SDL_Octet  neci_bit;
    SDL_Octet  pwrc_bit;
    SDL_Octet  dtx;
    SDL_Octet  radio_link_timeout;
    SDL_Octet  bs_ag_blks_res;
    SDL_Octet  ccch_conf;
    SDL_Octet  bs_pa_mfrms;
    SDL_Octet  max_retrans;
    SDL_Octet  tx_integer;
    SDL_Octet  ec;
    SDL_Octet  ms_txpwr_max_ccch;
} NON_GPRS_CELL_OPT_T;


typedef struct REFERENCED_FREQ_LIST_T_s {
    SDL_Octet  rfl_nbr;
    SDL_Octet  length;
    RFL_ARR_T  rfl_contents;
} REFERENCED_FREQ_LIST_T;


typedef struct PCCCH_CARRIERS_T_s {
    z_ctypes_8_UnsignedShortInt  arfcn_or_maio;
    SDL_Octet  timeslot_allocation;
} PCCCH_CARRIERS_T;


typedef PCCCH_CARRIERS_T PCCCH_CARRIERS_ARR_T[SDL_INTEGER_LIT(16)];


typedef struct NON_HOPPING_CARRIERS_T_s {
    SDL_Octet  non_hopping_count;
    PCCCH_CARRIERS_ARR_T  non_hopping;
} NON_HOPPING_CARRIERS_T;


typedef struct HOPPING_CARRIERS_T_s {
    SDL_Octet  hopping_count;
    PCCCH_CARRIERS_ARR_T  hopping;
} HOPPING_CARRIERS_T;


typedef struct PCCCH_DESCRIPTION_T_s {
    SDL_Octet  tsc;
    SDL_Boolean  carrier_type;
    SDL_Octet  ma_number;
    NON_HOPPING_CARRIERS_T  non_hopping_carriers;
    HOPPING_CARRIERS_T  hopping_carriers;
} PCCCH_DESCRIPTION_T;


typedef struct SINGLE_BLOCK_ALLOC_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  timeslot_number;
    SDL_Boolean  alpha_present;
    SDL_Octet  alpha;
    SDL_Boolean  p0_present;
    SDL_Octet  p0;
    SDL_Octet  bts_pwr_ctrl_mode;
    SDL_Octet  pr_mode;
    SDL_Octet  gamma_tn;
    START_FRAME_NUMBER_T  tbf_starting_time;
} SINGLE_BLOCK_ALLOC_T;


typedef struct USF_VALUE_T_s {
    SDL_Boolean  present;
    SDL_Octet  usf;
} USF_VALUE_T;


typedef USF_VALUE_T USF_VALUE_LIST_T[SDL_INTEGER_LIT(8)];


typedef struct DYNAMIC_ALLOC_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  extended_dynamic_alloc;
    SDL_Boolean  p0_present;
    SDL_Octet  p0;
    SDL_Octet  pr_mode;
    SDL_Boolean  ul_tfi_assignment_present;
    SDL_Octet  ul_tfi_assignment;
    SDL_Boolean  rlc_data_blocks_granted_present;
    z_ctypes_8_UnsignedShortInt  rlc_data_blocks_granted;
    SDL_Boolean  tbf_starting_time_present;
    START_FRAME_NUMBER_T  tbf_starting_time;
    SDL_Boolean  tslot_alloc_present;
    SDL_Boolean  usf_granularity;
    USF_VALUE_LIST_T  usf_value_list;
    POWER_CTRL_PARAMS_T  pwr_ctrl_params;
} DYNAMIC_ALLOC_T;


typedef struct TIMESLOT_VALUES_T_s {
    SDL_Boolean  value_present;
    SDL_Octet  value;
} TIMESLOT_VALUES_T;


typedef TIMESLOT_VALUES_T TIMESLOT_VALUES_ARR_T[MAC_NR_OF_TIMESLOTS];


typedef struct LLC_PDU_T_T_s {
    SDL_Boolean  cellUpdate;
    SDL_Boolean  data;
    SDL_Boolean  mmPdu;
    SDL_Boolean  pageResp;
    z_ctypes_6_ShortInt  sackNack;
} LLC_PDU_T_T;


typedef struct CHANNEL_REQUEST_DESCR_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  peak_throughput_class;
    SDL_Octet  radio_priority;
    SDL_Octet  rlc_mode;
    LLC_PDU_T_T  llc_pdu_type;
    z_ctypes_8_UnsignedShortInt  rlc_octet_count;
} CHANNEL_REQUEST_DESCR_T;


typedef struct NC_MEAS_LIST_T_s {
    SDL_Octet  freq_n;
    SDL_Boolean  bsic_n_present;
    SDL_Octet  bsic_n;
    SDL_Octet  rxlev_n;
} NC_MEAS_LIST_T;


typedef NC_MEAS_LIST_T NC_MEAS_LIST_ARR_T[MAC_MAX_NR_OF_NC_MEASUREMENTS];


typedef struct NC_MEAS_REPORT_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  nc_mode;
    SDL_Octet  rxlev_serv_cell;
    SDL_Boolean  interference_serv_cell_present;
    SDL_Octet  interference_serv_cell;
    SDL_Octet  nr_of_meas;
    NC_MEAS_LIST_ARR_T  nc_meas_list;
} NC_MEAS_REPORT_T;


typedef struct EXT_MEAS_LIST_T_s {
    SDL_Octet  freq_n;
    SDL_Boolean  bsic_present;
    SDL_Octet  bsic_n;
    SDL_Octet  rxlev_n;
} EXT_MEAS_LIST_T;


typedef EXT_MEAS_LIST_T EXT_MEAS_LIST_ARR_T[MAC_MAX_NR_OF_EXT_MEASUREMENTS];


typedef struct EXT_MEAS_REPORT_T_s {
    SDL_Octet  ext_report_type;
    SDL_Boolean  ts_values_present;
    SDL_Octet  nr_of_meas;
    TIMESLOT_VALUES_ARR_T  ts_values;
    EXT_MEAS_LIST_ARR_T  ext_meas_list;
} EXT_MEAS_REPORT_T;


typedef struct BA_USED_PSI3_CHANGE_MARK_T_s {
    SDL_Boolean  ba_used_psi3_change_mark_present;
    SDL_Boolean  ba_used_present;
    SDL_Boolean  ba_used;
    SDL_Boolean  ba_3g_used;
    SDL_Octet  psi3_change_mark;
    SDL_Boolean  pmo_used;
} BA_USED_PSI3_CHANGE_MARK_T;


typedef struct PACKET_ACCESS_REJECT_T_s {
    SDL_Octet  recv_tsn;
    SDL_Octet  page_mode;
    REJECT_LIST_PTR  reject_list;
} PACKET_ACCESS_REJECT_T;


typedef struct PACKET_CELL_CHANGE_ORDER_T_s {
    SDL_Octet  page_mode;
    SDL_Boolean  immediate_rel;
    z_ctypes_8_UnsignedShortInt  arfcn;
    REF_ADDR_T  ref_addr;
    SDL_Octet  bsic;
    NC_MEAS_PARS_T  nc_meas_pars;
} PACKET_CELL_CHANGE_ORDER_T;


typedef SDL_Octet REDUCED_MA_BITMAP_T[SDL_INTEGER_LIT(16)];


typedef struct COMPACT_REDUCED_MA_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  maio_2_present;
    SDL_Octet  maio_2;
    SDL_Octet  reduced_ma_bitmap_length;
    REDUCED_MA_BITMAP_T  reduced_ma_bitmap;
} COMPACT_REDUCED_MA_T;


typedef struct PACKET_DL_DUMMY_CTRL_BLOCK_T_s {
    SDL_Octet  page_mode;
    SDL_Boolean  persistence_level_present;
    PERSIST_LEVEL_T  persistence_level;
} PACKET_DL_DUMMY_CTRL_BLOCK_T;


typedef struct PACKET_MEAS_ORDER_T_s {
    SDL_Octet  page_mode;
    SDL_Boolean  tlli_present;
    z_ctypes_A_UnsignedLongInt  tlli;
    GLOBAL_TFI_T  global_tfi;
    SDL_Octet  pmo_index;
    SDL_Octet  pmo_count;
    NC_MEAS_PARS_T  nc_meas_pars;
    EXT_MEAS_PARS_T  ext_meas_pars;
} PACKET_MEAS_ORDER_T;


typedef RR_CON_EST_TYPE_T RR_CON_EST_TYPE_ARR_T[SDL_INTEGER_LIT(4)];


typedef TBF_CON_EST_TYPE_T TBF_CON_EST_TYPE_ARR_T[SDL_INTEGER_LIT(4)];


typedef struct PACKET_PAGING_REQUEST_T_s {
    SDL_Octet  page_mode;
    SDL_Boolean  persistence_level_present;
    PERSIST_LEVEL_T  persistence_level;
    SDL_Boolean  nln_present;
    SDL_Octet  nln;
    SDL_Octet  nr_of_rr_pages;
    SDL_Octet  nr_of_tbf_pages;
    RR_CON_EST_TYPE_ARR_T  rr_pages;
    TBF_CON_EST_TYPE_ARR_T  tbf_pages;
} PACKET_PAGING_REQUEST_T;


typedef struct PACKET_PDCH_RELEASE_T_s {
    SDL_Octet  page_mode;
    SDL_Boolean  time_slot_available_present;
    SDL_Octet  time_slot_available;
} PACKET_PDCH_RELEASE_T;


typedef struct PACKET_POLLING_REQUEST_T_s {
    SDL_Octet  page_mode;
    SDL_Boolean  tqi_present;
    z_ctypes_8_UnsignedShortInt  tqi;
    SDL_Octet  type_of_ack;
    SDL_Boolean  tlli_present;
    z_ctypes_A_UnsignedLongInt  tlli;
    GLOBAL_TFI_T  global_tfi;
} PACKET_POLLING_REQUEST_T;


typedef struct PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T_s {
    REF_ADDR_T  ref_addr;
    GLOBAL_POWER_CTRL_PARAMS_T  global_pwr_ctrl_pars;
    GLOBAL_PACKET_TIMING_ADVANCE_T  global_timing_advance;
    POWER_CTRL_PARAMS_T  pwr_ctrl_pars;
    SDL_Boolean  additions_present;
    SDL_Boolean  packet_extended_timing_advance_present;
    SDL_Octet  packet_extended_timing_advance;
    SDL_Octet  page_mode;
} PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T;


typedef struct PACKET_PRACH_PARAMETERS_T_s {
    SDL_Octet  page_mode;
    PRACH_CTRL_PARAMETERS_T  ctrl_params;
} PACKET_PRACH_PARAMETERS_T;


typedef struct PACKET_QUEUEING_NOTIFICATION_T_s {
    SDL_Octet  page_mode;
    z_ctypes_8_UnsignedShortInt  tqi;
    PACKET_REQ_REF_T  req_ref;
} PACKET_QUEUEING_NOTIFICATION_T;


typedef struct PACKET_SYS_INFO_1_T_s {
    SDL_Octet  page_mode;
    SDL_Octet  pbcch_change_mark;
    SDL_Octet  psi_change_field;
    SDL_Octet  psi1_repeat_period;
    SDL_Octet  psi1_count_lr;
    SDL_Boolean  psi1_count_hr_present;
    SDL_Octet  psi1_count_hr;
    SDL_Octet  meas_order;
    GPRS_CELL_OPTIONS_T  cell_options;
    PRACH_CTRL_PARAMETERS_T  ctrl_pars;
    PCCCH_ORAGANIZATION_PARAMETERS_T  organization_pars;
    GLOBAL_POWER_CTRL_PARAMS_T  global_pwr_ctrl_pars;
    SDL_Octet  psi_status_ind;
} PACKET_SYS_INFO_1_T;


typedef struct PACKET_SYS_INFO_2_T_s {
    SDL_Octet  page_mode;
    SDL_Octet  psi2_change_mark;
    SDL_Octet  psi2_index;
    SDL_Octet  psi2_count;
    CELL_IDENTIFICATION_T  cell_identification;
    NON_GPRS_CELL_OPT_T  non_gprs_cell_opt;
    REFERENCED_FREQ_LIST_PTR  ref_freq_list;
    CELL_ALLOCATION_LIST_PTR  cell_allocation;
    GPRS_MOBILE_ALLOCTIONS_PTR  gprs_alloc_list;
    PCCCH_DESCRIPTION_PTR  pccch_descr_list;
} PACKET_SYS_INFO_2_T;


typedef struct PACKET_SYS_INFO_3_T_s {
    SDL_Octet  page_mode;
    SDL_Octet  psi3_change_mark;
    SDL_Octet  psi3_bis_count;
    SERVING_CELL_PARS_T  serv_cell_params;
    GENERAL_CELL_SEL_PARS_T  gen_cell_sel_params;
    NEIGHBOUR_CELL_PARS_PTR  neighbour_cell_list;
} PACKET_SYS_INFO_3_T;


typedef struct PACKET_SYS_INFO_3_BIS_T_s {
    SDL_Octet  page_mode;
    SDL_Octet  psi3_change_mark;
    SDL_Octet  psi3_bis_index;
    SDL_Octet  psi3_bis_count;
    NEIGHBOUR_CELL_PARS_PTR  nc_list;
    NEIGHBOUR_CELL_PARS_2_PTR  nc_2_list;
} PACKET_SYS_INFO_3_BIS_T;


typedef struct PACKET_SYS_INFO_4_T_s {
    SDL_Octet  page_mode;
    SDL_Octet  psi4_change_mark;
    SDL_Octet  psi4_index;
    SDL_Octet  psi4_count;
    CHANNEL_GROUP_PTR  channel_list;
} PACKET_SYS_INFO_4_T;


typedef struct PACKET_SYS_INFO_5_T_s {
    SDL_Octet  page_mode;
    SDL_Octet  psi5_change_mark;
    SDL_Octet  psi5_index;
    SDL_Octet  psi5_count;
    NC_MEAS_PARS_T  nc_meas_pars;
    EXT_MEAS_PARS_T  ext_meas_pars;
} PACKET_SYS_INFO_5_T;


typedef struct PACKET_SYS_INFO_13_T_s {
    SDL_Octet  page_mode;
    SDL_Octet  bcch_change_mark;
    SDL_Octet  si_change_field;
    SDL_Boolean  si13_change_mark_present;
    SDL_Octet  si13_change_mark;
    SDL_Boolean  pbcch_present_in_cell;
    SDL_Octet  rac;
    SDL_Boolean  spgc_ccch_sup;
    SDL_Octet  priority_access_thr;
    SDL_Octet  nw_ctrl_order;
    SDL_Octet  psi1_repeat_period;
    GPRS_MOBILE_ALLOCATION_T  gprs_mobile_alloc;
    GPRS_CELL_OPTIONS_T  gprs_cell_opt;
    GPRS_POWER_CTRL_PARAMS_T  gprs_pwr_ctrl_pars;
    PBCCH_DESCR_T  pbcch_descr;
} PACKET_SYS_INFO_13_T;


typedef struct PACKET_TBF_RELEASE_T_s {
    SDL_Octet  page_mode;
    SDL_Boolean  uplink_release;
    SDL_Boolean  downlink_release;
    SDL_Octet  tbf_rel_cause;
    GLOBAL_TFI_T  global_tfi;
} PACKET_TBF_RELEASE_T;


typedef SDL_Octet URBB_ARR_T[MAC_MAX_UNCOMPRESSED_BITMAP_BYTES_LEN];


typedef SDL_Octet CRBB_ARR_T[MAC_MAX_COMPRESSED_BITMAP_BYTES_LEN];


typedef struct E_ACK_NACK_DESCR_T_s {
    SDL_Boolean  length_present;
    SDL_Octet  length;
    SDL_Boolean  final_ack_ind;
    SDL_Boolean  is_bow;
    SDL_Boolean  is_eow;
    z_ctypes_8_UnsignedShortInt  ssn;
    SDL_Boolean  is_compressed;
    SDL_Octet  crbb_len;
    SDL_Octet  urbb_len;
    SDL_Boolean  comp_bitmap_start_color_code;
    CRBB_ARR_T  crbb;
    URBB_ARR_T  urbb;
} E_ACK_NACK_DESCR_T;


typedef SDL_Octet ACCESS_TECH_TYPE_ARR_T[MAC_MAX_ACCESS_TECH_TYPE_NUM];


typedef struct ACCESS_TECH_REQ_T_s {
    SDL_Octet  num;
    ACCESS_TECH_TYPE_ARR_T  access_tech_type;
} ACCESS_TECH_REQ_T;


typedef struct MULTI_BLOCK_ALLOC_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  timeslot_number;
    SDL_Boolean  alpha_present;
    SDL_Octet  alpha;
    SDL_Boolean  p0_present;
    SDL_Octet  p0;
    SDL_Octet  bts_pwr_ctrl_mode;
    SDL_Octet  pr_mode;
    SDL_Octet  gamma_tn;
    START_FRAME_NUMBER_T  tbf_starting_time;
    SDL_Octet  alloc_radio_blocks_num;
} MULTI_BLOCK_ALLOC_T;


typedef struct PACKET_CTRL_ACK_T_s {
    z_ctypes_A_UnsignedLongInt  tlli;
    SDL_Octet  ctrl_ack;
} PACKET_CTRL_ACK_T;


typedef struct PACKET_CELL_CHANGE_FAILURE_T_s {
    z_ctypes_A_UnsignedLongInt  tlli;
    z_ctypes_8_UnsignedShortInt  arfcn;
    SDL_Octet  bsic;
    SDL_Octet  cause;
    SDL_Boolean  is_r99;
    SDL_Boolean  tdd_ind;
    SDL_Boolean  fdd_ind;
} PACKET_CELL_CHANGE_FAILURE_T;


typedef struct PACKET_CHANNEL_REQUEST_T_s {
    SDL_Octet  access_burst_type;
    SDL_Octet  access_type;
    SDL_Octet  multislot_class;
    SDL_Octet  radio_priority;
    SDL_Octet  nbr_of_blocks;
    SDL_Octet  random_ref;
} PACKET_CHANNEL_REQUEST_T;


typedef struct EGPRS_PACKET_CHANNEL_REQUEST_T_s {
    z_ctypes_6_ShortInt  access_type;
    SDL_Octet  egprs_multislot_class;
    SDL_Octet  radio_priority;
    SDL_Octet  nbr_of_blocks;
    SDL_Octet  random_ref;
} EGPRS_PACKET_CHANNEL_REQUEST_T;


typedef struct PACKET_UL_DUMMY_CTRL_BLOCK_T_s {
    z_ctypes_A_UnsignedLongInt  tlli;
} PACKET_UL_DUMMY_CTRL_BLOCK_T;


typedef struct PACKET_MEASUREMENT_REPORT_T_s {
    z_ctypes_A_UnsignedLongInt  tlli;
    SDL_Boolean  psi5_change_mark_present;
    SDL_Octet  psi5_change_mark;
    NC_MEAS_REPORT_T  nc_meas_rep;
    EXT_MEAS_REPORT_T  ext_meas_rep;
    SDL_Boolean  is_r99;
    BA_USED_PSI3_CHANGE_MARK_T  ba_used_psi3_change_mark;
    SDL_Boolean  meas_3g_rep_present;
} PACKET_MEASUREMENT_REPORT_T;


typedef struct PACKET_ENHANCED_MEASUREMENT_REPORT_T_s {
    z_ctypes_A_UnsignedLongInt  tlli;
    NC_MEAS_REPORT_T  nc_meas_rep;
} PACKET_ENHANCED_MEASUREMENT_REPORT_T;


typedef struct PACKET_MOBILE_TBF_STATUS_T_s {
    GLOBAL_TFI_T  global_tfi;
    SDL_Octet  tbf_cause;
    SDL_Boolean  status_msg_type_present;
    SDL_Octet  status_msg_type;
} PACKET_MOBILE_TBF_STATUS_T;


typedef struct TS_BEP_T_s {
    SDL_Boolean  value_present;
    SDL_Boolean  is_psk8;
    SDL_Octet  gmsk_mean_bep_tn;
    SDL_Octet  psk8_mean_bep_tn;
} TS_BEP_T;


typedef TS_BEP_T TS_BEP_ARR_T[MAC_NR_OF_TIMESLOTS];


typedef struct E_TS_LINK_QUAL_MEAS_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  bep_meas_present;
    SDL_Boolean  interf_meas_present;
    TS_BEP_ARR_T  ts_bep_val;
    TIMESLOT_VALUES_ARR_T  ts_interf_val;
} E_TS_LINK_QUAL_MEAS;


typedef struct E_BEP_LINK_QUAL_MEAS_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  gmsk_val_present;
    SDL_Boolean  psk8_val_present;
    SDL_Octet  gmsk_mean_bep;
    SDL_Octet  gmsk_cv_bep;
    SDL_Octet  psk8_mean_bep;
    SDL_Octet  psk8_cv_bep;
} E_BEP_LINK_QUAL_MEAS;


typedef struct PSI_MSG_ELEM_T_s {
    SDL_Octet  msg_type;
    SDL_Octet  psix_change_mark;
    SDL_Boolean  psix_count_present;
    SDL_Octet  psix_count;
    z_ctypes_8_UnsignedShortInt  instance_bitmap;
} PSI_MSG_ELEM_T;


typedef PSI_MSG_ELEM_T PSI_MSG_ELEM_ARR_T[MAC_MAX_PSI_MSG_ELEM_COUNT];


typedef struct PSI_MSG_LIST_T_s {
    SDL_Octet  msg_type_count;
    SDL_Octet  additional_msg_type;
    PSI_MSG_ELEM_ARR_T  msg_type_list;
} PSI_MSG_LIST_T;


typedef struct UNKNOWN_PSI_MSG_LIST_T_s {
    SDL_Octet  msg_type_count;
    SDL_Octet  additional_msg_type;
    MAC_MSG_BLOCK_ARR_T  msg_type_list;
} UNKNOWN_PSI_MSG_LIST_T;


typedef struct PACKET_PSI_STATUS_T_s {
    GLOBAL_TFI_T  global_tfi;
    SDL_Octet  pbcch_change_mark;
    PSI_MSG_LIST_T  received_psi_msg_list;
    UNKNOWN_PSI_MSG_LIST_T  unknown_received_psi_msg_list;
} PACKET_PSI_STATUS_T;


typedef struct PACKET_CTRL_ACK_11_T_s {
    z_ctypes_8_UnsignedShortInt  message_type;
    SDL_Octet  ctrl_ack;
} PACKET_CTRL_ACK_11_T;


typedef struct PACKET_CTRL_ACK_8_T_s {
    SDL_Octet  message_type;
    SDL_Octet  ctrl_ack;
} PACKET_CTRL_ACK_8_T;


typedef struct P0_BTS_PR_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  p0;
    SDL_Octet  bts_pwr_ctrl_mode;
    SDL_Octet  pr_mode;
} P0_BTS_PR_T;


typedef struct SECOND_PART_PACKET_ASSIGNMENT_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  h_present;
    SDL_Boolean  extended_ra_present;
    SDL_Octet  extended_ra;
} SECOND_PART_PACKET_ASSIGNMENT_T;


typedef SDL_Octet BITMAP_ARR_T[SDL_INTEGER_LIT(16)];


typedef struct PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  one_phase_present;
    SDL_Octet  tfi_assignment;
    SDL_Octet  polling;
    SDL_Boolean  dynamic_allication_present;
    SDL_Octet  usf;
    SDL_Octet  usf_granularity;
    SDL_Boolean  p0_dynamic_present;
    SDL_Octet  p0_dynamic;
    SDL_Octet  pr_mode_dynamic;
    SDL_Boolean  fixed_allocation_present;
    SDL_Octet  allocation_bitmap_length;
    BITMAP_ARR_T  allocation_bitmap;
    P0_BTS_PR_T  p0_bts_pr_fixed;
    SDL_Octet  channel_coding_command;
    SDL_Octet  tlli_block_channel_coding;
    SDL_Boolean  alpha_present;
    SDL_Octet  alpha;
    SDL_Octet  gamma;
    SDL_Boolean  timing_advance_index_present;
    SDL_Octet  timing_advance_index;
    SDL_Boolean  tbf_starting_time_one_phase_present;
    z_ctypes_8_UnsignedShortInt  tbf_starting_time_one_phase;
    SDL_Boolean  single_block_allocation_present;
    z_ctypes_8_UnsignedShortInt  tbf_starting_time_single_block;
    P0_BTS_PR_T  p0_bts_pr_single_block;
    SECOND_PART_PACKET_ASSIGNMENT_T  second_part_packet_assignment;
} PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T;


typedef struct PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T_s {
    SDL_Boolean  ie_present;
    SDL_Boolean  tfi_present;
    SDL_Octet  tfi_assignment;
    SDL_Octet  rlc_mode;
    z_ctypes_A_UnsignedLongInt  tlli;
    SDL_Boolean  alpha_present;
    SDL_Octet  alpha;
    SDL_Octet  gamma;
    SDL_Octet  polling;
    SDL_Octet  ta_valid;
    SDL_Boolean  timing_advance_index_present;
    SDL_Octet  timing_advance_index;
    SDL_Boolean  tbf_starting_time_present;
    z_ctypes_8_UnsignedShortInt  tbf_starting_time;
    SDL_Boolean  egprs_tbf_present;
    SDL_Octet  egprs_window_size;
    P0_BTS_PR_T  p0_bts_pr;
    SDL_Octet  link_quality_measurment_mode;
    SDL_Boolean  bep_period2_present;
    SDL_Octet  bep_period2;
} PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T;


typedef struct E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  extended_ra;
    SDL_Boolean  access_tech_req_present;
    ACCESS_TECH_REQ_T  access_tech_req;
    SDL_Boolean  one_phase_present;
    SDL_Octet  tfi_assignment;
    SDL_Octet  polling;
    SDL_Boolean  dynamic_allication_present;
    SDL_Octet  usf;
    SDL_Octet  usf_granularity;
    SDL_Boolean  p0_dynamic_present;
    SDL_Octet  p0_dynamic;
    SDL_Octet  pr_mode_dynamic;
    SDL_Boolean  fixed_allocation_present;
    SDL_Octet  allocation_bitmap_length;
    BITMAP_ARR_T  allocation_bitmap;
    P0_BTS_PR_T  p0_bts_pr_fixed;
    SDL_Octet  egprs_channel_coding_cmd;
    SDL_Octet  tlli_block_channel_coding;
    SDL_Boolean  bep_period2_present;
    SDL_Octet  bep_period2;
    SDL_Boolean  resegment;
    SDL_Octet  egprs_ws;
    SDL_Boolean  alpha_present;
    SDL_Octet  alpha;
    SDL_Octet  gamma;
    SDL_Boolean  timing_advance_index_present;
    SDL_Octet  timing_advance_index;
    SDL_Boolean  multi_block_allication_present;
    SDL_Boolean  tbf_starting_time_present;
    z_ctypes_8_UnsignedShortInt  tbf_starting_time;
    z_ctypes_8_UnsignedShortInt  tbf_starting_time_multi_block;
    SDL_Octet  radio_block_alloc_num;
    P0_BTS_PR_T  p0_bts_pr_multi_block;
} E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T;


typedef SDL_Octet z0VL_CA_62_X_uint8[SDL_INTEGER_LIT(62)];


typedef struct IA_REST_OCTETS_T_s {
    SDL_Boolean  lh_present;
    SDL_Boolean  hl_present;
    SDL_Octet  length_of_frequency_parameters;
    SDL_Octet  maio;
    SDL_Boolean  hh_present;
    z0VL_CA_62_X_uint8  mobile_allocation;
    PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T  packet_uplink_assignment_construction;
    PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T  packet_downlink_assignment_construction;
    SECOND_PART_PACKET_ASSIGNMENT_T  second_part_packet_assignment;
    E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T  egprs_packet_uplink_assignment_construction;
} IA_REST_OCTETS_T;


typedef struct PACKET_CHANNEL_DESCRIPTION_T_s {
    SDL_Octet  channel_type;
    SDL_Octet  tn;
    SDL_Octet  tsc;
    SDL_Boolean  zero_present;
    z_ctypes_8_UnsignedShortInt  arfcn;
    SDL_Boolean  arfcn_present;
    SDL_Boolean  indirect_encoding_present;
    SDL_Octet  maio_indirect;
    SDL_Octet  ma_number_ind;
    SDL_Boolean  change_mark_1_present;
    SDL_Octet  change_mark_1;
    SDL_Boolean  direct_encoding_present;
    SDL_Octet  maio_direct;
    SDL_Octet  hsn;
} PACKET_CHANNEL_DESCRIPTION_T;


typedef struct RR_PACKET_UPLINK_ASSIGNMENT_T_s {
    SDL_Octet  length_in_octets;
    SDL_Octet  ch_coding_command;
    SDL_Boolean  tlli_block_ch_coding;
    PACKET_TIMING_ADVANCE_T  timing_advance;
    DYNAMIC_ALLOC_T  dynamic_alloc;
    SINGLE_BLOCK_ALLOC_T  single_block_alloc;
    SDL_Boolean  additions_present;
    SDL_Boolean  egprs_content_present;
    SDL_Octet  e_mcs_mode;
    SDL_Boolean  resegment;
    SDL_Octet  egprs_ws;
    SDL_Boolean  pkt_ext_ta_present;
    SDL_Octet  pkt_ext_ta;
} RR_PACKET_UPLINK_ASSIGNMENT_T;


typedef struct RR_PACKET_DOWNLINK_ASSIGNMENT_T_s {
    SDL_Octet  length_in_octets;
    z_ctypes_6_ShortInt  mac_mode;
    SDL_Octet  rlc_mode;
    SDL_Octet  timeslot_alloc;
    PACKET_TIMING_ADVANCE_T  timing_advance;
    SDL_Boolean  p0_present;
    SDL_Octet  p0;
    SDL_Octet  bts_pwr_ctrl_mode;
    SDL_Octet  pr_mode;
    POWER_CTRL_PARAMS_T  pwr_ctrl_pars;
    SDL_Boolean  dl_tfi_assign_present;
    SDL_Octet  dl_tfi_assign;
    MEAS_MAPPING_T  meas_mapping;
    SDL_Boolean  compatible_content_present;
    SDL_Boolean  egprs_content_present;
    SDL_Octet  egprs_ws;
    SDL_Octet  link_qual_meas_mode;
    SDL_Boolean  pkt_ext_ta_present;
    SDL_Octet  pkt_ext_ta;
} RR_PACKET_DOWNLINK_ASSIGNMENT_T;


typedef union MAC_CONTROL_MESSAGE_T_s *MAC_CONTROL_MESSAGE_PTR_T;


typedef struct MAC_DECODE_INPUT_T_s {
    z_ctypes_8_UnsignedShortInt  length;
    OCTET_PTR_T  pdu;
    MAC_CONTROL_MESSAGE_PTR_T  ctrl_msg_ptr;
} MAC_DECODE_INPUT_T;


typedef struct MAC_DECODE_INPUT_T_s *MAC_DECODE_INPUT_PTR_T;


typedef struct MAC_DECODE_OUTPUT_T_s {
    z_ctypes_8_UnsignedShortInt  status;
    SDL_Octet  msg_type;
} MAC_DECODE_OUTPUT_T;


typedef struct MAC_DECODE_OUTPUT_T_s *MAC_DECODE_OUTPUT_PTR_T;


typedef struct MAC_ENCODE_INPUT_T_s {
    SDL_Octet  msg_type;
    z_ctypes_4_Voidstar  pdu;
    OCTET_PTR_T  bitstream_ptr;
} MAC_ENCODE_INPUT_T;


typedef struct MAC_ENCODE_INPUT_T_s *MAC_ENCODE_INPUT_PTR_T;


typedef struct MAC_ENCODE_OUTPUT_T_s {
    z_ctypes_8_UnsignedShortInt  length;
} MAC_ENCODE_OUTPUT_T;


typedef struct MAC_ENCODE_OUTPUT_T_s *MAC_ENCODE_OUTPUT_PTR_T;


typedef struct PACKET_CELL_CHANGE_CONTINUE_T_s {
    SDL_Octet  page_mode;
    z_ctypes_8_UnsignedShortInt  arfcn;
    SDL_Octet  bsic;
    SDL_Octet  container_id;
} PACKET_CELL_CHANGE_CONTINUE_T;


typedef struct MULTISLOT_CAPABILITY_T_s {
    SDL_Boolean  hscsd_multislot_class_flag;
    SDL_Octet  hscsd_multislot_class;
    SDL_Boolean  gprs_multislot_class_flag;
    SDL_Octet  gprs_multislot_class;
    SDL_Boolean  gprs_ext_dyna_alloc_capability;
    SDL_Boolean  sms_value_flag;
    SDL_Octet  sms_value;
    SDL_Octet  sm_value;
    SDL_Boolean  ecsd_multislot_class_flag;
    SDL_Octet  ecsd_multislot_class;
    SDL_Boolean  egprs_multislot_class_flag;
    SDL_Octet  egprs_multislot_class;
    SDL_Boolean  egprs_ext_dyna_alloc_capability;
    SDL_Boolean  dtm_multislot_class_flag;
    SDL_Octet  dtm_multislot_class;
    SDL_Boolean  dtm_mac_mode_support;
    SDL_Boolean  dtm_egprs_multislot_class_flag;
    SDL_Octet  dtm_egprs_multislot_class;
} MULTISLOT_CAPABILITY_T;


typedef struct A5_BITS_T_s {
    SDL_Boolean  a5_1;
    SDL_Boolean  a5_2;
    SDL_Boolean  a5_3;
    SDL_Boolean  a5_4;
    SDL_Boolean  a5_5;
    SDL_Boolean  a5_6;
    SDL_Boolean  a5_7;
} A5_BITS_T;


typedef struct ACCESS_CAPABILITIES_CONTENT_T_s {
    SDL_Octet  rf_power;
    SDL_Boolean  a5_flag;
    A5_BITS_T  a5;
    SDL_Boolean  es_ind;
    SDL_Boolean  ps;
    SDL_Boolean  vgcs;
    SDL_Boolean  vbs;
    SDL_Boolean  multislot_capability_flag;
    MULTISLOT_CAPABILITY_T  multislot_capability;
    SDL_Boolean  psk8_power_capability_flag;
    SDL_Octet  psk8_power_capability;
    SDL_Boolean  cim_capability;
    SDL_Boolean  rl_ind;
    SDL_Boolean  umts_fdd_ra_tech_cap;
    SDL_Boolean  umts_384m_tdd_ra_tech_cap;
    SDL_Boolean  cdma2000_ra_tech_cap;
    SDL_Boolean  umts_128mcps_tdd_ra_tech_cap;
    SDL_Boolean  geran_feature_package1;
    SDL_Boolean  ext_dtm_multislot_class_present;
    SDL_Octet  ext_dtm_gprs_multislot_class;
    SDL_Octet  ext_dtm_egprs_multislot_class;
    SDL_Boolean  egprs_gmsk_only_mode;
} ACCESS_CAPABILITIES_CONTENT_T;


typedef struct ADD_ACCESS_CAPAB_STRUCT_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  access_tech_type;
    SDL_Octet  gmsk_pwr_class;
    SDL_Octet  psk8_pwr_class;
} ADD_ACCESS_CAPAB_STRUCT_T;


typedef SDL_Octet  ACCESS_TECHNOLOGY_TYPE_T;


typedef struct MS_RA_CAPABILITY_VALUE_T_s {
    SDL_Boolean  ra_valid_flag;
    ACCESS_TECHNOLOGY_TYPE_T  ra_type;
    SDL_Octet  add_length;
    ACCESS_CAPABILITIES_CONTENT_T  capabilities;
    ADD_ACCESS_CAPAB_STRUCT_T  add_accessCapabStruct;
} MS_RA_CAPABILITY_VALUE_T;


typedef MS_RA_CAPABILITY_VALUE_T MS_RA_CAPABILITY_VALUE_ARR_T[MS_ACCESS_TECH_TYPE_MAX_NUM];


typedef struct MS_RA_CAPABILITY_T_s {
    SDL_Boolean  ie_present;
    SDL_Octet  num_of_racap;
    MS_RA_CAPABILITY_VALUE_ARR_T  value;
} MS_RA_CAPABILITY_T;


typedef SDL_Integer  GMM_CAUSE_T;


typedef struct RECEIVE_NPDU_NUMBER_T_s {
    NSAPI_NUM_T  nsapi;
    z_ctypes_6_ShortInt  value;
} RECEIVE_NPDU_NUMBER_T;


typedef RECEIVE_NPDU_NUMBER_T RECEIVE_NPDU_NUMBER_ARR_T[MAX_NSAPI_NUMBER];


typedef struct RECEIVE_NPDU_NUMBER_LIST_T_s {
    z_ctypes_6_ShortInt  number;
    RECEIVE_NPDU_NUMBER_ARR_T  number_array;
} RECEIVE_NPDU_NUMBER_LIST_T;


typedef SDL_Boolean PDP_CONTEXT_STATUS_ARR_T[MAX_PDP_CONTEXT_STATUS_ID];


typedef z_ctypes_6_ShortInt  SM_CAUSE_T;


typedef NSAPI_NUM_T NSAPI_ARR_T[MAX_NSAPI_NUMBER];


typedef struct NSAPI_LIST_T_s {
    z_ctypes_6_ShortInt  length;
    NSAPI_ARR_T  nsapi_arr;
} NSAPI_LIST_T;


typedef SDL_Boolean  TEAR_DOWN_ID_T;


typedef struct PDU_STRUCT_T_s {
    OCTET_PTR_T  pdu_ptr;
    z_ctypes_8_UnsignedShortInt  pdu_size;
} PDU_STRUCT_T;


typedef SDL_Octet OCTET_ARR_APN_T[APN_LENGTH];


typedef SDL_Octet OCTET_ARR16_T[SDL_INTEGER_LIT(16)];


typedef SDL_Octet OCTET_ARR251_T[SDL_INTEGER_LIT(251)];


typedef SDL_Octet OCTET_ARR254_T[SDL_INTEGER_LIT(254)];


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE PDP_ADDR_TYPE_E;
#define SM_PPP 0
#define SM_IPv4 1
#define SM_IPv6 2
#define PDP_EMPTY 3


typedef struct PDP_ADDRESS_T_s {
    PDP_ADDR_TYPE_E  pdp_addr_type;
    OCTET_ARR16_T  pdp_addr_value;
    z_ctypes_8_UnsignedShortInt  pdp_addr_length;
} PDP_ADDRESS_T;


typedef struct APN_T_s {
    OCTET_ARR_APN_T  apn_value;
    z_ctypes_8_UnsignedShortInt  apn_length;
} APN_T;


typedef struct APN_T_s *APN_PTR_T;


typedef struct PCO_T_s {
    OCTET_ARR251_T  pco_value;
    z_ctypes_8_UnsignedShortInt  pco_length;
} PCO_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE TFT_OPCODE_E;
#define NO_OP_TFT_2G 0
#define CREATE_NEW_TFT_2G 1
#define DELETE_EXISTING_TFT_2G 2
#define ADD_PKT_FILTER_TO_TFT_2G 3
#define REPLACE_PKT_FILTER_IN_TFT_2G 4
#define DELETE_PKT_FILTER_FROM_TFT_2G 5


typedef struct TRAFFIC_FLOW_TEMPLATE_T_s {
    OCTET_ARR254_T  packet_filter_list;
    SDL_Octet  tft_length;
    SDL_Octet  num_packet_filter;
    TFT_OPCODE_E  tft_opcode;
} TRAFFIC_FLOW_TEMPLATE_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE RESPONSE_MODE_E;
#define MANUAL 0
#define AUTO 1


typedef SDL_Integer  GMM_ATTACH_TYPE_T;


typedef SDL_Integer  G_ATTACH_RESULT_E;


typedef SDL_Duration  GPRS_TIMER_DURATION_T;


typedef SDL_Integer  GMM_DETACH_TYPE_E;


typedef SDL_Integer  GMM_MN_ATTCH_RESULT_T;


typedef SDL_Integer  GMM_MN_DETACH_RESULT_T;


typedef struct LLC_XID_PARAM_T_s {
    SDL_Boolean  version_flag;
    SDL_Boolean  iov_i_flag;
    SDL_Boolean  t200_flag;
    SDL_Boolean  n200_flag;
    SDL_Boolean  n201_u_flag;
    SDL_Boolean  n201_i_flag;
    SDL_Boolean  md_flag;
    SDL_Boolean  mu_flag;
    SDL_Boolean  kd_flag;
    SDL_Boolean  ku_flag;
    z_ctypes_A_UnsignedLongInt  iov_i;
    z_ctypes_8_UnsignedShortInt  t200;
    z_ctypes_8_UnsignedShortInt  n201_u;
    z_ctypes_8_UnsignedShortInt  n201_i;
    z_ctypes_8_UnsignedShortInt  md;
    z_ctypes_8_UnsignedShortInt  mu;
    SDL_Octet  version;
    SDL_Octet  kd;
    SDL_Octet  ku;
    SDL_Octet  n200;
} LLC_XID_PARAM_T;


typedef z_ctypes_8_UnsignedShortInt  GMM_REGISTRATION_STATE_T;


typedef SDL_Integer  GMM_CKSN_E;


typedef SDL_Integer  LIST_TYPE_FORBIDDEN_E;


typedef SDL_Octet GPRS_KC_ARR_T[SDL_INTEGER_LIT(8)];


typedef struct P_TMSI_SIGNATURE_T_s {
    SDL_Integer  value;
    SDL_Boolean  valid_flag;
} P_TMSI_SIGNATURE_T;


typedef SDL_Integer  MOBILE_TYPE_ID_E;


typedef struct EMG_SERV_CATG_VAL_T_s {
    SDL_Boolean  is_police_support;
    SDL_Boolean  is_ambulance_support;
    SDL_Boolean  is_fire_brigade_support;
    SDL_Boolean  is_marine_guard_support;
    SDL_Boolean  is_mountain_rescue_support;
    SDL_Boolean  is_man_init_ecall_support;
    SDL_Boolean  is_auto_init_ecall_support;
    SDL_Boolean  reserve;
} EMG_SERV_CATG_VAL_T;


typedef struct EMG_NUM_T_s {
    EMG_SERV_CATG_VAL_T  emg_serv_catg_val;
    z_ctypes_8_UnsignedShortInt  emg_num_len;
    CALL_ADDR_ARR_T  emg_num;
} EMG_NUM_T;


typedef EMG_NUM_T EMG_NUM_ARR_T[MAX_EMG_NUM_LIST_SIZE];


typedef struct EMG_NUM_LIST_T_s {
    SDL_Integer  emg_num_list_num;
    EMG_NUM_ARR_T  emg_num_arr;
} EMG_NUM_LIST_T;


typedef struct NTW_FEAT_SUPPORT_T_s {
    SDL_Boolean  is_lcs_molr_ps_supt;
    SDL_Boolean  is_mbms_supt;
} NTW_FEAT_SUPPORT_T;


typedef union MOBILE_ID_UNION_s {
    TMSI_T  tmsi;
    P_TMSI_T  ptmsi;
    IMSI_T  imsi;
    IMEI_T  imei;
    IMEISV_T  imeisv;
} MOBILE_ID_UNION;


typedef SDL_Integer  CELL_GPRS_STATE_E;


typedef GMM_CAUSE_T  GPRS_CAUSE_E;


typedef SDL_Integer  GMM_STATE_UPDATED;


typedef z_ctypes_6_ShortInt  MSG_TYPE_E;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE GMM_PROCEDURE_TYPE_E;
#define PROCEDURE_GPRS_ATTACH 0
#define PROCEDURE_COMBINED_ATTACH 1
#define PROCEDURE_IMSI_DETACH 2
#define PROCEDURE_COMBINED_DETACH 3
#define PROCEDURE_GPRS_DETACH 4
#define PROCEDURE_NORMAL_RAU 5
#define PROCEDURE_COMBINED_RAU 6
#define PROCEDURE_AUTH_PROCEDURE 7


typedef SDL_Integer  GMM_SGSN_DETACH_TYPE_E;


typedef z_ctypes_8_UnsignedShortInt  GMM_STATE_IND_E;


typedef z_ctypes_8_UnsignedShortInt  PAGE_TYPE_E;


typedef z_ctypes_8_UnsignedShortInt  GMM_END_STATE_E;


typedef z_ctypes_6_ShortInt  GMM_CIPHER_ALGORITHM_E;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE SUSPEND_CAUSE_E;
#define GSM_CELL_RESELL 0
#define GSM_CS_SUSPEND_GPRS 1
#define GSM_CS_ABORT_GPRS 2
#define GSM_SWITCH_GPRS 3


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE REL_CAUSE_E;
#define DOWNLINK_FAIL 0
#define TO_CS_EST 1
#define TO_CELL_RESEL 2
#define ABNORM_REL_WITH_RA 3
#define ABNORM_REL_TO_IDLE 4


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE TBF_REL_TYPE_E;
#define NORM_REL_ATT_OR_RAU 0
#define NORM_REL_MEAS_REP 1
#define NORM_REL_OTHER_TYPE 2
#define ABNORM_REL_FORWARD_IDLE 3
#define ABNORM_REL_WITH_SI 4
#define ABNORM_REL_WITH_COND_SI 5
#define ABNORM_REL_WITH_CELL_RESEL 6
#define NORM_REL_BY_RRA 7


typedef SDL_Octet  BS_CV_MAX_T;


typedef SDL_Octet  PAN_DEC_T;


typedef SDL_Octet  PAN_INC_T;


typedef SDL_Octet  PAN_MAX_T;


typedef SDL_Octet  PRIO_ACCESS_THR_T;


typedef z_ctypes_6_ShortInt  GRR_RLC_MSG_TYPE_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE RLC_GRR_ACC_ERROR_E;
#define RLC_TBF_ACC_FAIL_WITH_MSG_ERROR 0
#define RLC_TBF_ACC_FAIL_WITH_REJ 1
#define RLC_TBF_ACC_FAIL_WITH_CONTENTION 2
#define RLC_TBF_ACC_FAIL_WITH_SI 3
#define RLC_TBF_ACC_FAIL_WITH_CELL_RESEL 4


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE FREQ_PARAM_TYPE_T;
#define PSI2 0
#define SYS_INFO13 1
#define SYS_INFO1 2
#define ASSIGN_MSG 3


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE CONTROL_ACK_E;
#define ACCESS_BURSTS_T 0
#define CONTROL_BLOCK_T 1


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE RACH_REJ_CAUSE_T;
#define ACCESS_REJ 0
#define ACCESS_FORBID 1
#define T3146_EXPIRED 2
#define DCCH_TO_PDCH_FAIL 3
#define IN_CALL 4
#define CELL_RESELECT 5


typedef SDL_Octet  RACH_REJ_TIME_T;


typedef SDL_Octet  TA_T;


typedef SDL_Octet  CHANNEL_CODING_REQUESTED_T;


typedef SDL_Octet CHANNEL_REQUEST_DESCRIPTION_T[SDL_INTEGER_LIT(5)];


typedef SDL_Octet PACKET_CHANNEL_DESC_IE_T[SDL_INTEGER_LIT(3)];


typedef SDL_Octet MA_BITMAP_ARR_T[SDL_INTEGER_LIT(8)];


typedef struct MA_BITMAP_T_s {
    SDL_Octet  length;
    MA_BITMAP_ARR_T  bitmap;
} MA_BITMAP_T;


typedef SDL_Octet PACKET_CONSTRUCT_ARR_T[SDL_INTEGER_LIT(11)];


typedef struct PACKET_CONSTRUCT_T_s {
    SDL_Octet  length;
    PACKET_CONSTRUCT_ARR_T  packet_construct_arr;
} PACKET_CONSTRUCT_T;


typedef struct REF_FREQ_LIST_T_s {
    ARFCN_LIST_T  arfcn_list;
    SDL_Octet  rfl_number;
} REF_FREQ_LIST_T;


typedef REF_FREQ_LIST_T REF_FREQ_LIST_ARR_T[SDL_INTEGER_LIT(4)];


typedef struct RR_GPRS_MA_T_s {
    SDL_Octet  ma_number;
    GPRS_MOBILE_ALLOCATION_T  mobile_allocation;
} RR_GPRS_MA_T;


typedef RR_GPRS_MA_T GPRS_MOBILE_ALLOC_ARR_T[SDL_INTEGER_LIT(6)];


typedef struct PSI2_FREQ_PARAM_T_s {
    SDL_Octet  change_mark;
    SDL_Octet  ref_freq_list_num;
    REF_FREQ_LIST_ARR_T  ref_freq_list_arr;
    ARFCN_LIST_T  ca_list;
    SDL_Octet  gprs_ma_list_num;
    GPRS_MOBILE_ALLOC_ARR_T  gprs_ma_list_arr;
} PSI2_FREQ_PARAM_T;


typedef struct PSI2_FREQ_PARAM_T_s *PSI2_FREQ_PARAM_PTR_T;


typedef struct SI13_FREQ_PARAM_T_s {
    SDL_Octet  change_mark;
    GPRS_MOBILE_ALLOCATION_T  gprs_ma_ie;
} SI13_FREQ_PARAM_T;


typedef struct SI1_FREQ_PARAM_T_s {
    ARFCN_LIST_T  ca_list;
} SI1_FREQ_PARAM_T;


typedef union FREQ_PARAM_T_s {
    PSI2_FREQ_PARAM_PTR_T  psi2_freq_param_ptr;
    SI13_FREQ_PARAM_T  si13_freq_param;
    SI1_FREQ_PARAM_T  si1_freq_param;
} FREQ_PARAM_T;


typedef struct FREQ_UPDATE_T_s {
    FREQ_PARAM_TYPE_T  freq_param_type;
    FREQ_PARAM_T  freq_param_value;
} FREQ_UPDATE_T;


typedef struct GPRS_MEAS_RESULT_T_s {
    SDL_Octet  c_value;
    SDL_Octet  rxqual;
    SDL_Octet  sign_var;
} GPRS_MEAS_RESULT_T;


typedef z_ctypes_6_ShortInt  MAC_GRR_MSG_TYPE_T;


typedef struct PACCH_DATA_T_s {
    MAC_GRR_MSG_TYPE_T  msg_type;
    z_ctypes_8_UnsignedShortInt  msg_length;
    MAC_MSG_BLOCK_ARR_T  msg_value;
    ABSOLUTE_FRAME_NUMBER_T  frame_number;
} PACCH_DATA_T;


typedef SDL_Boolean  IS_PCCCH_T;


typedef z_ctypes_A_UnsignedLongInt  T3168_VALUE_T;


typedef z_ctypes_A_UnsignedLongInt  T3192_VALUE_T;


typedef SDL_Boolean  NECI_VALUE_T;


typedef SDL_Boolean  IS_CELL_SUPPORT_EGPRS_T;


typedef SDL_Boolean  IS_CELL_SUPPORT_ERACH_T;


typedef z_ctypes_6_ShortInt  RECEIVE_N_PDU_NUMBER_T;


typedef z_ctypes_6_ShortInt  RLC_TBF_STATUS_T;


typedef z_ctypes_6_ShortInt  RLC_BSN_T;


typedef SDL_Octet  TFI_T;


typedef SDL_Octet  RLC_WS_T;


typedef z_ctypes_6_ShortInt  TIMESLOT_T;


typedef z_ctypes_6_ShortInt  CODING_SCHEME_T;


typedef struct WAIT_INDICATION_T_s {
    z_ctypes_7_LongInt  value;
    SDL_Boolean  is_ms;
} WAIT_INDICATION_T;


typedef z_ctypes_6_ShortInt  ACCESS_STATUS_T;


typedef z_ctypes_6_ShortInt  ENUM_TLLI_T;


typedef z_ctypes_6_ShortInt  CONTENTION_STATUS_T;


typedef z_ctypes_6_ShortInt  TBF_REL_CAUSE_T;


typedef struct DOWNLINK_TBF_PARAM_T_s {
    TLLI_T  tlli;
    CODING_SCHEME_T  cs_type;
    RLC_MODE_T  rlc_mode;
} DOWNLINK_TBF_PARAM_T;


typedef SDL_Octet z0XT_DATA_BLOCK_ARR_T[SDL_INTEGER_LIT(23)];


typedef SDL_Octet CArray8_T[SDL_INTEGER_LIT(8)];


typedef struct ACK_NACK_DESCR_T_s {
    SDL_Boolean  final_ack_ind;
    SDL_Octet  ssn;
    CArray8_T  rbb;
} ACK_NACK_DESCR_T;


typedef z_ctypes_6_ShortInt  RESOURCE_REQ_CAUSE_T;


typedef z_ctypes_6_ShortInt  TBF_TYPE_T;


typedef SDL_Octet  PRIORITY_ALLOW_T;


typedef z_ctypes_6_ShortInt  CELL_SUSPEND_STATE_T;


typedef z_ctypes_6_ShortInt  UPLINK_RECEIVE_FAI_T;


typedef struct z0XX_RLC_MUTEX_T_s {
    SDL_Boolean  single_block_access;
    SDL_Boolean  bothtbf_and_uptbf_first;
    SDL_Boolean  dl_est_in_access_state;
    SDL_Boolean  access_after_t3172_expire;
    SDL_Boolean  uplink_receive_fai;
    UPLINK_RECEIVE_FAI_T  uplink_receive_fai_state;
} z0XX_RLC_MUTEX_T;


typedef struct z0XY_RLC_NC_CS_T_s {
    SDL_Boolean  is_new_cell;
    SDL_Boolean  is_old_cell;
} z0XY_RLC_NC_CS_T;


typedef struct z0XZ_RLC_SUSPEND_STATE_T_s {
    SDL_Boolean  is_cell_select;
    SDL_Boolean  is_uplink_data;
} z0XZ_RLC_SUSPEND_STATE_T;


typedef z_ctypes_6_ShortInt  RLC_TBF_SERVICE_T;


typedef SDL_Boolean  IS_CELL_CHANGE_FAIL_T;


typedef SDL_Boolean  IS_TBF_EST_T;


typedef SDL_Boolean  IS_UL_RESEGMENT_T;


typedef SDL_Boolean  IS_UL_PREEMPTIVE_T;


typedef z_ctypes_6_ShortInt  DL_STATE_T;


typedef z_ctypes_6_ShortInt  UL_STATE_T;


typedef z_ctypes_6_ShortInt  UL_ONE_PAHSE_ACCESS_STATE_T;


typedef z_ctypes_6_ShortInt  UL_TWO_PAHSE_ACCESS_STATE_T;


typedef z_ctypes_6_ShortInt  UL_ACTIVE_STATE_T;


typedef z_ctypes_6_ShortInt  UL_RELEASE_STATE_T;


typedef z_ctypes_6_ShortInt  POLL_PRIORITY_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE EGPRS_CAPABILITY_E;
#define NOT_SUPP_EGPRS 0
#define UL_SUPP_EGPRS 1
#define ONLY_DL_EGPRS 2


typedef SDL_Octet CONTROL_BLOCK_ARR_T[CONTROL_BLOCK_SIZE];


typedef struct CTRL_BLOCK_ELMT_T_s {
    BLOCK_STRUCT_T  ctr_block;
    SDL_Octet  msg_type;
} CTRL_BLOCK_ELMT_T;


typedef CTRL_BLOCK_ELMT_T CTRL_BLOCK_ARR_T[MAX_CTRQ_SIZE];


typedef struct CTRL_QUEUE_T_s {
    CTRL_BLOCK_ARR_T  block_arr;
    z_ctypes_6_ShortInt  front;
    z_ctypes_6_ShortInt  rear;
    z_ctypes_6_ShortInt  getted_num;
    SDL_Boolean  is_full;
} CTRL_QUEUE_T;


typedef struct POLLED_BLOCK_ELMT_T_s {
    ABSOLUTE_FRAME_NUMBER_T  frame_number;
    SDL_Octet  polled_slot;
    SDL_Octet  poll_slot_num;
    SDL_Boolean  is_on_pccch;
    SDL_Boolean  fai;
    SDL_Boolean  tbf_est;
    SDL_Boolean  fbi;
    POLL_PRIORITY_T  polled_priority;
    SDL_Boolean  is_dl_or_ul_tbf;
    SDL_Octet  msg_type;
    SDL_Octet  ctrl_ack;
    SDL_Octet  es_p;
    BLOCK_STRUCT_T  polled_block;
} POLLED_BLOCK_ELMT_T;


typedef struct POLLED_LIST_ELMT_T_s {
    SDL_Boolean  is_valid;
    z_ctypes_6_ShortInt  next;
    POLLED_BLOCK_ELMT_T  polled_blk_elmt;
} POLLED_LIST_ELMT_T;


typedef POLLED_LIST_ELMT_T POLLED_LIST_ARR_T[MAX_POLLED_SIZE];


typedef struct POLLED_LIST_T_s {
    POLLED_LIST_ARR_T  list_arr;
    z_ctypes_6_ShortInt  head;
    z_ctypes_6_ShortInt  count;
    z_ctypes_6_ShortInt  get_num;
} POLLED_LIST_T;


typedef struct PACKET_REQUEST_REF_T_s {
    PRACH_AB_T  random_acc_info;
    REDUCED_FRAME_NUMBER_T  frame_number;
} PACKET_REQUEST_REF_T;


typedef struct PACKET_CHANNEL_DESCRIPTION_T_s *PACKET_CHANNEL_DESCRIPTION_PTR_T;


typedef struct DYNAMIC_T_s {
    ABSOLUTE_FRAME_NUMBER_T  starting_time;
    SDL_Octet  time_slot;
    SDL_Octet  time_slot_num;
} DYNAMIC_T;


#ifndef XENUM_TYPE
#define XENUM_TYPE int
#endif
typedef XENUM_TYPE DYNAMIC_STATUS_E;
#define INVALID_DYNAMIC 0
#define DYNAMIC_WAIT_STARTING_TIME 1
#define DYNAMIC_EXECUTE 2


typedef struct DYNAMIC_ALLOC_STATUS_T_s {
    DYNAMIC_STATUS_E  status;
    DYNAMIC_T  dynamic_alloc;
} DYNAMIC_ALLOC_STATUS_T;


typedef SDL_Octet AUTH_PARA_RAND_ARR_T[AUTH_PARA_RAND_LENGTH];


typedef SDL_Octet  HPLMN_TIMER_VALUE_T;


typedef SDL_Octet  T3212_VALUE;


typedef z_ctypes_6_ShortInt  SCT_GPRS_STATUS_T;


typedef z_ctypes_6_ShortInt  SCT_GPRS_MODE_T;


typedef z_ctypes_6_ShortInt  SCT_EGPRS_MODE_T;


typedef z_ctypes_6_ShortInt  SCT_TEST_CMD_TYPE;


typedef SDL_Octet SCT_PDU_DESCRI_ARR_T[SDL_INTEGER_LIT(2)];


typedef struct GPRS_TEST_MODE_CMD_T_s {
    SCT_TEST_CMD_TYPE  cmd_type;
    SCT_PDU_DESCRI_ARR_T  pdu_descri;
    SCT_GPRS_MODE_T  test_mode;
    SCT_EGPRS_MODE_T  egprs_test_mode;
    SDL_Octet  timeslot_offset;
} GPRS_TEST_MODE_CMD_T;


typedef SDL_Octet SCT_GPRS_TEST_CMD_ARR_T[SDL_INTEGER_LIT(5)];


typedef z_ctypes_6_ShortInt  SCT_MSG_TYPE_T;


typedef struct L2_DATA_IND_T_s {
    CHANNEL_TYPE_E  chan;
    SUB_CHANNEL_T  sub_chan;
    PHYSICAL_BLOCK_ARR_T  data_blk;
    ABSOLUTE_FRAME_NUMBER_T  fn;
} L2_DATA_IND_T;


typedef struct POWER_LEVEL_STRUCT_T_s {
    BSIC_T  bsic;
    SDL_Octet  pw_level;
    ARFCN_T  arfcn;
} POWER_LEVEL_STRUCT_T;


typedef struct BCCH_STRUCT_T_s {
    BSIC_T  bsic;
    ARFCN_T  arfcn;
    z_ctypes_A_UnsignedLongInt  index_bitmap;
    PHYSICAL_BLOCK_ARR_T  data_blk;
} BCCH_STRUCT_T;


typedef struct PCH_STRUCT_T_s {
    BSIC_T  bsic;
    PHYSICAL_BLOCK_ARR_T  data_blk;
    ABSOLUTE_FRAME_NUMBER_T  fn;
} PCH_STRUCT_T;


typedef struct PPCH_STRUCT_T_s {
    BSIC_T  bsic;
    PHYSICAL_BLOCK_ARR_T  data_blk;
    ABSOLUTE_FRAME_NUMBER_T  fn;
} PPCH_STRUCT_T;


typedef struct RACH_STRUCT_T_s {
    RACH_AB_T  rach_ab;
    ABSOLUTE_FRAME_NUMBER_T  fn;
} RACH_STRUCT_T;


typedef struct MS_DATA_STRUCT_T_s {
    BSIC_T  bsic;
    CHANNEL_TYPE_E  channel_type;
    SUB_CHANNEL_T  sub_chan;
    PHYSICAL_BLOCK_ARR_T  data_blk;
    ABSOLUTE_FRAME_NUMBER_T  fn;
} MS_DATA_STRUCT_T;


typedef POWER_LEVEL_STRUCT_T POWER_LEVEL_ARR_T[z1RJ_MAX_SWEEP_ITEMS];


typedef struct POWER_SWEEP_STRUCT_T_s {
    SDL_Integer  valid_num;
    POWER_LEVEL_ARR_T  pw_info;
} POWER_SWEEP_STRUCT_T;


typedef SDL_Boolean BCCH_BLOCK_IND_T[z1RL_MAX_CYCLE_NUM];


typedef OCTET_PTR_T *OCTET_PTR_PTR_T;


typedef L2_MESSAGE_ARR_T *L2_INFO_PTR_T;


typedef OCTET_PTR_T  XID_BLOCK_PTR_T;


typedef OCTET_PTR_T  PDU_PTR_T;


typedef OCTET_PTR_T  FRAME_PTR_T;


typedef struct LLC_FRAME_T_s {
    FRAME_PTR_T  frame_ptr;
    FRAME_SIZE_T  frame_size;
} LLC_FRAME_T;


typedef OCTET_PTR_T  NPDU_PTR_T;


typedef struct SEND_SNPDU_ACK_T_s {
    SEND_SNPDU_ACK_LIST_PTR_T  send_snpdu_ack_list_header_ptr;
    SEND_SNPDU_ACK_PTR_T  SNPDU_next_ptr;
    PDU_PTR_T  snpdu_ptr;
    PDU_SIZE_T  snpdu_size;
} SEND_SNPDU_ACK_T;


typedef struct NPDU_BUFFER_UNIT_T_s {
    SDL_Integer  NPDU_num;
    NPDU_SIZE_T  NPDU_size;
    NPDU_PTR_T  NPDU_ptr;
    SDL_Integer  SNPDU_count;
    NPDU_BUFFER_UNIT_PTR_T  NPDU_next_ptr;
} NPDU_BUFFER_UNIT_T;


typedef struct SNPDU_INFO_T_s {
    QOS_PARAM_T  qos;
    RADIO_PRIORITY_T  radio_prio;
    OCTET_PTR_T  snpdu_ptr;
    PDU_SIZE_T  snpdu_size;
} SNPDU_INFO_T;


typedef OCTET_PTR_T  BLOCK_PTR_T;


typedef struct RX_EX_T_s {
    SDL_Boolean  supported;
    SDL_Octet  egsm_thr;
    SDL_Octet  egsm_val;
    SDL_Octet  dcs_thr;
    SDL_Octet  dcs_val;
    SDL_Octet  pcs_thr;
    SDL_Octet  pcs_val;
    SDL_Octet  gsm850_thr;
    SDL_Octet  gsm850_val;
    MS_BAND_E  ms_band;
} RX_EX_T;


typedef struct SEND_SNPDU_ACK_LIST_T_s {
    NSAPI_NUM_T  nsapi;
    QOS_PARAM_T  qos;
    RADIO_PRIORITY_T  radiopriority;
    SDL_Integer  snpdu_count;
    SEND_SNPDU_ACK_PTR_T  snpdu_first_ptr;
    SEND_SNPDU_ACK_PTR_T  snpdu_last_ptr;
    NPDU_BUFFER_UNIT_PTR_T  npdu_buffer_unit_ptr;
    SEND_SNPDU_ACK_LIST_PTR_T  next;
} SEND_SNPDU_ACK_LIST_T;


typedef struct SMS_TL_RL_REPORT_T_s {
    SMS_CAUSE_TYPE_T  sor;
    GSM_CAUSE_T  cs;
    L3_MSG_UNIT_T  tl_rl_msg_t;
} SMS_TL_RL_REPORT_T;


typedef struct CELL_OPTION_T_s {
    SDL_Boolean  pwrc;
    SDL_Boolean  dtx_allowed;
    DTX_ALLOWED_E  dtx_allowed_sacch;
    SDL_Octet  rlt;
} CELL_OPTION_T;


typedef struct GPRS_CELL_OPTIONS_IE_T_s {
    NETWORK_MODE_E  nmo;
    z_ctypes_A_UnsignedLongInt  t3168;
    z_ctypes_A_UnsignedLongInt  t3192;
    SDL_Octet  drx_timer_max;
    AB_FORMAT_E  access_burst_type;
    CONTROL_ACK_E  ctrl_ack_type;
    SDL_Octet  bs_cv_max;
    SDL_Boolean  pan_present;
    SDL_Octet  pan_dec;
    SDL_Octet  pan_inc;
    SDL_Octet  pan_max;
    SDL_Boolean  extention_present;
    SDL_Octet  extention_len;
    SDL_Boolean  supp_egprs;
    SDL_Boolean  supp_egprs_pkt_ch_req;
    SDL_Octet  bep_period;
    SDL_Boolean  pfc_feature_mod;
    SDL_Boolean  support_dtm;
    SDL_Boolean  bss_pag_coord;
    SDL_Boolean  ccn_active;
    SDL_Boolean  nw_ext_utbf;
} GPRS_CELL_OPTIONS_IE_T;


typedef struct RR_PCCCH_DESC_T_s {
    SDL_Octet  tsc;
    SDL_Octet  tn;
    SDL_Boolean  hopping_ind;
    ARFCN_T  arfcn;
    SDL_Octet  maio;
    SDL_Octet  ma_number;
} RR_PCCCH_DESC_T;


typedef RR_PCCCH_DESC_T RR_PCCCH_DESC_ARR_T[SDL_INTEGER_LIT(16)];


typedef struct MEAS_CHAN_T_s {
    SDL_Boolean  hopping_ind;
    ARFCN_T  arfcn;
    SDL_Octet  maio;
    SDL_Octet  ma_num;
    SDL_Octet  ts_alloc;
} MEAS_CHAN_T;


typedef MEAS_CHAN_T MEAS_CHAN_ARR_T[SDL_INTEGER_LIT(32)];


typedef struct RR_NCELL_PARS_T_s {
    ARFCN_T  arfcn;
    SDL_Octet  bsic;
    SDL_Octet  cba2;
    SDL_Boolean  exc_acc;
    SDL_Boolean  same_ra_as_serv_cell;
    SDL_Boolean  gprs_rxlev_acc_min_present;
    SDL_Octet  gprs_rxlev_acc_min;
    SDL_Octet  gprs_ms_txpwr_max_cch;
    SDL_Boolean  gprs_temp_offset_present;
    SDL_Octet  gprs_temp_offset;
    SDL_Octet  gprs_penalty_time;
    SDL_Boolean  gprs_resel_offset_present;
    SDL_Octet  gprs_resel_offset;
    HCS_PARS_T  hcs_pars;
    RR_SI13_PBCCH_LOCATION_T  si13_pbcch_location;
} RR_NCELL_PARS_T;


typedef RR_NCELL_PARS_T RR_NCELL_PARS_ARR_T[SDL_INTEGER_LIT(32)];


typedef struct CELL_EXT_MEAS_PARS_T_s {
    SDL_Octet  ext_meas_order;
    SDL_Boolean  ext_rep_type_present;
    SDL_Octet  ext_rep_type;
    SDL_Octet  ncc_permitted;
    SDL_Boolean  int_freq_present;
    SDL_Octet  int_freq;
    SDL_Boolean  ext_rep_period_present;
    SDL_Octet  ext_rep_period;
    ARFCN_LIST_T  ext_freq_list;
} CELL_EXT_MEAS_PARS_T;


typedef struct REDUCED_CELL_INFO_T_s {
    SDL_Boolean  r_cell_present;
    MS_BAND_E  band;
    ARFCN_T  arfcn;
    BSIC_T  bsic;
    SDL_Boolean  bsic_busy;
    RSSI_T  rssi;
    BCCH_TC_MASK_T  tc_mask;
    z_ctypes_A_UnsignedLongInt  search_start_time;
    SDL_Octet  tc2_norm_bad_times;
    SDL_Octet  tc3_norm_bad_times;
    SDL_Octet  tc6_norm_bad_times;
    SDL_Octet  tc7_norm_bad_times;
    SDL_Boolean  si3_present;
    SDL_Boolean  si4_present;
} REDUCED_CELL_INFO_T;


typedef struct RES_PARAM_T_s {
    SDL_Boolean  sapi0_active;
    SDL_Boolean  sapi3_active;
    CHANNEL_TYPE_E  sapi0_chan;
    CHANNEL_TYPE_E  sapi3_chan;
    CHANNEL_DESCRIPTION_T  chan_desc;
    MOBILE_ALLOCATION_T  ma_list;
    CHANNEL_MODE_E  chan_mode;
    SDL_Boolean  cipher_set;
    CIPHER_PARAM_T  cipher_param;
    SDL_Boolean  multislot_supported;
    MULTI_SLOTS_T  multislots_param;
    RXLEV_T  rxlev;
    RXQUAL_T  rxqual;
    SDL_Octet  ta;
    SDL_Octet  txpwr;
    SDL_Octet  ms_tx_cur;
    SDL_Boolean  dtx_used;
    SDL_Octet  rlt_cur;
} RES_PARAM_T;


typedef struct ARFCN_POWERLEVEL_T_s {
    ARFCN_T  arfcn;
    RSSI_T  rssi;
    MS_BAND_E  band;
} ARFCN_POWERLEVEL_T;


typedef ARFCN_POWERLEVEL_T ARFCN_POWERLEVEL_ARR_T[ARFCN_POWERLEVEL_LEN];


typedef struct BAND_FILTER_T_s {
    SDL_Boolean  band_filter_on;
    ARFCN_T  start_arfcn;
    ARFCN_T  end_arfcn;
} BAND_FILTER_T;


typedef MS_BAND_E ARFCN_BAND_LIST_ARR_T[MAX_BA_SIZE];


typedef struct ARFCN_ROUND_LIST_T_s {
    z_ctypes_6_ShortInt  num;
    z_ctypes_6_ShortInt  start_point;
    ARFCN_LIST_ARR_T  arfcn_list_arr;
    MS_BAND_E  the_band;
} ARFCN_ROUND_LIST_T;


typedef struct PLMN_ARFCN_T_s {
    PLMN_T  plmn;
    ARFCN_ROUND_LIST_T  arfcn_list;
} PLMN_ARFCN_T;


typedef PLMN_ARFCN_T PLMN_ARFCN_ARR_T[SELECT_PLMN_LIST_SIZE];


typedef struct PLMN_ARFCN_LIST_T_s {
    SDL_Octet  length;
    PLMN_ARFCN_ARR_T  plmn_arfcn_arr;
} PLMN_ARFCN_LIST_T;


typedef struct PBCCH_MODE_PARAM_T_s {
    PAGING_MODE_E  page_mode;
    SDL_Octet  bs_prach_blks;
    SDL_Octet  bs_pbcch_blks;
    SDL_Octet  bs_pag_blks_res;
    SDL_Octet  split_pg_cycle;
    SDL_Octet  psi1_repeat_period;
    SDL_Octet  psi_count_high_rate;
    SDL_Octet  psi_count_low_rate;
    z_ctypes_8_UnsignedShortInt  paging_group;
    TXPWR_T  txpwr;
    PBCCH_DESCRIPTION_T  pbcch_desc;
    PCCCH_DESC_T  pccch_desc;
    PAGING_COORDINATION_E  paging_ordination;
} PBCCH_MODE_PARAM_T;


typedef struct TRANS_PARAM_T_s {
    SDL_Boolean  pwrc;
    DTX_ALLOWED_E  dtx_allowed;
    SDL_Octet  ncc_permitted;
    RADIO_LINK_TIMEOUT_T  radio_link_timeout;
    SDL_Boolean  multiband_report_present;
    SDL_Octet  multiband_report;
} TRANS_PARAM_T;


typedef struct PH_MAC_MODE_T_s {
    MAC_MODE_T  mac_mode;
    SDL_Octet  usf_granularity;
    USF_ARR_T  usf_arr;
} PH_MAC_MODE_T;


typedef struct GLOBAL_PWRC_PARAM_T_s {
    ALPHA_T  alpha;
    SDL_Octet  t_avg_w;
    SDL_Octet  t_avg_t;
    SDL_Boolean  pb_present;
    SDL_Octet  pb;
    SDL_Boolean  pc_meas_chan;
    SDL_Octet  n_avg_i;
} GLOBAL_PWRC_PARAM_T;


typedef struct SEL_PARAM_T_s {
    PLMN_T  plmn;
    SDL_Boolean  select_any_plmn;
    BA_LIST_ARR_T  ba_undecoded;
    BA_LIST_ARR_T  bis_ba_undecoded;
    SDL_Boolean  ignore_forbid_plmn_list;
    MS_BAND_E  ms_band;
    SDL_Boolean  gprs_requested;
    SDL_Boolean  manual_select_plmn;
    SDL_Boolean  sel_hplmn;
    BAND_FILTER_T  band_filter;
    SDL_Octet  paging_tbf_mask;
} SEL_PARAM_T;


typedef struct BEARER_CAPABILITY_PTR_T_s {
    BEARER_CAPABILITY_TYPE_E  bc_type;
    BLOCK_PTR_T  classmark_ptr;
} BEARER_CAPABILITY_PTR_T;


typedef struct SETUP_IND_VALUE_T_s {
    SDL_Boolean  bc1_present;
    SDL_Boolean  bc2_present;
    SDL_Boolean  calling_subaddr_present;
    SDL_Boolean  called_subaddr_present;
    SDL_Boolean  redirect_subaddr_present;
    SDL_Boolean  calling_num_present;
    SDL_Boolean  called_num_present;
    SDL_Boolean  redirect_num_present;
    SDL_Boolean  llc_mode1_present;
    SDL_Boolean  llc_mode2_present;
    SDL_Boolean  hlc_mode1_present;
    SDL_Boolean  hlc_mode2_present;
    SDL_Boolean  user_to_user_present;
    SDL_Boolean  ss_version_present;
    SDL_Boolean  progress_present;
    SDL_Boolean  prior_present;
    SDL_Boolean  alert_pattern_present;
    SDL_Boolean  signal_info_present;
    SDL_Boolean  multicall_is_supported;
    SDL_Boolean  no_clir_present;
    SDL_Boolean  backup_bc_present;
    RE_INDICATION_E  repeat_ind;
    BEARER_CAPABILITY_T  bc1;
    BEARER_CAPABILITY_T  bc2;
    SUBADDR_T  calling_subaddr;
    SUBADDR_T  called_subaddr;
    CALLING_NUMBER_T  calling_num;
    CALLED_NUMBER_T  called_num;
    CALLING_NUMBER_T  redirect_num;
    SUBADDR_T  redirect_subaddr;
    LLC_MSG_T  llc_mode1;
    HLC_MSG_T  hlc_mode1;
    LLC_MSG_T  llc_mode2;
    HLC_MSG_T  hlc_mode2;
    SMALL_USER_USER_T  user_to_user;
    SDL_Octet  ss_version;
    CLIR_E  clir;
    PROGRESS_IND_T  progress;
    CALL_PRIOR_E  prior;
    ALERT_PATTERN_E  alert_pattern;
    SIGNAL_T  signal_info;
    NO_CLIR_CAUSE_E  no_clir_cause;
    BACKUP_BEARER_CAPABILITY_T  backup_bc;
} SETUP_IND_VALUE_T;


typedef struct CCBS_SETUP_CONTAINER_VALUE_T_s {
    SDL_Boolean  bc1_present;
    SDL_Boolean  bc2_present;
    SDL_Boolean  simple_facility_present;
    SDL_Boolean  calling_subaddr_present;
    SDL_Boolean  called_num_present;
    SDL_Boolean  called_subaddr_present;
    SDL_Boolean  llc_mode1_present;
    SDL_Boolean  llc_mode2_present;
    SDL_Boolean  hlc_mode1_present;
    SDL_Boolean  hlc_mode2_present;
    SDL_Boolean  user_to_user_present;
    SDL_Boolean  ss_version_present;
    SDL_Boolean  clir_present;
    SDL_Boolean  cc_capacility_present;
    SDL_Boolean  advance_facility_present;
    SDL_Boolean  stream_id_present;
    SDL_Boolean  redial_present;
    RE_INDICATION_E  repeat_ind;
    BEARER_CAPABILITY_T  network_bc1;
    BEARER_CAPABILITY_T  network_bc2;
    BEARER_CAPABILITY_PTR_T  ms_bc1;
    BEARER_CAPABILITY_PTR_T  ms_bc2;
    L3_MSG_UNIT_T  simple_facility;
    SUBADDR_T  calling_subaddr;
    CALLED_NUMBER_T  called_num;
    SUBADDR_T  called_subaddr;
    LLC_MSG_T  llc_mode1;
    HLC_MSG_T  hlc_mode1;
    LLC_MSG_T  llc_mode2;
    HLC_MSG_T  hlc_mode2;
    SMALL_USER_USER_T  user_to_user;
    SDL_Octet  ss_version;
    CLIR_E  clir;
    CC_CAPABILITY_T  cc_capability;
    L3_MSG_UNIT_T  advance_facility;
    SDL_Octet  stream_id;
} CCBS_SETUP_CONTAINER_VALUE_T;


typedef struct SETUP_REQ_VALUE_T_s {
    BEARER_CAPABILITY_T  bc;
    SDL_Boolean  catg_val_present;
    EMG_SERV_CATG_VAL_T  catg_val;
    CALLED_NUMBER_T  called_num;
    SDL_Boolean  called_sub_addr_present;
    SUBADDR_T  called_sub_addr;
    SDL_Boolean  user_to_user_present;
    SMALL_USER_USER_T  user_to_user;
    CLIR_E  clir_type;
} SETUP_REQ_VALUE_T;


typedef struct CALL_CONF_REQ_VALUE_T_s {
    SDL_Boolean  bc_present;
    BEARER_CAPABILITY_PTR_T  bc;
    SDL_Boolean  bc2_present;
    BEARER_CAPABILITY_PTR_T  bc2;
    RE_INDICATION_E  bc_repeat_mode;
    SDL_Boolean  cause_present;
    CAUSE_T  cause;
} CALL_CONF_REQ_VALUE_T;


typedef struct FACILITY_REQ_VALUE_T_s {
    FACILITY_T  facility;
    BLOCK_PTR_T  classmark_ptr;
    SDL_Boolean  ss_version_present;
} FACILITY_REQ_VALUE_T;


typedef struct MODIFY_REQ_VALUE_T_s {
    BEARER_CAPABILITY_PTR_T  bc;
} MODIFY_REQ_VALUE_T;


typedef struct MODIFY_RSP_VALUE_T_s {
    BEARER_CAPABILITY_PTR_T  bc;
    SDL_Boolean  cause_present;
    CAUSE_T  cause;
} MODIFY_RSP_VALUE_T;


typedef struct CC_ESTABLISHMENT_RSP_VALUE_T_s {
    IS_REJECT_RECALL_T  is_reject_recall;
    SDL_Boolean  cause_present;
    CAUSE_T  cause;
    CCBS_SETUP_CONTAINER_VALUE_T  ccbs_setup_container;
} CC_ESTABLISHMENT_RSP_VALUE_T;


typedef union SIGNAL_VALUE_UNION_T_s {
    SETUP_IND_VALUE_T  setup_ind;
    SETUP_CNF_VALUE_T  setup_cnf;
    REJ_IND_VALUE_T  rej_ind;
    CALL_PROCEEDING_IND_VALUE_T  call_proceed;
    CALL_PROGRESS_IND_VALUE_T  call_progress;
    ALERT_IND_VALUE_T  alert_ind;
    NOTIFY_IND_VALUE_T  notify_ind;
    DISC_IND_VALUE_T  disc_ind;
    REL_IND_VALUE_T  rel_ind;
    L3_MSG_UNIT_T  facility_req;
    L3_MSG_UNIT_T  facility_ind;
    START_DTMF_REQ_VALUE_T  start_dtmf_req;
    START_DTMF_CNF_VALUE_T  start_dtmf_cnf;
    MODIFY_IND_VALUE_T  modify_ind;
    MODIFY_CNF_VALUE_T  modify_cnf;
    HOLD_OR_RETRIEVE_CNF_VALUE_E  hold_cnf;
    HOLD_OR_RETRIEVE_CNF_VALUE_E  retrieve_cnf;
    ENQ_STATUS_RSP_VALUE_T  status_rsp;
    NOTIFY_E  notify_req;
    L3_MSG_UNIT_T  setup_req;
    L3_MSG_UNIT_T  setup_rsp;
    L3_MSG_UNIT_T  rej_req;
    L3_MSG_UNIT_T  call_cnf_req;
    L3_MSG_UNIT_T  alert_req;
    L3_MSG_UNIT_T  disc_req;
    L3_MSG_UNIT_T  rel_req;
    L3_MSG_UNIT_T  modify_req;
    L3_MSG_UNIT_T  modify_rsp;
    USER_INFO_VALUE_T  user_ind;
    CONGESTION_CONT_VALUE_T  congestion_cont_ind;
    L3_MSG_UNIT_T  msg_t;
    CCBS_SETUP_CONTAINER_VALUE_T  ccbs_setup_container;
    CC_ESTABLISHMENT_RSP_VALUE_T  cc_establishment_rsp;
    IS_REJECT_RECALL_T  is_reject_recall;
} SIGNAL_VALUE_UNION_T;


typedef union MN_CMROUTER_UNION_T_s {
    SETUP_REQ_VALUE_T  setup_req;
    SETUP_RSP_VALUE_T  setup_rsp;
    DISC_REQ_VALUE_T  disc_req;
    REJ_REQ_VALUE_T  rej_req;
    REL_REQ_VALUE_T  rel_req;
    CALL_CONF_REQ_VALUE_T  call_cnf_req;
    ALERT_REQ_VALUE_T  alert_req;
    FACILITY_REQ_VALUE_T  facility_req;
    MODIFY_REQ_VALUE_T  modify_req;
    MODIFY_RSP_VALUE_T  modify_rsp;
} MN_CMROUTER_UNION_T;


typedef struct MN_REG_PAR_s {
    PLMN_T  rplmn;
    BA_LIST_ARR_T  balist;
    SDL_Boolean  sel_any_plmn;
    MS_BAND_E  ms_band;
    BA_LIST_ARR_T  bis_ba_undecoded;
    SDL_Boolean  sel_hplmn;
    BAND_FILTER_T  band_filter;
} MN_REG_PAR;


typedef struct CSN_NODE_T_s {
    z_ctypes_4_Voidstar  data_ptr;
    CSN_NODE_PTR_T  next;
} CSN_NODE_T;


typedef struct CHANNEL_QUALITY_REP_T_s {
    SDL_Octet  c_value;
    SDL_Octet  rxqual;
    SDL_Octet  sign_var;
    SDL_Octet  gmsk_mean_bep;
    SDL_Octet  gmsk_cv_bep;
    SDL_Octet  psk8_mean_bep;
    SDL_Octet  psk8_cv_bep;
    SDL_Boolean  mean_bep_tn_present;
    TS_BEP_ARR_T  ts_bep_val;
    TIMESLOT_VALUES_ARR_T  ts_values;
} CHANNEL_QUALITY_REP_T;


typedef struct DL_ASSIGN_EGPRS_INFO_T_s {
    SDL_Boolean  ie_present;
    RLC_WS_T  egprs_win_size;
    SDL_Octet  link_quality_meas_mode;
    SDL_Boolean  bep_period2_present;
    SDL_Octet  bep_period2;
} DL_ASSIGN_EGPRS_INFO_T;


typedef struct PACKET_DOWNLINK_ASSIGNMENT_T_s {
    SDL_Octet  page_mode;
    SDL_Boolean  persistence_level_present;
    PERSIST_LEVEL_T  persistence_level;
    REF_ADDR_T  ref_addr;
    z_ctypes_6_ShortInt  mac_mode;
    SDL_Octet  rlc_mode;
    SDL_Boolean  ctrl_ack;
    SDL_Octet  timeslot_alloc;
    PACKET_TIMING_ADVANCE_T  timing_advance;
    SDL_Boolean  p0_present;
    SDL_Octet  p0;
    SDL_Octet  bts_pwr_ctrl_mode;
    SDL_Octet  pr_mode;
    FREQ_PARS_T  freq_pars;
    SDL_Boolean  dl_tfi_assign_present;
    SDL_Octet  dl_tfi_assign;
    POWER_CTRL_PARAMS_T  pwr_ctrl_pars;
    START_FRAME_NUMBER_T  tbf_starting_time;
    MEAS_MAPPING_T  meas_mapping;
    SDL_Boolean  tbf_starting_time_present;
    SDL_Boolean  additions_present;
    SDL_Boolean  dl_assign_egprs_info_present;
    DL_ASSIGN_EGPRS_INFO_T  dl_assign_egprs_info;
    SDL_Boolean  packet_extended_timing_advance_present;
    SDL_Octet  packet_extended_timing_advance;
    COMPACT_REDUCED_MA_T  compact_reduced_ma;
} PACKET_DOWNLINK_ASSIGNMENT_T;


typedef struct PACKET_UPLINK_ACK_NACK_T_s {
    SDL_Boolean  is_egprs;
    SDL_Octet  page_mode;
    SDL_Octet  uplink_tfi;
    SDL_Octet  ch_coding_command;
    SDL_Octet  e_ch_coding_command;
    SDL_Boolean  resegment;
    SDL_Boolean  is_pre_emp_trans;
    SDL_Boolean  is_prr_retrans_req;
    SDL_Boolean  is_arac_retrans_req;
    SDL_Boolean  cont_resol_tlli_present;
    z_ctypes_A_UnsignedLongInt  cont_resol_tlli;
    ACK_NACK_DESCR_T  description;
    E_ACK_NACK_DESCR_T  e_ack_description;
    PACKET_TIMING_ADVANCE_T  timing_advance;
    POWER_CTRL_PARAMS_T  pwr_ctrl_pars;
    SDL_Boolean  additions_present;
    SDL_Boolean  tbf_est;
    SDL_Boolean  packet_externed_timing_advance_present;
    SDL_Octet  packet_externed_timing_advance;
} PACKET_UPLINK_ACK_NACK_T;


typedef struct PACKET_UPLINK_ASSIGNMENT_T_s {
    SDL_Boolean  is_egprs;
    SDL_Octet  page_mode;
    SDL_Octet  ch_coding_command;
    SDL_Boolean  tlli_block_ch_coding;
    SDL_Boolean  persistence_level_present;
    PERSIST_LEVEL_T  persistence_level;
    SDL_Boolean  cont_resol_tlli_present;
    z_ctypes_A_UnsignedLongInt  cont_resol_tlli;
    SDL_Boolean  compact_reduced_ma_present;
    COMPACT_REDUCED_MA_T  compact_reduced_ma;
    SDL_Octet  e_ch_coding_command;
    SDL_Boolean  resegment;
    RLC_WS_T  egprs_ws;
    SDL_Boolean  access_tech_req_present;
    ACCESS_TECH_REQ_T  access_tech_req;
    SDL_Boolean  is_arac_retrans_req;
    SDL_Boolean  bep_period2_present;
    SDL_Octet  bep_period2;
    REF_ADDR_T  ref_addr;
    PACKET_TIMING_ADVANCE_T  timing_advance;
    FREQ_PARS_T  freq_pars;
    DYNAMIC_ALLOC_T  dynamic_alloc;
    MULTI_BLOCK_ALLOC_T  multi_block_alloc;
    SINGLE_BLOCK_ALLOC_T  single_block_alloc;
    SDL_Boolean  packet_extended_timing_advance_present;
    SDL_Octet  packet_extended_timing_advance;
    SDL_Boolean  additions_present;
    SDL_Boolean  is_polling;
    SDL_Octet  polling_rrbp;
} PACKET_UPLINK_ASSIGNMENT_T;


typedef struct PACKET_TIMESLOT_RECONFIGURE_T_s {
    SDL_Boolean  is_egprs;
    SDL_Octet  page_mode;
    SDL_Octet  ch_coding_command;
    RLC_MODE_T  dl_rlc_mode;
    SDL_Boolean  ctrl_ack;
    SDL_Boolean  compact_reduced_ma_present;
    COMPACT_REDUCED_MA_T  compact_reduced_ma;
    SDL_Octet  e_ch_coding_command;
    SDL_Boolean  resegment;
    SDL_Boolean  e_dl_ws_present;
    SDL_Boolean  e_ul_ws_present;
    RLC_WS_T  e_dl_ws;
    RLC_WS_T  e_ul_ws;
    SDL_Octet  link_qua_meas_mod;
    GLOBAL_TFI_T  global_tfi;
    GLOBAL_PACKET_TIMING_ADVANCE_T  global_timing_advance;
    SDL_Boolean  dl_tfi_assignment_present;
    SDL_Octet  dl_tfi_assignment;
    SDL_Boolean  ul_tfi_assignment_present;
    SDL_Octet  ul_tfi_assignment;
    FREQ_PARS_T  freq_pars;
    DYNAMIC_ALLOC_T  dynamic_alloc;
    SDL_Octet  dl_ts_allocation;
    SDL_Boolean  packet_extended_timing_advance_present;
    SDL_Octet  packet_extended_timing_advance;
    SDL_Boolean  additions_present;
    SDL_Boolean  is_polling;
    SDL_Octet  polling_rrbp;
} PACKET_TIMESLOT_RECONFIGURE_T;


typedef struct PACKET_DOWNLINK_ACK_NACK_T_s {
    SDL_Octet  downlink_tfi;
    ACK_NACK_DESCR_T  description;
    CHANNEL_REQUEST_DESCR_T  ch_req_descr;
    CHANNEL_QUALITY_REP_T  ch_quality_rep;
    SDL_Boolean  is_r99;
    SDL_Boolean  pfi_present;
    SDL_Octet  pfi;
} PACKET_DOWNLINK_ACK_NACK_T;


typedef struct PACKET_RESOURCE_REQUEST_T_s {
    SDL_Boolean  is_r99;
    SDL_Boolean  access_type_present;
    SDL_Octet  access_type;
    SDL_Boolean  change_mark_present;
    SDL_Octet  change_mark;
    GLOBAL_TFI_T  global_tfi;
    z_ctypes_A_UnsignedLongInt  tlli;
    MS_RA_CAPABILITY_T  ms_ra_capability;
    CHANNEL_REQUEST_DESCR_T  ch_req_descr;
    TIMESLOT_VALUES_ARR_T  ts_values;
    SDL_Octet  c_value;
    SDL_Boolean  sign_var_present;
    SDL_Octet  sign_var;
    E_BEP_LINK_QUAL_MEAS  e_bep_link_qual_meas;
    E_TS_LINK_QUAL_MEAS  e_ts_link_qual_meas;
    SDL_Octet  pfi;
    SDL_Boolean  pfi_present;
    SDL_Octet  additional_ms_rac_info_availavle;
    SDL_Octet  retransmission_of_prr;
    SDL_Boolean  additions_present;
} PACKET_RESOURCE_REQUEST_T;


typedef struct ADD_RADIO_ACC_CAPAB_T_s {
    GLOBAL_TFI_T  global_tfi;
    z_ctypes_A_UnsignedLongInt  tlli;
    MS_RA_CAPABILITY_T  ms_ra_capability;
} ADD_RADIO_ACC_CAPAB_T;


typedef union MAC_CONTROL_MESSAGE_T_s {
    PACKET_ACCESS_REJECT_T  packet_access_reject;
    PACKET_CELL_CHANGE_ORDER_T  packet_cell_change_order;
    PACKET_DOWNLINK_ASSIGNMENT_T  packet_dl_assignment;
    PACKET_MEAS_ORDER_T  packet_measurement_order;
    PACKET_PAGING_REQUEST_T  packet_paging_request;
    PACKET_PDCH_RELEASE_T  packet_pdch_release;
    PACKET_POLLING_REQUEST_T  packet_polling_request;
    PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T  packet_pwr_ctrl_timing_adv;
    PACKET_PRACH_PARAMETERS_T  packet_prach_parameters;
    PACKET_QUEUEING_NOTIFICATION_T  packet_queuing_notification;
    PACKET_TIMESLOT_RECONFIGURE_T  packet_timeslot_reconfigure;
    PACKET_TBF_RELEASE_T  packet_tbf_release;
    PACKET_UPLINK_ACK_NACK_T  packet_uplink_ack_nack;
    PACKET_UPLINK_ASSIGNMENT_T  packet_uplink_assignment;
    PACKET_DL_DUMMY_CTRL_BLOCK_T  packet_dl_dummy_ctrl_block;
    PACKET_SYS_INFO_1_T  packet_sys_info_1;
    PACKET_SYS_INFO_2_T  packet_sys_info_2;
    PACKET_SYS_INFO_3_T  packet_sys_info_3;
    PACKET_SYS_INFO_3_BIS_T  packet_sys_info_3_bis;
    PACKET_SYS_INFO_4_T  packet_sys_info_4;
    PACKET_SYS_INFO_5_T  packet_sys_info_5;
    PACKET_SYS_INFO_13_T  packet_sys_info_13;
    RR_PACKET_UPLINK_ASSIGNMENT_T  rr_packet_uplink_assignment;
    RR_PACKET_DOWNLINK_ASSIGNMENT_T  rr_packet_downlink_assignment;
    IA_REST_OCTETS_T  ia_rest_octets;
    PACKET_CHANNEL_DESCRIPTION_T  packet_channel_description;
    PACKET_CTRL_ACK_11_T  packet_ctrl_ack_11;
    PACKET_CTRL_ACK_8_T  packet_ctrl_ack_8;
    PACKET_CELL_CHANGE_FAILURE_T  packet_cell_change_failure;
    PACKET_CTRL_ACK_T  packet_control_ack;
    PACKET_DOWNLINK_ACK_NACK_T  packet_downlink_ack_nack;
    PACKET_UL_DUMMY_CTRL_BLOCK_T  packet_ul_dummy_ctrl_block;
    PACKET_MEASUREMENT_REPORT_T  packet_measurement_report;
    PACKET_ENHANCED_MEASUREMENT_REPORT_T  packet_enhanced_measurement_report;
    PACKET_RESOURCE_REQUEST_T  packet_resource_request;
    PACKET_MOBILE_TBF_STATUS_T  packet_mobile_tbf_status;
    PACKET_PSI_STATUS_T  packet_psi_status;
    PACKET_CELL_CHANGE_CONTINUE_T  packet_cell_change_continue;
} MAC_CONTROL_MESSAGE_T;


typedef struct MOBILE_IDENTITY_T_s {
    MOBILE_TYPE_ID_E  type_identity;
    MOBILE_ID_UNION  mobile_id;
} MOBILE_IDENTITY_T;


typedef MSG_TYPE_E  GMM_MSG_TYPE_E;


typedef WAIT_INDICATION_T  RACH_REJ_VAL_T;


typedef struct MAC_ALLOC_INFO_T_s {
    TIMESLOT_T  ts_num;
    MAC_MODE_T  mac_mode;
    TBF_TYPE_T  tbf_type;
    z_ctypes_6_ShortInt  block_count;
} MAC_ALLOC_INFO_T;


typedef struct MAC_PARAMETERS_s {
    MS_BAND_E  ms_band;
    SDL_Boolean  pccch_present;
    PRACH_CTRL_PARAMETERS_T  prach_ctrl_pars;
    PERSIST_LEVEL_T  persist_level;
    ACC_CONTROL_CLASS_T  acc_ctrl_class;
    CONTROL_ACK_E  control_ack;
    AB_FORMAT_E  ab_format;
    z_ctypes_A_UnsignedLongInt  t3168_du;
    z_ctypes_A_UnsignedLongInt  t3192_du;
    SDL_Octet  bs_cv_max;
    SDL_Boolean  neci_value;
    SDL_Octet  psi2_change_mark;
    SDL_Octet  si13_change_mark;
    IMEI_T  imei;
    IMEISV_T  imeisv;
    BLOCK_PTR_T  ms_classmark_ptr;
    z_ctypes_8_UnsignedShortInt  n3104_max;
    GLOBAL_PWRC_PARAM_T  global_pwrc_param;
    SDL_Boolean  sct_test_active;
    SDL_Boolean  sct_get_ctrl_block;
    PMAX_T  pmax;
    MS_BAND_E  band_encode_res;
    MS_BAND_E  cell_band;
    IS_SGSN_R99_T  sgsn_version;
    SDL_Boolean  cell_supp_egprs;
    SDL_Boolean  cell_egprs_pkt_ch_req;
    SDL_Boolean  cell_supp_pfc;
    SDL_Boolean  cell_supp_dtm;
    SDL_Boolean  cell_supp_cs_pag_coord;
    SDL_Boolean  ms_supp_egprs;
    SDL_Octet  egprs_class_type;
} MAC_PARAMETERS;


typedef struct DL_TBF_PARAMETERS_s {
    TFI_T  downlink_tfi;
    SDL_Octet  dl_timeslot_masks;
    RLC_MODE_T  dl_rlc_mode;
    PH_MAC_MODE_T  dl_mac_mode;
    RLC_WS_T  dl_window_size;
    SDL_Boolean  is_egprs_tbf;
    SDL_Boolean  out_of_memory;
    SDL_Octet  link_quality_meas_mode;
} DL_TBF_PARAMETERS;


typedef PACKET_REQUEST_REF_T PACKET_REQ_REF_ARR_T[MAC_MAX_RER_REF_NUM];


typedef struct LLC_TRANS_Q_NODE_T_s {
    TLLI_T  tlli;
    PEAK_THROUGHPUT_CLASS_T  peak_throughput;
    RADIO_PRIORITY_T  radio_priority;
    RACH_ACCESS_T  access_type;
    LLC_DATA_TYPE_T  data_type;
    LLC_PDU_TYPE_T  pdu_type;
    LLC_FRAME_T  llc_frame;
} LLC_TRANS_Q_NODE_T;


typedef struct CELL_INFO_T_s {
    SDL_Boolean  cell_present;
    SDL_Boolean  si1_present;
    SDL_Boolean  si2_present;
    SDL_Boolean  si2bis_present;
    SDL_Boolean  si2ter_present;
    SDL_Boolean  si2quater_present;
    SDL_Boolean  si3_present;
    SDL_Boolean  si4_present;
    SDL_Boolean  si5_present;
    SDL_Boolean  si5bis_present;
    SDL_Boolean  si5ter_present;
    SDL_Boolean  si6_present;
    SDL_Boolean  si7_present;
    SDL_Boolean  si8_present;
    SDL_Boolean  si7_not_exist;
    SDL_Boolean  si8_not_exist;
    SDL_Boolean  si13_present;
    SDL_Boolean  psi1_present;
    SDL_Boolean  psi2_present;
    SDL_Boolean  psi3_present;
    SDL_Boolean  psi3bis_present;
    SDL_Boolean  psi4_present;
    SDL_Boolean  psi5_present;
    SDL_Boolean  psi8_present;
    SDL_Boolean  psi13_present;
    SDL_Boolean  pcs_band_ind;
    MS_BAND_E  cell_band;
    MS_BAND_E  plmn_band;
    ARFCN_T  arfcn;
    RSSI_T  rssi;
    BSIC_T  bsic;
    SDL_Boolean  bsic_exist;
    RACH_CONTROL_PARAM_T  rach_ctrl_param;
    ARFCN_LIST_T  ca_list;
    ARFCN_LIST_T  ba_list;
    ARFCN_LIST_T  whole_ba_list;
    SDL_Octet  ba_ind;
    SDL_Octet  ba_ind_3g;
    SDL_Octet  ba_2_ext_ind;
    SDL_Octet  ba_5_ext_ind;
    BA_LIST_ARR_T  ba_undecoded;
    BA_LIST_ARR_T  ba_undecoded_bis;
    BA_LIST_ARR_T  ba_undecoded_ter;
    SDL_Octet  ncc_permitted;
    CELL_ID_T  cell_id;
    LAI_T  lai;
    SDL_Octet  multiband_report;
    CCCH_T  ctrl_chan_desc;
    CELL_OPTION_T  cell_options;
    CELL_SELECTION_PARAM_T  cell_sel_param;
    OPTION_SEL_PARAM_T  option_sel_param;
    OPTION_POWER_OFFSET_T  option_power_offset;
    SDL_Octet  si_2ter_ind;
    SDL_Octet  si2quater_ind;
    BCCH_POSITION_E  si2quater_position;
    SDL_Boolean  early_classmark_send;
    SDL_Boolean  cbch_present;
    CHANNEL_DESCRIPTION_T  cbch_chan_desc;
    MA_BITMAP_T  cbch_ma_bitmap;
    GPRS_IND_T  gprs_ind;
    SDL_Octet  bcch_change_mark;
    SDL_Octet  si_change_field;
    SDL_Boolean  si13_gprs_ma_present;
    SDL_Octet  si13_change_mark;
    GPRS_MOBILE_ALLOCATION_T  si13_gprs_ma;
    SDL_Octet  rac;
    SDL_Boolean  spgc_ccch_sup;
    SDL_Octet  priority_access_thr;
    NC_ORDER_E  nc_order;
    GPRS_CELL_OPTIONS_IE_T  gprs_cell_options;
    GLOBAL_PWRC_PARAM_T  global_pwrc_param;
    SDL_Octet  psi1_repeat_period;
    PRACH_CTRL_PARAMETERS_T  prach_ctrl_param;
    PCCCH_ORG_PARAM_T  pccch_org_param;
    SDL_Boolean  psi_status_support;
    SDL_Octet  psi_change_field;
    SDL_Octet  psi_count_low_rate;
    SDL_Octet  psi_count_high_rate;
    SDL_Octet  pbcch_change_mark;
    SDL_Octet  psi2_change_mark;
    SDL_Octet  psi3_change_mark;
    SDL_Octet  psi4_change_mark;
    SDL_Octet  psi5_change_mark;
    SDL_Octet  psi8_change_mark;
    SDL_Octet  psi3_bis_count;
    SDL_Boolean  psi4_available;
    SDL_Boolean  psi5_available;
    SDL_Octet  rfl_count;
    REF_FREQ_LIST_ARR_T  ref_freq_list;
    SDL_Octet  ca_ref_count;
    CA_REF_NUM_ARR_T  ca_ref_num;
    ARFCN_LIST_T  gprs_ca_list;
    ARFCN_LIST_T  gprs_ba_list;
    SDL_Octet  gprs_ma_count;
    GPRS_MOBILE_ALLOC_ARR_T  gprs_ma;
    SDL_Octet  pccch_desc_count;
    RR_PCCCH_DESC_ARR_T  pccch_desc;
    SDL_Octet  meas_chan_count;
    MEAS_CHAN_ARR_T  meas_chan_list;
    SERVING_CELL_PARS_T  serv_cell_param;
    GENERAL_CELL_SEL_PARS_T  gen_sel_param;
    SDL_Octet  ncell_param_count;
    RR_NCELL_PARS_ARR_T  ncell_param;
    SDL_Boolean  meas_par_present;
    SDL_Boolean  nc_period_present;
    SDL_Octet  nc_non_drx_period;
    SDL_Octet  nc_reporting_period_i;
    SDL_Octet  nc_reporting_period_t;
    SDL_Boolean  ext_meas_par_present;
    CELL_EXT_MEAS_PARS_T  ext_meas_param;
    CELL_PRIO_E  cell_prio;
    z_ctypes_6_ShortInt  c1;
    z_ctypes_6_ShortInt  c2;
    z_ctypes_6_ShortInt  c31;
    z_ctypes_6_ShortInt  c32;
    z_ctypes_A_UnsignedLongInt  is_ncell_time;
    z_ctypes_A_UnsignedLongInt  rx_si3_time;
    z_ctypes_A_UnsignedLongInt  rx_si4_time;
    z_ctypes_A_UnsignedLongInt  rx_si7_time;
    z_ctypes_A_UnsignedLongInt  rx_si8_time;
    z_ctypes_A_UnsignedLongInt  rx_psi1_time;
    z_ctypes_A_UnsignedLongInt  search_start_time;
    BCCH_TC_MASK_T  tc_mask;
    SDL_Octet  tc0_norm_bad_times;
    SDL_Octet  tc1_norm_bad_times;
    SDL_Octet  tc2_norm_bad_times;
    SDL_Octet  tc3_norm_bad_times;
    SDL_Octet  tc4_norm_bad_times;
    SDL_Octet  tc5_norm_bad_times;
    SDL_Octet  tc6_norm_bad_times;
    SDL_Octet  tc7_norm_bad_times;
    SDL_Octet  tc0_ext_bad_times;
    SDL_Octet  tc3_ext_bad_times;
    SDL_Octet  tc5_ext_bad_times;
    SDL_Octet  tc7_ext_bad_times;
    z_ctypes_A_UnsignedLongInt  last_req_si3_time;
    RSSI_T  last_req_si_rssi;
    SDL_Octet  candidate_times;
    SDL_Boolean  pbcch_camping;
    SDL_Boolean  nc_report;
    SDL_Boolean  ext_nc_report;
    PAGING_MODE_E  page_mode;
    SDL_Boolean  pbcch_present;
    PBCCH_DESCRIPTION_T  pbcch_desc;
    z_ctypes_A_UnsignedLongInt  delta_fn;
    z_ctypes_6_ShortInt  otd;
    SDL_Octet  dsc_cur;
    IS_SGSN_R99_T  sgsnr;
    SDL_Boolean  bad_flag;
    z_ctypes_6_ShortInt  bsic_priority;
    SDL_Boolean  allow_emergency_call;
} CELL_INFO_T;


typedef struct CAMP_PARAM_T_s {
    ARFCN_T  arfcn;
    SI13_INDICATOR_E  si13_ind;
    SDL_Boolean  combined_ccch;
    CCCH_GROUP_T  ccch_group;
    z_ctypes_8_UnsignedShortInt  paging_group;
    SDL_Octet  bs_agblks_res;
    SDL_Octet  bs_pamfrms;
    TXPWR_T  txpwr;
    PAGING_MODE_E  paging_mode;
    ARFCN_LIST_T  ba_list;
    SDL_Boolean  pwrc;
    DTX_ALLOWED_E  dtx_allowed;
    RADIO_LINK_TIMEOUT_T  radio_link_timeout;
    SDL_Boolean  cbch_present;
    CHANNEL_DESCRIPTION_T  cbch_desc;
    ARFCN_LIST_T  cbch_ma_list;
    SDL_Boolean  gprs_requested;
    GLOBAL_PWRC_PARAM_T  global_pwrc_param;
    AB_FORMAT_E  access_burst_type;
    SDL_Boolean  short_vice_dsc_used;
    SDL_Octet  bep_period;
    SDL_Boolean  pch_tbf_nv_allowed;
    SDL_Boolean  pch_tbf_net_allowed;
} CAMP_PARAM_T;


typedef struct UL_TBF_PARAMETERS_s {
    RACH_ACCESS_T  rach_prach_type;
    RACH_ACCESS_T  access_type;
    z_ctypes_6_ShortInt  ms_tqi;
    PACKET_REQ_REF_ARR_T  req_ref_arr;
    RLC_MODE_T  ul_rlc_mode;
    TIMESLOT_T  n_timeslot;
    TFI_T  uplink_tfi;
    SDL_Octet  ul_timeslot_masks;
    z_ctypes_6_ShortInt  rlc_data_blocks_num;
    PH_MAC_MODE_T  ph_mac_mode;
    CODING_SCHEME_T  ul_coding_scheme;
    z_ctypes_8_UnsignedShortInt  n3104;
    SDL_Boolean  r_bit;
    CODING_SCHEME_T  e_ul_coding_scheme;
    SDL_Boolean  resegment;
    RLC_WS_T  ul_window_size;
    SDL_Boolean  is_egprs_tbf;
    SDL_Boolean  access_tech_req_present;
    ACCESS_TECH_REQ_T  access_tech_req;
    SDL_Boolean  is_11bit_prach;
    SDL_Boolean  egprs_channel_req_sent;
    SDL_Boolean  is_prr_in_onephase;
    SDL_Octet  multi_block_alloc_num;
    SDL_Boolean  need_start_t3164;
    z_ctypes_8_UnsignedShortInt  retry_rach_num;
} UL_TBF_PARAMETERS;


typedef struct TBF_PARAMETERS_s {
    TBF_DIRECTION_T  tbf_direction;
    UL_STATE_T  ul_tbf_state;
    UL_ONE_PAHSE_ACCESS_STATE_T  one_phase_state;
    UL_TWO_PAHSE_ACCESS_STATE_T  two_phase_state;
    UL_TBF_PARAMETERS  ul_para;
    DL_STATE_T  dl_tbf_state;
    DL_TBF_PARAMETERS  dl_para;
    SDL_Boolean  is_dl_single_block;
    TLLI_T  tlli;
    TLLI_T  tlli_old;
    TLLI_T  dl_assign_tlli;
    SDL_Octet  bep_period2;
    SDL_Boolean  is_egprs_sct_begin;
    SDL_Boolean  egprs_sct_loopback_on;
    GAMMA_ARR_T  gamma_arr;
} TBF_PARAMETERS;

#define yAssF_OCTET_PTR_PTR_T(V,E,A)  V = E
#define yDef_OCTET_PTR_PTR_T(yVar)  *(yVar) = z0JF0_Null()
#define yEqF_OCTET_PTR_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_OCTET_PTR_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_OCTET_PTR_PTR_T
#define ANY_OCTET_PTR_PTR_T 0
#endif
#define z0JFF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_OCTET_PTR_PTR_T() (OCTET_PTR_PTR_T)XALLOC_REF_VAL(sizeof(OCTET_PTR_T), ySrtN_OCTET_PTR_PTR_T)
#else
#define yAll_OCTET_PTR_PTR_T() (OCTET_PTR_PTR_T)XALLOC(sizeof(OCTET_PTR_T), \
  &ySrtR_OCTET_PTR_PTR_T)
#endif
#define yPlus_OCTET_PTR_PTR_T(P1,P2) (P1+P2)
#define yMinus_OCTET_PTR_PTR_T(P1,P2) (P1-P2)
#define z0JF0_Null() 0
#define z0JF1_Alloc() yAll_OCTET_PTR_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0JF6_free(P) XFREE_REF_VAL((void **)(P), sizeof(OCTET_PTR_T))
#else
#define z0JF6_free(P) XFREE((void **)(P), sizeof(OCTET_PTR_T))
#endif
#define z0JF9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0JFA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0JFB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_SHORTINT_PTR_T(V,E,A)  V = E
#define yDef_SHORTINT_PTR_T(yVar)  *(yVar) = z0JG0_Null()
#define yEqF_SHORTINT_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SHORTINT_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SHORTINT_PTR_T
#define ANY_SHORTINT_PTR_T 0
#endif
#define z0JGF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_SHORTINT_PTR_T() (SHORTINT_PTR_T)XALLOC_REF_VAL(sizeof(z_ctypes_6_ShortInt), ySrtN_SHORTINT_PTR_T)
#else
#define yAll_SHORTINT_PTR_T() (SHORTINT_PTR_T)XALLOC(sizeof(z_ctypes_6_ShortInt), \
  &ySrtR_SHORTINT_PTR_T)
#endif
#define yPlus_SHORTINT_PTR_T(P1,P2) (P1+P2)
#define yMinus_SHORTINT_PTR_T(P1,P2) (P1-P2)
#define z0JG0_Null() 0
#define z0JG1_Alloc() yAll_SHORTINT_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0JG6_free(P) XFREE_REF_VAL((void **)(P), sizeof(SDL_Integer))
#else
#define z0JG6_free(P) XFREE((void **)(P), sizeof(SDL_Integer))
#endif
#define z0JG9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0JGA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0JGB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

extern void yAss_MAC_MSG_BLOCK_ARR_T XPP((MAC_MSG_BLOCK_ARR_T,
  MAC_MSG_BLOCK_ARR_T, int));
#define yAssF_MAC_MSG_BLOCK_ARR_T(V,E,A)  yAss_MAC_MSG_BLOCK_ARR_T(V,E,A)
#define yEqF_MAC_MSG_BLOCK_ARR_T(Expr1,Expr2)  yEq_MAC_MSG_BLOCK_ARR_T(Expr1,Expr2)
#define yNEqF_MAC_MSG_BLOCK_ARR_T(Expr1,Expr2)  ( ! yEq_MAC_MSG_BLOCK_ARR_T(Expr1,Expr2) )
#define yTstI_MAC_MSG_BLOCK_ARR_T(yExpr)  yExpr
#ifndef ANY_MAC_MSG_BLOCK_ARR_T
#define ANY_MAC_MSG_BLOCK_ARR_T
#endif
#define z0JH5_copy(P)  P

#define yAssF_RELIABILITY_CLASS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RELIABILITY_CLASS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RELIABILITY_CLASS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RELIABILITY_CLASS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_RELIABILITY_CLASS_T(yExpr)  yExpr
#define yTstI_RELIABILITY_CLASS_T(yExpr)  yExpr
#ifndef ANY_RELIABILITY_CLASS_T
#define ANY_RELIABILITY_CLASS_T (RELIABILITY_CLASS_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(7)+1))
#endif

#define yAssF_PEAK_THROUGHPUT_CLASS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_PEAK_THROUGHPUT_CLASS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_PEAK_THROUGHPUT_CLASS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_PEAK_THROUGHPUT_CLASS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_PEAK_THROUGHPUT_CLASS_T(yExpr)  yExpr
#define yTstI_PEAK_THROUGHPUT_CLASS_T(yExpr)  yExpr
#ifndef ANY_PEAK_THROUGHPUT_CLASS_T
#define ANY_PEAK_THROUGHPUT_CLASS_T (PEAK_THROUGHPUT_CLASS_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(15)+1))
#endif

#define yAssF_MEAN_THROUGHPUT_CLASS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_MEAN_THROUGHPUT_CLASS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_MEAN_THROUGHPUT_CLASS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_MEAN_THROUGHPUT_CLASS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_MEAN_THROUGHPUT_CLASS_T(yExpr)  yExpr
#define yTstI_MEAN_THROUGHPUT_CLASS_T(yExpr)  yExpr
#ifndef ANY_MEAN_THROUGHPUT_CLASS_T
#define ANY_MEAN_THROUGHPUT_CLASS_T (MEAN_THROUGHPUT_CLASS_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(31)+1))
#endif

#define yAssF_DELAY_CLASS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_DELAY_CLASS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_DELAY_CLASS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_DELAY_CLASS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_DELAY_CLASS_T(yExpr)  yExpr
#define yTstI_DELAY_CLASS_T(yExpr)  yExpr
#ifndef ANY_DELAY_CLASS_T
#define ANY_DELAY_CLASS_T (DELAY_CLASS_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(7)+1))
#endif

#define yAssF_PRECEDENCE_CLASS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_PRECEDENCE_CLASS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_PRECEDENCE_CLASS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_PRECEDENCE_CLASS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_PRECEDENCE_CLASS_T(yExpr)  yExpr
#define yTstI_PRECEDENCE_CLASS_T(yExpr)  yExpr
#ifndef ANY_PRECEDENCE_CLASS_T
#define ANY_PRECEDENCE_CLASS_T (PRECEDENCE_CLASS_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(7)+1))
#endif

#define yAssF_DELIVERY_OF_ERR_SDU_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_DELIVERY_OF_ERR_SDU_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_DELIVERY_OF_ERR_SDU_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_DELIVERY_OF_ERR_SDU_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_DELIVERY_OF_ERR_SDU_T(yExpr)  yExpr
#define yTstI_DELIVERY_OF_ERR_SDU_T(yExpr)  yExpr
#ifndef ANY_DELIVERY_OF_ERR_SDU_T
#define ANY_DELIVERY_OF_ERR_SDU_T (DELIVERY_OF_ERR_SDU_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(7)+1))
#endif

#define yAssF_DELIVERY_ORDER_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_DELIVERY_ORDER_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_DELIVERY_ORDER_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_DELIVERY_ORDER_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_DELIVERY_ORDER_T(yExpr)  yExpr
#define yTstI_DELIVERY_ORDER_T(yExpr)  yExpr
#ifndef ANY_DELIVERY_ORDER_T
#define ANY_DELIVERY_ORDER_T (DELIVERY_ORDER_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(3)+1))
#endif

#define yAssF_TRAFFIC_CLASS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_TRAFFIC_CLASS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_TRAFFIC_CLASS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_TRAFFIC_CLASS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_TRAFFIC_CLASS_T(yExpr)  yExpr
#define yTstI_TRAFFIC_CLASS_T(yExpr)  yExpr
#ifndef ANY_TRAFFIC_CLASS_T
#define ANY_TRAFFIC_CLASS_T (TRAFFIC_CLASS_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(7)+1))
#endif

#define yAssF_MAX_SDU_SIZE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_MAX_SDU_SIZE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_MAX_SDU_SIZE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_MAX_SDU_SIZE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_MAX_SDU_SIZE_T(yExpr)  yExpr
#define yTstI_MAX_SDU_SIZE_T(yExpr)  yExpr
#ifndef ANY_MAX_SDU_SIZE_T
#define ANY_MAX_SDU_SIZE_T (MAX_SDU_SIZE_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(255)+1))
#endif

#define yAssF_MAX_BIT_RATE_FOR_UPLINK_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_MAX_BIT_RATE_FOR_UPLINK_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_MAX_BIT_RATE_FOR_UPLINK_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_MAX_BIT_RATE_FOR_UPLINK_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_MAX_BIT_RATE_FOR_UPLINK_T(yExpr)  yExpr
#define yTstI_MAX_BIT_RATE_FOR_UPLINK_T(yExpr)  yExpr
#ifndef ANY_MAX_BIT_RATE_FOR_UPLINK_T
#define ANY_MAX_BIT_RATE_FOR_UPLINK_T (MAX_BIT_RATE_FOR_UPLINK_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(255)+1))
#endif

#define yAssF_MAX_BIT_RATE_FOR_DOWNLINK_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_MAX_BIT_RATE_FOR_DOWNLINK_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_MAX_BIT_RATE_FOR_DOWNLINK_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_MAX_BIT_RATE_FOR_DOWNLINK_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_MAX_BIT_RATE_FOR_DOWNLINK_T(yExpr)  yExpr
#define yTstI_MAX_BIT_RATE_FOR_DOWNLINK_T(yExpr)  yExpr
#ifndef ANY_MAX_BIT_RATE_FOR_DOWNLINK_T
#define ANY_MAX_BIT_RATE_FOR_DOWNLINK_T (MAX_BIT_RATE_FOR_DOWNLINK_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(255)+1))
#endif

#define yAssF_RESIDUAL_BER_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RESIDUAL_BER_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RESIDUAL_BER_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RESIDUAL_BER_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_RESIDUAL_BER_T(yExpr)  yExpr
#define yTstI_RESIDUAL_BER_T(yExpr)  yExpr
#ifndef ANY_RESIDUAL_BER_T
#define ANY_RESIDUAL_BER_T (RESIDUAL_BER_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(15)+1))
#endif

#define yAssF_SDU_ERR_RATIO_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_SDU_ERR_RATIO_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_SDU_ERR_RATIO_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_SDU_ERR_RATIO_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_SDU_ERR_RATIO_T(yExpr)  yExpr
#define yTstI_SDU_ERR_RATIO_T(yExpr)  yExpr
#ifndef ANY_SDU_ERR_RATIO_T
#define ANY_SDU_ERR_RATIO_T (SDU_ERR_RATIO_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(15)+1))
#endif

#define yAssF_TRAFFIC_HANDLING_PRIO_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_TRAFFIC_HANDLING_PRIO_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_TRAFFIC_HANDLING_PRIO_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_TRAFFIC_HANDLING_PRIO_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_TRAFFIC_HANDLING_PRIO_T(yExpr)  yExpr
#define yTstI_TRAFFIC_HANDLING_PRIO_T(yExpr)  yExpr
#ifndef ANY_TRAFFIC_HANDLING_PRIO_T
#define ANY_TRAFFIC_HANDLING_PRIO_T (TRAFFIC_HANDLING_PRIO_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(3)+1))
#endif

#define yAssF_TRAFFIC_HANDING_PRIO_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_TRAFFIC_HANDING_PRIO_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_TRAFFIC_HANDING_PRIO_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_TRAFFIC_HANDING_PRIO_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_TRAFFIC_HANDING_PRIO_T(yExpr)  yExpr
#define yTstI_TRAFFIC_HANDING_PRIO_T(yExpr)  yExpr
#ifndef ANY_TRAFFIC_HANDING_PRIO_T
#define ANY_TRAFFIC_HANDING_PRIO_T (TRAFFIC_HANDING_PRIO_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(63)+1))
#endif

#define yAssF_GUARANTEED_BIT_RATE_FOR_UPLINK_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_GUARANTEED_BIT_RATE_FOR_UPLINK_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_GUARANTEED_BIT_RATE_FOR_UPLINK_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_GUARANTEED_BIT_RATE_FOR_UPLINK_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_GUARANTEED_BIT_RATE_FOR_UPLINK_T(yExpr)  yExpr
#define yTstI_GUARANTEED_BIT_RATE_FOR_UPLINK_T(yExpr)  yExpr
#ifndef ANY_GUARANTEED_BIT_RATE_FOR_UPLINK_T
#define ANY_GUARANTEED_BIT_RATE_FOR_UPLINK_T (GUARANTEED_BIT_RATE_FOR_UPLINK_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(255)+1))
#endif

#define yAssF_GUARANTEED_BIT_RATE_FOR_DOWNLINK_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_GUARANTEED_BIT_RATE_FOR_DOWNLINK_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_GUARANTEED_BIT_RATE_FOR_DOWNLINK_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_GUARANTEED_BIT_RATE_FOR_DOWNLINK_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_GUARANTEED_BIT_RATE_FOR_DOWNLINK_T(yExpr)  yExpr
#define yTstI_GUARANTEED_BIT_RATE_FOR_DOWNLINK_T(yExpr)  yExpr
#ifndef ANY_GUARANTEED_BIT_RATE_FOR_DOWNLINK_T
#define ANY_GUARANTEED_BIT_RATE_FOR_DOWNLINK_T (GUARANTEED_BIT_RATE_FOR_DOWNLINK_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(255)+1))
#endif

#define yAssF_TOTAL_QOS_T(V,E,A)  V = E
#define yEqF_TOTAL_QOS_T(Expr1,Expr2)  yEq_TOTAL_QOS_T(Expr1,Expr2)
#define yNEqF_TOTAL_QOS_T(Expr1,Expr2)  ( ! yEq_TOTAL_QOS_T(Expr1,Expr2) )
#ifndef ANY_TOTAL_QOS_T
#define ANY_TOTAL_QOS_T yMake_TOTAL_QOS_T(ANY_RELIABILITY_CLASS_T, \
  ANY_PEAK_THROUGHPUT_CLASS_T, ANY_DELAY_CLASS_T, ANY_PRECEDENCE_CLASS_T, \
  ANY_MEAN_THROUGHPUT_CLASS_T, ANY_SDL_Boolean, ANY_DELIVERY_OF_ERR_SDU_T, \
  ANY_DELIVERY_ORDER_T, ANY_TRAFFIC_CLASS_T, ANY_MAX_SDU_SIZE_T, \
  ANY_MAX_BIT_RATE_FOR_UPLINK_T, ANY_MAX_BIT_RATE_FOR_DOWNLINK_T, \
  ANY_RESIDUAL_BER_T, ANY_SDU_ERR_RATIO_T, ANY_TRAFFIC_HANDLING_PRIO_T, \
  ANY_TRAFFIC_HANDING_PRIO_T, ANY_GUARANTEED_BIT_RATE_FOR_UPLINK_T, \
  ANY_GUARANTEED_BIT_RATE_FOR_DOWNLINK_T)
#endif
#define z0JI03_copy(P)  P

#define yAssF_QOS_PARAM_T(V,E,A)  V = E
#define yEqF_QOS_PARAM_T(Expr1,Expr2)  yEq_QOS_PARAM_T(Expr1,Expr2)
#define yNEqF_QOS_PARAM_T(Expr1,Expr2)  ( ! yEq_QOS_PARAM_T(Expr1,Expr2) )
#ifndef ANY_QOS_PARAM_T
#define ANY_QOS_PARAM_T yMake_QOS_PARAM_T(ANY_RELIABILITY_CLASS_T, \
  ANY_PEAK_THROUGHPUT_CLASS_T)
#endif
#define z0JJ3_copy(P)  P

#define yAssF_L3_SIZE_T(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_L3_SIZE_T(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_L3_SIZE_T(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_L3_SIZE_T(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#define yTstA_L3_SIZE_T(yExpr)  yExpr
#define yTstI_L3_SIZE_T(yExpr)  yExpr
#ifndef ANY_L3_SIZE_T
#define ANY_L3_SIZE_T (L3_SIZE_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(251)+1))
#endif

extern void yAss_L3_MESSAGE_ARR_T XPP((L3_MESSAGE_ARR_T, L3_MESSAGE_ARR_T,
  int));
#define yAssF_L3_MESSAGE_ARR_T(V,E,A)  yAss_L3_MESSAGE_ARR_T(V,E,A)
#define yEqF_L3_MESSAGE_ARR_T(Expr1,Expr2)  yEq_L3_MESSAGE_ARR_T(Expr1,Expr2)
#define yNEqF_L3_MESSAGE_ARR_T(Expr1,Expr2)  ( ! yEq_L3_MESSAGE_ARR_T(Expr1,Expr2) )
#define yTstI_L3_MESSAGE_ARR_T(yExpr)  yExpr
#ifndef ANY_L3_MESSAGE_ARR_T
#define ANY_L3_MESSAGE_ARR_T
#endif
#define z0JK5_copy(P)  P

#define yAssF_L2_INFO_PTR_T(V,E,A)  V = E
#define yDef_L2_INFO_PTR_T(yVar)  *(yVar) = z0JL0_Null()
#define yEqF_L2_INFO_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_L2_INFO_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_L2_INFO_PTR_T
#define ANY_L2_INFO_PTR_T 0
#endif
#define z0JLF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_L2_INFO_PTR_T() (L2_INFO_PTR_T)XALLOC_REF_VAL(sizeof(L2_MESSAGE_ARR_T), ySrtN_L2_INFO_PTR_T)
#else
#define yAll_L2_INFO_PTR_T() (L2_INFO_PTR_T)XALLOC(sizeof(L2_MESSAGE_ARR_T), \
  &ySrtR_L2_INFO_PTR_T)
#endif
#define yPlus_L2_INFO_PTR_T(P1,P2) (P1+P2)
#define yMinus_L2_INFO_PTR_T(P1,P2) (P1-P2)
#define z0JL0_Null() 0
#define z0JL1_Alloc() yAll_L2_INFO_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0JL6_free(P) XFREE_REF_VAL((void **)(P), sizeof(L2_MESSAGE_ARR_T))
#else
#define z0JL6_free(P) XFREE((void **)(P), sizeof(L2_MESSAGE_ARR_T))
#endif
#define z0JL9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0JLA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0JLB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_L3_INFO_PTR_T(V,E,A)  V = E
#define yDef_L3_INFO_PTR_T(yVar)  *(yVar) = z0JM0_Null()
#define yEqF_L3_INFO_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_L3_INFO_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_L3_INFO_PTR_T
#define ANY_L3_INFO_PTR_T 0
#endif
#define z0JMF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_L3_INFO_PTR_T() (L3_INFO_PTR_T)XALLOC_REF_VAL(sizeof(L3_MESSAGE_ARR_T), ySrtN_L3_INFO_PTR_T)
#else
#define yAll_L3_INFO_PTR_T() (L3_INFO_PTR_T)XALLOC(sizeof(L3_MESSAGE_ARR_T), \
  &ySrtR_L3_INFO_PTR_T)
#endif
#define yPlus_L3_INFO_PTR_T(P1,P2) (P1+P2)
#define yMinus_L3_INFO_PTR_T(P1,P2) (P1-P2)
#define z0JM0_Null() 0
#define z0JM1_Alloc() yAll_L3_INFO_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0JM6_free(P) XFREE_REF_VAL((void **)(P), sizeof(L3_MESSAGE_ARR_T))
#else
#define z0JM6_free(P) XFREE((void **)(P), sizeof(L3_MESSAGE_ARR_T))
#endif
#define z0JM9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0JMA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0JMB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_ATC_PC_TYPE_E(V,E,A)  V = E
#define yDef_ATC_PC_TYPE_E(yVar)  *(yVar) = ATC_PC_OFF
#define yEqF_ATC_PC_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_ATC_PC_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_ATC_PC_TYPE_E
#define ANY_ATC_PC_TYPE_E (ATC_PC_TYPE_E)(0 + GETINTRAND%((int)(ATC_PC_RFC2507) \
  +1))
#endif
#define z0JN7_copy(P)  P

#define yAssF_ATC_DC_TYPE_E(V,E,A)  V = E
#define yDef_ATC_DC_TYPE_E(yVar)  *(yVar) = ATC_DC_OFF
#define yEqF_ATC_DC_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_ATC_DC_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_ATC_DC_TYPE_E
#define ANY_ATC_DC_TYPE_E (ATC_DC_TYPE_E)(0 + GETINTRAND%((int)(ATC_DC_V42BIS) \
  +1))
#endif
#define z0JO6_copy(P)  P

#define yAssF_COMPRESS_INFO_T(V,E,A)  V = E
#define yEqF_COMPRESS_INFO_T(Expr1,Expr2)  yEq_COMPRESS_INFO_T(Expr1,Expr2)
#define yNEqF_COMPRESS_INFO_T(Expr1,Expr2)  ( ! yEq_COMPRESS_INFO_T(Expr1,Expr2) )
#ifndef ANY_COMPRESS_INFO_T
#define ANY_COMPRESS_INFO_T yMake_COMPRESS_INFO_T(ANY_ATC_PC_TYPE_E, \
  ANY_ATC_DC_TYPE_E)
#endif
#define z0JP3_copy(P)  P

#define yAssF_XID_BLOCK_PTR_T(V,E,A)  yAssF_OCTET_PTR_T(V,E,A)
#define yDef_XID_BLOCK_PTR_T(yVar)  *(yVar) = z0N40_Null()
#define yEqF_XID_BLOCK_PTR_T(Expr1,Expr2)  yEqF_OCTET_PTR_T(Expr1,Expr2)
#define yNEqF_XID_BLOCK_PTR_T(Expr1,Expr2)  yNEqF_OCTET_PTR_T(Expr1,Expr2)
#ifndef ANY_XID_BLOCK_PTR_T
#define ANY_XID_BLOCK_PTR_T ANY_OCTET_PTR_T
#endif

#define yAssF_XID_BLOCK_SIZE_T(V,E,A)  yAssF_z_ctypes_A_UnsignedLongInt(V,E,A)
#define yDef_XID_BLOCK_SIZE_T(yVar) \
  yDef_z_ctypes_A_UnsignedLongInt((z_ctypes_A_UnsignedLongInt *)yVar)
#define yEqF_XID_BLOCK_SIZE_T(Expr1,Expr2)  yEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#define yNEqF_XID_BLOCK_SIZE_T(Expr1,Expr2)  yNEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#ifndef ANY_XID_BLOCK_SIZE_T
#define ANY_XID_BLOCK_SIZE_T ANY_SDL_Integer
#endif

#define yAssF_N201_U_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_N201_U_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_N201_U_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_N201_U_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_N201_U_T(yExpr)  yExpr
#define yTstI_N201_U_T(yExpr)  yExpr
#ifndef ANY_N201_U_T
#define ANY_N201_U_T (N201_U_T)(SDL_INTEGER_LIT(140) + \
  GETINTRAND%(SDL_INTEGER_LIT(1520) - SDL_INTEGER_LIT(140)+1))
#endif

#define yAssF_N201_I_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_N201_I_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_N201_I_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_N201_I_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_N201_I_T(yExpr)  yExpr
#define yTstI_N201_I_T(yExpr)  yExpr
#ifndef ANY_N201_I_T
#define ANY_N201_I_T (N201_I_T)(SDL_INTEGER_LIT(140) + \
  GETINTRAND%(SDL_INTEGER_LIT(1520) - SDL_INTEGER_LIT(140)+1))
#endif

#define yAssF_PDU_PTR_T(V,E,A)  yAssF_OCTET_PTR_T(V,E,A)
#define yDef_PDU_PTR_T(yVar)  *(yVar) = z0N40_Null()
#define yEqF_PDU_PTR_T(Expr1,Expr2)  yEqF_OCTET_PTR_T(Expr1,Expr2)
#define yNEqF_PDU_PTR_T(Expr1,Expr2)  yNEqF_OCTET_PTR_T(Expr1,Expr2)
#ifndef ANY_PDU_PTR_T
#define ANY_PDU_PTR_T ANY_OCTET_PTR_T
#endif

#define yAssF_PDU_SIZE_T(V,E,A)  yAssF_z_ctypes_A_UnsignedLongInt(V,E,A)
#define yDef_PDU_SIZE_T(yVar) \
  yDef_z_ctypes_A_UnsignedLongInt((z_ctypes_A_UnsignedLongInt *)yVar)
#define yEqF_PDU_SIZE_T(Expr1,Expr2)  yEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#define yNEqF_PDU_SIZE_T(Expr1,Expr2)  yNEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#ifndef ANY_PDU_SIZE_T
#define ANY_PDU_SIZE_T ANY_SDL_Integer
#endif

#define yAssF_NSAPI_NUM_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_NSAPI_NUM_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_NSAPI_NUM_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_NSAPI_NUM_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_NSAPI_NUM_T(yExpr)  yExpr
#define yTstI_NSAPI_NUM_T(yExpr)  yExpr
#ifndef ANY_NSAPI_NUM_T
#define ANY_NSAPI_NUM_T (NSAPI_NUM_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(15)+1))
#endif

#define yAssF_CIPHER_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_CIPHER_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_CIPHER_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_CIPHER_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_CIPHER_T(yExpr)  yExpr
#define yTstI_CIPHER_T(yExpr)  yExpr
#ifndef ANY_CIPHER_T
#define ANY_CIPHER_T (CIPHER_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(3)+1))
#endif

#define yAssF_RSSI_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RSSI_T(yVar)  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RSSI_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RSSI_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_RSSI_T
#define ANY_RSSI_T ANY_SDL_Integer
#endif

#define yAssF_CELL_ID_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_CELL_ID_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_CELL_ID_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_CELL_ID_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_CELL_ID_T
#define ANY_CELL_ID_T ANY_SDL_Integer
#endif

#define yAssF_MSG_HEADER_T(V,E,A)  V = E
#define yEqF_MSG_HEADER_T(Expr1,Expr2)  yEq_MSG_HEADER_T(Expr1,Expr2)
#define yNEqF_MSG_HEADER_T(Expr1,Expr2)  ( ! yEq_MSG_HEADER_T(Expr1,Expr2) )
#ifndef ANY_MSG_HEADER_T
#define ANY_MSG_HEADER_T yMake_MSG_HEADER_T(ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0JQ3_copy(P)  P

#define yAssF_SYNC_CAUSE_E(V,E,A)  V = E
#define yDef_SYNC_CAUSE_E(yVar)  *(yVar) = CIPHERING
#define yEqF_SYNC_CAUSE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SYNC_CAUSE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SYNC_CAUSE_E
#define ANY_SYNC_CAUSE_E (SYNC_CAUSE_E)(0 + GETINTRAND%((int)(NO_CIPHERING)+1))
#endif
#define z0JR7_copy(P)  P

#define yAssF_GSM_CAUSE_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_GSM_CAUSE_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_GSM_CAUSE_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_GSM_CAUSE_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_GSM_CAUSE_T
#define ANY_GSM_CAUSE_T ANY_SDL_Integer
#endif

#define yAssF_GSM_EST_TYPE_E(V,E,A)  V = E
#define yDef_GSM_EST_TYPE_E(yVar)  *(yVar) = MM_LOCATION_UPDATE
#define yEqF_GSM_EST_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_GSM_EST_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_GSM_EST_TYPE_E
#define ANY_GSM_EST_TYPE_E (GSM_EST_TYPE_E)(0 + \
  GETINTRAND%((int)(SINGLE_BLOCK_PACKET_ACCESS)+1))
#endif
#define z0JSD_copy(P)  P

#define yAssF_RACH_ACCESS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RACH_ACCESS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RACH_ACCESS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RACH_ACCESS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_RACH_ACCESS_T
#define ANY_RACH_ACCESS_T ANY_SDL_Integer
#endif

#define yAssF_FRAME_PTR_T(V,E,A)  yAssF_OCTET_PTR_T(V,E,A)
#define yDef_FRAME_PTR_T(yVar)  *(yVar) = z0N40_Null()
#define yEqF_FRAME_PTR_T(Expr1,Expr2)  yEqF_OCTET_PTR_T(Expr1,Expr2)
#define yNEqF_FRAME_PTR_T(Expr1,Expr2)  yNEqF_OCTET_PTR_T(Expr1,Expr2)
#ifndef ANY_FRAME_PTR_T
#define ANY_FRAME_PTR_T ANY_OCTET_PTR_T
#endif

#define yAssF_FRAME_SIZE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_FRAME_SIZE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_FRAME_SIZE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_FRAME_SIZE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_FRAME_SIZE_T
#define ANY_FRAME_SIZE_T ANY_SDL_Integer
#endif

#define yAssF_LLC_DATA_TYPE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_LLC_DATA_TYPE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_LLC_DATA_TYPE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_LLC_DATA_TYPE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_LLC_DATA_TYPE_T
#define ANY_LLC_DATA_TYPE_T ANY_SDL_Integer
#endif

#define yAssF_LLC_TRANS_Q_NODE_T(V,E,A)  V = E
#define yEqF_LLC_TRANS_Q_NODE_T(Expr1,Expr2)  yEq_LLC_TRANS_Q_NODE_T(Expr1,Expr2)
#define yNEqF_LLC_TRANS_Q_NODE_T(Expr1,Expr2)  ( ! yEq_LLC_TRANS_Q_NODE_T(Expr1,Expr2) )
#ifndef ANY_LLC_TRANS_Q_NODE_T
#define ANY_LLC_TRANS_Q_NODE_T yMake_LLC_TRANS_Q_NODE_T(ANY_TLLI_T, \
  ANY_PEAK_THROUGHPUT_CLASS_T, ANY_RADIO_PRIORITY_T, ANY_RACH_ACCESS_T, \
  ANY_LLC_DATA_TYPE_T, ANY_LLC_PDU_TYPE_T, ANY_LLC_FRAME_T)
#endif
#define z0JT3_copy(P)  P

#define yAssF_LLC_FRAME_T(V,E,A)  V = E
#define yEqF_LLC_FRAME_T(Expr1,Expr2)  yEq_LLC_FRAME_T(Expr1,Expr2)
#define yNEqF_LLC_FRAME_T(Expr1,Expr2)  ( ! yEq_LLC_FRAME_T(Expr1,Expr2) )
#ifndef ANY_LLC_FRAME_T
#define ANY_LLC_FRAME_T yMake_LLC_FRAME_T(ANY_FRAME_PTR_T, ANY_FRAME_SIZE_T)
#endif
#define z0JU3_copy(P)  P

#define yAssF_LLC_TRANS_Q_PTR_T(V,E,A)  V = E
#define yDef_LLC_TRANS_Q_PTR_T(yVar)  *(yVar) = z0JV0_Null()
#define yEqF_LLC_TRANS_Q_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_LLC_TRANS_Q_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_LLC_TRANS_Q_PTR_T
#define ANY_LLC_TRANS_Q_PTR_T 0
#endif
#define z0JVF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_LLC_TRANS_Q_PTR_T() (LLC_TRANS_Q_PTR_T)XALLOC_REF_VAL(sizeof(LLC_TRANS_Q_NODE_T), ySrtN_LLC_TRANS_Q_PTR_T)
#else
#define yAll_LLC_TRANS_Q_PTR_T() (LLC_TRANS_Q_PTR_T)XALLOC(sizeof(LLC_TRANS_Q_NODE_T), \
  &ySrtR_LLC_TRANS_Q_PTR_T)
#endif
#define yPlus_LLC_TRANS_Q_PTR_T(P1,P2) (P1+P2)
#define yMinus_LLC_TRANS_Q_PTR_T(P1,P2) (P1-P2)
#define z0JV0_Null() 0
#define z0JV1_Alloc() yAll_LLC_TRANS_Q_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0JV6_free(P) XFREE_REF_VAL((void **)(P), sizeof(LLC_TRANS_Q_NODE_T))
#else
#define z0JV6_free(P) XFREE((void **)(P), sizeof(LLC_TRANS_Q_NODE_T))
#endif
#define z0JV9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0JVA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0JVB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_LLC_FRAME_PTR_T(V,E,A)  V = E
#define yDef_LLC_FRAME_PTR_T(yVar)  *(yVar) = z0JW0_Null()
#define yEqF_LLC_FRAME_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_LLC_FRAME_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_LLC_FRAME_PTR_T
#define ANY_LLC_FRAME_PTR_T 0
#endif
#define z0JWF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_LLC_FRAME_PTR_T() (LLC_FRAME_PTR_T)XALLOC_REF_VAL(sizeof(LLC_FRAME_T), ySrtN_LLC_FRAME_PTR_T)
#else
#define yAll_LLC_FRAME_PTR_T() (LLC_FRAME_PTR_T)XALLOC(sizeof(LLC_FRAME_T), \
  &ySrtR_LLC_FRAME_PTR_T)
#endif
#define yPlus_LLC_FRAME_PTR_T(P1,P2) (P1+P2)
#define yMinus_LLC_FRAME_PTR_T(P1,P2) (P1-P2)
#define z0JW0_Null() 0
#define z0JW1_Alloc() yAll_LLC_FRAME_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0JW6_free(P) XFREE_REF_VAL((void **)(P), sizeof(LLC_FRAME_T))
#else
#define z0JW6_free(P) XFREE((void **)(P), sizeof(LLC_FRAME_T))
#endif
#define z0JW9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0JWA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0JWB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_NETWORK_MODE_E(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_NETWORK_MODE_E(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_NETWORK_MODE_E(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_NETWORK_MODE_E(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_NETWORK_MODE_E(yExpr)  yExpr
#define yTstI_NETWORK_MODE_E(yExpr)  yExpr
#ifndef ANY_NETWORK_MODE_E
#define ANY_NETWORK_MODE_E (NETWORK_MODE_E)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(3)+1))
#endif

#define yAssF_MNC_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_MNC_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_MNC_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_MNC_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_MNC_T
#define ANY_MNC_T ANY_SDL_Integer
#endif

#define yAssF_MCC_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_MCC_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_MCC_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_MCC_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_MCC_T
#define ANY_MCC_T ANY_SDL_Integer
#endif

#define yAssF_PLMN_T(V,E,A)  V = E
#define yEqF_PLMN_T(Expr1,Expr2)  yEq_PLMN_T(Expr1,Expr2)
#define yNEqF_PLMN_T(Expr1,Expr2)  ( ! yEq_PLMN_T(Expr1,Expr2) )
#ifndef ANY_PLMN_T
#define ANY_PLMN_T yMake_PLMN_T(ANY_MCC_T, ANY_MNC_T, ANY_z_ctypes_6_ShortInt)
#endif
#define z0JX3_copy(P)  P

#define yAssF_LAC_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_LAC_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_LAC_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_LAC_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_LAC_T
#define ANY_LAC_T ANY_SDL_Integer
#endif

#define yAssF_RAC_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_RAC_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_RAC_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_RAC_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_RAC_T
#define ANY_RAC_T ANY_SDL_Octet
#endif

#define yAssF_LAI_T(V,E,A)  V = E
#define yEqF_LAI_T(Expr1,Expr2)  yEq_LAI_T(Expr1,Expr2)
#define yNEqF_LAI_T(Expr1,Expr2)  ( ! yEq_LAI_T(Expr1,Expr2) )
#ifndef ANY_LAI_T
#define ANY_LAI_T yMake_LAI_T(ANY_MCC_T, ANY_MNC_T, ANY_z_ctypes_6_ShortInt, \
  ANY_LAC_T)
#endif
#define z0JY3_copy(P)  P

#define yAssF_CGI_T(V,E,A)  V = E
#define yEqF_CGI_T(Expr1,Expr2)  yEq_CGI_T(Expr1,Expr2)
#define yNEqF_CGI_T(Expr1,Expr2)  ( ! yEq_CGI_T(Expr1,Expr2) )
#ifndef ANY_CGI_T
#define ANY_CGI_T yMake_CGI_T(ANY_MCC_T, ANY_MNC_T, ANY_z_ctypes_6_ShortInt, \
  ANY_LAC_T, ANY_RAC_T, ANY_CELL_ID_T)
#endif
#define z0JZ3_copy(P)  P

#define yAssF_RAI_T(V,E,A)  V = E
#define yEqF_RAI_T(Expr1,Expr2)  yEq_RAI_T(Expr1,Expr2)
#define yNEqF_RAI_T(Expr1,Expr2)  ( ! yEq_RAI_T(Expr1,Expr2) )
#ifndef ANY_RAI_T
#define ANY_RAI_T yMake_RAI_T(ANY_MCC_T, ANY_MNC_T, ANY_z_ctypes_6_ShortInt, \
  ANY_LAC_T, ANY_RAC_T)
#endif
#define z0K03_copy(P)  P

#define yAssF_REEST_ALLOWED_OR_NOT_E(V,E,A)  V = E
#define yDef_REEST_ALLOWED_OR_NOT_E(yVar)  *(yVar) = REEST_NOT_ALLOWED
#define yEqF_REEST_ALLOWED_OR_NOT_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_REEST_ALLOWED_OR_NOT_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_REEST_ALLOWED_OR_NOT_E
#define ANY_REEST_ALLOWED_OR_NOT_E (REEST_ALLOWED_OR_NOT_E)(0 + \
  GETINTRAND%((int)(REEST_ALLOWED)+1))
#endif
#define z0K15_copy(P)  P

#define yAssF_CALL_PRIOR_E(V,E,A)  V = E
#define yDef_CALL_PRIOR_E(yVar)  *(yVar) = CALL_NO_PRIOR
#define yEqF_CALL_PRIOR_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CALL_PRIOR_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CALL_PRIOR_E
#define ANY_CALL_PRIOR_E (CALL_PRIOR_E)(0 + GETINTRAND%((int)(CALL_PRIOR_LEVERA) \
  +1))
#endif
#define z0K2B_copy(P)  P

extern void yAss_FOUR_OCTET_ARR_T XPP((FOUR_OCTET_ARR_T, FOUR_OCTET_ARR_T,
  int));
#define yAssF_FOUR_OCTET_ARR_T(V,E,A)  yAss_FOUR_OCTET_ARR_T(V,E,A)
#define yEqF_FOUR_OCTET_ARR_T(Expr1,Expr2)  yEq_FOUR_OCTET_ARR_T(Expr1,Expr2)
#define yNEqF_FOUR_OCTET_ARR_T(Expr1,Expr2)  ( ! yEq_FOUR_OCTET_ARR_T(Expr1,Expr2) )
#define yTstI_FOUR_OCTET_ARR_T(yExpr)  yExpr
#ifndef ANY_FOUR_OCTET_ARR_T
#define ANY_FOUR_OCTET_ARR_T
#endif
#define z0K35_copy(P)  P

extern void yAss_TMSI_T XPP((TMSI_T *, TMSI_T, int));
#define yAssF_TMSI_T(V,E,A)  yAss_TMSI_T(&(V),E,A)
#define yEqF_TMSI_T(Expr1,Expr2)  yEq_TMSI_T(Expr1,Expr2)
#define yNEqF_TMSI_T(Expr1,Expr2)  ( ! yEq_TMSI_T(Expr1,Expr2) )
#ifndef ANY_TMSI_T
#define ANY_TMSI_T yMake_TMSI_T(ANY_SDL_Boolean, ANY_FOUR_OCTET_ARR_T)
#endif
#define z0K43_copy(P)  P

extern void yAss_P_TMSI_T XPP((P_TMSI_T *, P_TMSI_T, int));
#define yAssF_P_TMSI_T(V,E,A)  yAss_P_TMSI_T(&(V),E,A)
#define yEqF_P_TMSI_T(Expr1,Expr2)  yEq_P_TMSI_T(Expr1,Expr2)
#define yNEqF_P_TMSI_T(Expr1,Expr2)  ( ! yEq_P_TMSI_T(Expr1,Expr2) )
#ifndef ANY_P_TMSI_T
#define ANY_P_TMSI_T yMake_P_TMSI_T(ANY_SDL_Boolean, ANY_FOUR_OCTET_ARR_T)
#endif
#define z0K53_copy(P)  P

extern void yAss_EIGHT_OCTET_ARR_T XPP((EIGHT_OCTET_ARR_T, EIGHT_OCTET_ARR_T,
  int));
#define yAssF_EIGHT_OCTET_ARR_T(V,E,A)  yAss_EIGHT_OCTET_ARR_T(V,E,A)
#define yEqF_EIGHT_OCTET_ARR_T(Expr1,Expr2)  yEq_EIGHT_OCTET_ARR_T(Expr1,Expr2)
#define yNEqF_EIGHT_OCTET_ARR_T(Expr1,Expr2)  ( ! yEq_EIGHT_OCTET_ARR_T(Expr1,Expr2) )
#define yTstI_EIGHT_OCTET_ARR_T(yExpr)  yExpr
#ifndef ANY_EIGHT_OCTET_ARR_T
#define ANY_EIGHT_OCTET_ARR_T
#endif
#define z0K65_copy(P)  P

extern void yAss_NINE_OCTET_ARR_T XPP((NINE_OCTET_ARR_T, NINE_OCTET_ARR_T,
  int));
#define yAssF_NINE_OCTET_ARR_T(V,E,A)  yAss_NINE_OCTET_ARR_T(V,E,A)
#define yEqF_NINE_OCTET_ARR_T(Expr1,Expr2)  yEq_NINE_OCTET_ARR_T(Expr1,Expr2)
#define yNEqF_NINE_OCTET_ARR_T(Expr1,Expr2)  ( ! yEq_NINE_OCTET_ARR_T(Expr1,Expr2) )
#define yTstI_NINE_OCTET_ARR_T(yExpr)  yExpr
#ifndef ANY_NINE_OCTET_ARR_T
#define ANY_NINE_OCTET_ARR_T
#endif
#define z0K75_copy(P)  P

extern void yAss_IMSI_T XPP((IMSI_T *, IMSI_T, int));
#define yAssF_IMSI_T(V,E,A)  yAss_IMSI_T(&(V),E,A)
#define yEqF_IMSI_T(Expr1,Expr2)  yEq_IMSI_T(Expr1,Expr2)
#define yNEqF_IMSI_T(Expr1,Expr2)  ( ! yEq_IMSI_T(Expr1,Expr2) )
#ifndef ANY_IMSI_T
#define ANY_IMSI_T yMake_IMSI_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_EIGHT_OCTET_ARR_T)
#endif
#define z0K83_copy(P)  P

extern void yAss_IMEI_T XPP((IMEI_T *, IMEI_T, int));
#define yAssF_IMEI_T(V,E,A)  yAss_IMEI_T(&(V),E,A)
#define yEqF_IMEI_T(Expr1,Expr2)  yEq_IMEI_T(Expr1,Expr2)
#define yNEqF_IMEI_T(Expr1,Expr2)  ( ! yEq_IMEI_T(Expr1,Expr2) )
#ifndef ANY_IMEI_T
#define ANY_IMEI_T yMake_IMEI_T(ANY_EIGHT_OCTET_ARR_T)
#endif
#define z0K93_copy(P)  P

extern void yAss_IMEISV_T XPP((IMEISV_T *, IMEISV_T, int));
#define yAssF_IMEISV_T(V,E,A)  yAss_IMEISV_T(&(V),E,A)
#define yEqF_IMEISV_T(Expr1,Expr2)  yEq_IMEISV_T(Expr1,Expr2)
#define yNEqF_IMEISV_T(Expr1,Expr2)  ( ! yEq_IMEISV_T(Expr1,Expr2) )
#ifndef ANY_IMEISV_T
#define ANY_IMEISV_T yMake_IMEISV_T(ANY_NINE_OCTET_ARR_T)
#endif
#define z0KA3_copy(P)  P

#define yAssF_FPLMN_SIM_T(V,E,A)  V = E
#define yEqF_FPLMN_SIM_T(Expr1,Expr2)  yEq_FPLMN_SIM_T(Expr1,Expr2)
#define yNEqF_FPLMN_SIM_T(Expr1,Expr2)  ( ! yEq_FPLMN_SIM_T(Expr1,Expr2) )
#ifndef ANY_FPLMN_SIM_T
#define ANY_FPLMN_SIM_T yMake_FPLMN_SIM_T(ANY_SDL_Boolean, ANY_PLMN_T)
#endif
#define z0KB3_copy(P)  P

extern void yAss_FPLMN_ARR_T XPP((FPLMN_ARR_T, FPLMN_ARR_T, int));
#define yAssF_FPLMN_ARR_T(V,E,A)  yAss_FPLMN_ARR_T(V,E,A)
#define yEqF_FPLMN_ARR_T(Expr1,Expr2)  yEq_FPLMN_ARR_T(Expr1,Expr2)
#define yNEqF_FPLMN_ARR_T(Expr1,Expr2)  ( ! yEq_FPLMN_ARR_T(Expr1,Expr2) )
#define yTstI_FPLMN_ARR_T(yExpr)  yExpr
#ifndef ANY_FPLMN_ARR_T
#define ANY_FPLMN_ARR_T
#endif
#define z0KC5_copy(P)  P

extern void yAss_PLMN_ARR_T XPP((PLMN_ARR_T, PLMN_ARR_T, int));
#define yAssF_PLMN_ARR_T(V,E,A)  yAss_PLMN_ARR_T(V,E,A)
#define yEqF_PLMN_ARR_T(Expr1,Expr2)  yEq_PLMN_ARR_T(Expr1,Expr2)
#define yNEqF_PLMN_ARR_T(Expr1,Expr2)  ( ! yEq_PLMN_ARR_T(Expr1,Expr2) )
#define yTstI_PLMN_ARR_T(yExpr)  yExpr
#ifndef ANY_PLMN_ARR_T
#define ANY_PLMN_ARR_T
#endif
#define z0KD5_copy(P)  P

extern void yAss_PLMN_LIST_T XPP((PLMN_LIST_T *, PLMN_LIST_T, int));
#define yAssF_PLMN_LIST_T(V,E,A)  yAss_PLMN_LIST_T(&(V),E,A)
#define yEqF_PLMN_LIST_T(Expr1,Expr2)  yEq_PLMN_LIST_T(Expr1,Expr2)
#define yNEqF_PLMN_LIST_T(Expr1,Expr2)  ( ! yEq_PLMN_LIST_T(Expr1,Expr2) )
#ifndef ANY_PLMN_LIST_T
#define ANY_PLMN_LIST_T yMake_PLMN_LIST_T(ANY_SDL_Octet, ANY_PLMN_ARR_T)
#endif
#define z0KE3_copy(P)  P

extern void yAss_PLMN_LONG_ARR_T XPP((PLMN_LONG_ARR_T, PLMN_LONG_ARR_T, int));
#define yAssF_PLMN_LONG_ARR_T(V,E,A)  yAss_PLMN_LONG_ARR_T(V,E,A)
#define yEqF_PLMN_LONG_ARR_T(Expr1,Expr2)  yEq_PLMN_LONG_ARR_T(Expr1,Expr2)
#define yNEqF_PLMN_LONG_ARR_T(Expr1,Expr2)  ( ! yEq_PLMN_LONG_ARR_T(Expr1,Expr2) )
#define yTstI_PLMN_LONG_ARR_T(yExpr)  yExpr
#ifndef ANY_PLMN_LONG_ARR_T
#define ANY_PLMN_LONG_ARR_T
#endif
#define z0KF5_copy(P)  P

extern void yAss_PLMN_LONG_LIST_T XPP((PLMN_LONG_LIST_T *, PLMN_LONG_LIST_T,
  int));
#define yAssF_PLMN_LONG_LIST_T(V,E,A)  yAss_PLMN_LONG_LIST_T(&(V),E,A)
#define yEqF_PLMN_LONG_LIST_T(Expr1,Expr2)  yEq_PLMN_LONG_LIST_T(Expr1,Expr2)
#define yNEqF_PLMN_LONG_LIST_T(Expr1,Expr2)  ( ! yEq_PLMN_LONG_LIST_T(Expr1,Expr2) )
#ifndef ANY_PLMN_LONG_LIST_T
#define ANY_PLMN_LONG_LIST_T yMake_PLMN_LONG_LIST_T(ANY_SDL_Octet, \
  ANY_PLMN_LONG_ARR_T)
#endif
#define z0KG3_copy(P)  P

extern void yAss_FPLMN_LIST_T XPP((FPLMN_LIST_T *, FPLMN_LIST_T, int));
#define yAssF_FPLMN_LIST_T(V,E,A)  yAss_FPLMN_LIST_T(&(V),E,A)
#define yEqF_FPLMN_LIST_T(Expr1,Expr2)  yEq_FPLMN_LIST_T(Expr1,Expr2)
#define yNEqF_FPLMN_LIST_T(Expr1,Expr2)  ( ! yEq_FPLMN_LIST_T(Expr1,Expr2) )
#ifndef ANY_FPLMN_LIST_T
#define ANY_FPLMN_LIST_T yMake_FPLMN_LIST_T(ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_FPLMN_ARR_T)
#endif
#define z0KH3_copy(P)  P

extern void yAss_FPLMN_LONG_ARR_T XPP((FPLMN_LONG_ARR_T, FPLMN_LONG_ARR_T,
  int));
#define yAssF_FPLMN_LONG_ARR_T(V,E,A)  yAss_FPLMN_LONG_ARR_T(V,E,A)
#define yEqF_FPLMN_LONG_ARR_T(Expr1,Expr2)  yEq_FPLMN_LONG_ARR_T(Expr1,Expr2)
#define yNEqF_FPLMN_LONG_ARR_T(Expr1,Expr2)  ( ! yEq_FPLMN_LONG_ARR_T(Expr1,Expr2) )
#define yTstI_FPLMN_LONG_ARR_T(yExpr)  yExpr
#ifndef ANY_FPLMN_LONG_ARR_T
#define ANY_FPLMN_LONG_ARR_T
#endif
#define z0KI5_copy(P)  P

extern void yAss_FPLMN_LONG_LIST_T XPP((FPLMN_LONG_LIST_T *, FPLMN_LONG_LIST_T,
  int));
#define yAssF_FPLMN_LONG_LIST_T(V,E,A)  yAss_FPLMN_LONG_LIST_T(&(V),E,A)
#define yEqF_FPLMN_LONG_LIST_T(Expr1,Expr2)  yEq_FPLMN_LONG_LIST_T(Expr1,Expr2)
#define yNEqF_FPLMN_LONG_LIST_T(Expr1,Expr2)  ( ! yEq_FPLMN_LONG_LIST_T(Expr1,Expr2) )
#ifndef ANY_FPLMN_LONG_LIST_T
#define ANY_FPLMN_LONG_LIST_T yMake_FPLMN_LONG_LIST_T(ANY_SDL_Octet, \
  ANY_FPLMN_LONG_ARR_T)
#endif
#define z0KJ3_copy(P)  P

extern void yAss_SELECT_PLMN_ARR_T XPP((SELECT_PLMN_ARR_T, SELECT_PLMN_ARR_T,
  int));
#define yAssF_SELECT_PLMN_ARR_T(V,E,A)  yAss_SELECT_PLMN_ARR_T(V,E,A)
#define yEqF_SELECT_PLMN_ARR_T(Expr1,Expr2)  yEq_SELECT_PLMN_ARR_T(Expr1,Expr2)
#define yNEqF_SELECT_PLMN_ARR_T(Expr1,Expr2)  ( ! yEq_SELECT_PLMN_ARR_T(Expr1,Expr2) )
#define yTstI_SELECT_PLMN_ARR_T(yExpr)  yExpr
#ifndef ANY_SELECT_PLMN_ARR_T
#define ANY_SELECT_PLMN_ARR_T
#endif
#define z0KK5_copy(P)  P

extern void yAss_SELECT_PLMN_LIST_T XPP((SELECT_PLMN_LIST_T *,
  SELECT_PLMN_LIST_T, int));
#define yAssF_SELECT_PLMN_LIST_T(V,E,A)  yAss_SELECT_PLMN_LIST_T(&(V),E,A)
#define yEqF_SELECT_PLMN_LIST_T(Expr1,Expr2)  yEq_SELECT_PLMN_LIST_T(Expr1,Expr2)
#define yNEqF_SELECT_PLMN_LIST_T(Expr1,Expr2)  ( ! yEq_SELECT_PLMN_LIST_T(Expr1,Expr2) )
#ifndef ANY_SELECT_PLMN_LIST_T
#define ANY_SELECT_PLMN_LIST_T yMake_SELECT_PLMN_LIST_T(ANY_SDL_Octet, \
  ANY_SELECT_PLMN_ARR_T)
#endif
#define z0KL3_copy(P)  P

extern void yAss_LAC_ARR_T XPP((LAC_ARR_T, LAC_ARR_T, int));
#define yAssF_LAC_ARR_T(V,E,A)  yAss_LAC_ARR_T(V,E,A)
#define yEqF_LAC_ARR_T(Expr1,Expr2)  yEq_LAC_ARR_T(Expr1,Expr2)
#define yNEqF_LAC_ARR_T(Expr1,Expr2)  ( ! yEq_LAC_ARR_T(Expr1,Expr2) )
#define yTstI_LAC_ARR_T(yExpr)  yExpr
#ifndef ANY_LAC_ARR_T
#define ANY_LAC_ARR_T
#endif
#define z0KM5_copy(P)  P

extern void yAss_LAC_LIST_T XPP((LAC_LIST_T *, LAC_LIST_T, int));
#define yAssF_LAC_LIST_T(V,E,A)  yAss_LAC_LIST_T(&(V),E,A)
#define yEqF_LAC_LIST_T(Expr1,Expr2)  yEq_LAC_LIST_T(Expr1,Expr2)
#define yNEqF_LAC_LIST_T(Expr1,Expr2)  ( ! yEq_LAC_LIST_T(Expr1,Expr2) )
#ifndef ANY_LAC_LIST_T
#define ANY_LAC_LIST_T yMake_LAC_LIST_T(ANY_SDL_Octet, ANY_LAC_ARR_T)
#endif
#define z0KN3_copy(P)  P

extern void yAss_PLMN_LAC_T XPP((PLMN_LAC_T *, PLMN_LAC_T, int));
#define yAssF_PLMN_LAC_T(V,E,A)  yAss_PLMN_LAC_T(&(V),E,A)
#define yEqF_PLMN_LAC_T(Expr1,Expr2)  yEq_PLMN_LAC_T(Expr1,Expr2)
#define yNEqF_PLMN_LAC_T(Expr1,Expr2)  ( ! yEq_PLMN_LAC_T(Expr1,Expr2) )
#ifndef ANY_PLMN_LAC_T
#define ANY_PLMN_LAC_T yMake_PLMN_LAC_T(ANY_PLMN_T, ANY_LAC_LIST_T, ANY_RSSI_T)
#endif
#define z0KO3_copy(P)  P

extern void yAss_AVAILABLE_PLMN_LA_ARR_T XPP((AVAILABLE_PLMN_LA_ARR_T,
  AVAILABLE_PLMN_LA_ARR_T, int));
#define yAssF_AVAILABLE_PLMN_LA_ARR_T(V,E,A)  yAss_AVAILABLE_PLMN_LA_ARR_T(V,E,A)
#define yEqF_AVAILABLE_PLMN_LA_ARR_T(Expr1,Expr2)  yEq_AVAILABLE_PLMN_LA_ARR_T(Expr1,Expr2)
#define yNEqF_AVAILABLE_PLMN_LA_ARR_T(Expr1,Expr2)  ( ! yEq_AVAILABLE_PLMN_LA_ARR_T(Expr1,Expr2) )
#define yTstI_AVAILABLE_PLMN_LA_ARR_T(yExpr)  yExpr
#ifndef ANY_AVAILABLE_PLMN_LA_ARR_T
#define ANY_AVAILABLE_PLMN_LA_ARR_T
#endif
#define z0KP5_copy(P)  P

extern void yAss_AVAILABLE_PLMN_LA_LIST_T XPP((AVAILABLE_PLMN_LA_LIST_T *,
  AVAILABLE_PLMN_LA_LIST_T, int));
#define yAssF_AVAILABLE_PLMN_LA_LIST_T(V,E,A)  yAss_AVAILABLE_PLMN_LA_LIST_T(&(V),E,A)
#define yEqF_AVAILABLE_PLMN_LA_LIST_T(Expr1,Expr2)  yEq_AVAILABLE_PLMN_LA_LIST_T(Expr1,Expr2)
#define yNEqF_AVAILABLE_PLMN_LA_LIST_T(Expr1,Expr2)  ( ! yEq_AVAILABLE_PLMN_LA_LIST_T(Expr1,Expr2) )
#ifndef ANY_AVAILABLE_PLMN_LA_LIST_T
#define ANY_AVAILABLE_PLMN_LA_LIST_T yMake_AVAILABLE_PLMN_LA_LIST_T(ANY_SDL_Octet, \
  ANY_AVAILABLE_PLMN_LA_ARR_T)
#endif
#define z0KQ3_copy(P)  P

extern void yAss_FLAI_ARR_T XPP((FLAI_ARR_T, FLAI_ARR_T, int));
#define yAssF_FLAI_ARR_T(V,E,A)  yAss_FLAI_ARR_T(V,E,A)
#define yEqF_FLAI_ARR_T(Expr1,Expr2)  yEq_FLAI_ARR_T(Expr1,Expr2)
#define yNEqF_FLAI_ARR_T(Expr1,Expr2)  ( ! yEq_FLAI_ARR_T(Expr1,Expr2) )
#define yTstI_FLAI_ARR_T(yExpr)  yExpr
#ifndef ANY_FLAI_ARR_T
#define ANY_FLAI_ARR_T
#endif
#define z0KR5_copy(P)  P

extern void yAss_FLAI_LIST_T XPP((FLAI_LIST_T *, FLAI_LIST_T, int));
#define yAssF_FLAI_LIST_T(V,E,A)  yAss_FLAI_LIST_T(&(V),E,A)
#define yEqF_FLAI_LIST_T(Expr1,Expr2)  yEq_FLAI_LIST_T(Expr1,Expr2)
#define yNEqF_FLAI_LIST_T(Expr1,Expr2)  ( ! yEq_FLAI_LIST_T(Expr1,Expr2) )
#ifndef ANY_FLAI_LIST_T
#define ANY_FLAI_LIST_T yMake_FLAI_LIST_T(ANY_SDL_Octet, ANY_FLAI_ARR_T)
#endif
#define z0KS3_copy(P)  P

#define yAssF_PD_TI_REF_T(V,E,A)  V = E
#define yEqF_PD_TI_REF_T(Expr1,Expr2)  yEq_PD_TI_REF_T(Expr1,Expr2)
#define yNEqF_PD_TI_REF_T(Expr1,Expr2)  ( ! yEq_PD_TI_REF_T(Expr1,Expr2) )
#ifndef ANY_PD_TI_REF_T
#define ANY_PD_TI_REF_T yMake_PD_TI_REF_T(ANY_z_ctypes_6_ShortInt, \
  ANY_z_ctypes_6_ShortInt)
#endif
#define z0KT3_copy(P)  P

extern void yAss_L3_MSG_UNIT_T XPP((L3_MSG_UNIT_T *, L3_MSG_UNIT_T, int));
#define yAssF_L3_MSG_UNIT_T(V,E,A)  yAss_L3_MSG_UNIT_T(&(V),E,A)
#define yEqF_L3_MSG_UNIT_T(Expr1,Expr2)  yEq_L3_MSG_UNIT_T(Expr1,Expr2)
#define yNEqF_L3_MSG_UNIT_T(Expr1,Expr2)  ( ! yEq_L3_MSG_UNIT_T(Expr1,Expr2) )
#ifndef ANY_L3_MSG_UNIT_T
#define ANY_L3_MSG_UNIT_T yMake_L3_MSG_UNIT_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_L3_MESSAGE_ARR_T)
#endif
#define z0KU3_copy(P)  P

#define yAssF_CKSN_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_CKSN_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_CKSN_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_CKSN_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_CKSN_T
#define ANY_CKSN_T ANY_SDL_Octet
#endif

#define yAssF_ACC_CONTROL_CLASS_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_ACC_CONTROL_CLASS_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_ACC_CONTROL_CLASS_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_ACC_CONTROL_CLASS_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_ACC_CONTROL_CLASS_T
#define ANY_ACC_CONTROL_CLASS_T ANY_SDL_Integer
#endif

#define yAssF_MM_UPDATE_STATUS_E(V,E,A)  V = E
#define yDef_MM_UPDATE_STATUS_E(yVar)  *(yVar) = MM_UPDATED
#define yEqF_MM_UPDATE_STATUS_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MM_UPDATE_STATUS_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MM_UPDATE_STATUS_E
#define ANY_MM_UPDATE_STATUS_E (MM_UPDATE_STATUS_E)(0 + \
  GETINTRAND%((int)(MM_REVERSE_STATE)+1))
#endif
#define z0KV8_copy(P)  P

extern void yAss_RAND_T XPP((RAND_T, RAND_T, int));
#define yAssF_RAND_T(V,E,A)  yAss_RAND_T(V,E,A)
#define yEqF_RAND_T(Expr1,Expr2)  yEq_RAND_T(Expr1,Expr2)
#define yNEqF_RAND_T(Expr1,Expr2)  ( ! yEq_RAND_T(Expr1,Expr2) )
#define yTstI_RAND_T(yExpr)  yExpr
#ifndef ANY_RAND_T
#define ANY_RAND_T
#endif
#define z0KW5_copy(P)  P

extern void yAss_SRES_T XPP((SRES_T, SRES_T, int));
#define yAssF_SRES_T(V,E,A)  yAss_SRES_T(V,E,A)
#define yEqF_SRES_T(Expr1,Expr2)  yEq_SRES_T(Expr1,Expr2)
#define yNEqF_SRES_T(Expr1,Expr2)  ( ! yEq_SRES_T(Expr1,Expr2) )
#define yTstI_SRES_T(yExpr)  yExpr
#ifndef ANY_SRES_T
#define ANY_SRES_T
#endif
#define z0KX5_copy(P)  P

#define yAssF_NPDU_PTR_T(V,E,A)  yAssF_OCTET_PTR_T(V,E,A)
#define yDef_NPDU_PTR_T(yVar)  *(yVar) = z0N40_Null()
#define yEqF_NPDU_PTR_T(Expr1,Expr2)  yEqF_OCTET_PTR_T(Expr1,Expr2)
#define yNEqF_NPDU_PTR_T(Expr1,Expr2)  yNEqF_OCTET_PTR_T(Expr1,Expr2)
#ifndef ANY_NPDU_PTR_T
#define ANY_NPDU_PTR_T ANY_OCTET_PTR_T
#endif

#define yAssF_NPDU_SIZE_T(V,E,A)  yAssF_z_ctypes_A_UnsignedLongInt(V,E,A)
#define yDef_NPDU_SIZE_T(yVar) \
  yDef_z_ctypes_A_UnsignedLongInt((z_ctypes_A_UnsignedLongInt *)yVar)
#define yEqF_NPDU_SIZE_T(Expr1,Expr2)  yEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#define yNEqF_NPDU_SIZE_T(Expr1,Expr2)  yNEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#ifndef ANY_NPDU_SIZE_T
#define ANY_NPDU_SIZE_T ANY_SDL_Integer
#endif

#define yAssF_SEND_SNPDU_ACK_T(V,E,A)  V = E
#define yDef_SEND_SNPDU_ACK_T(yVar)  *(yVar) = yMake_SEND_SNPDU_ACK_T( \
  z0L60_Null(), z0KZ0_Null(), z0N40_Null(), SDL_INTEGER_LIT(0))
#define yEqF_SEND_SNPDU_ACK_T(Expr1,Expr2)  yEq_SEND_SNPDU_ACK_T(Expr1,Expr2)
#define yNEqF_SEND_SNPDU_ACK_T(Expr1,Expr2)  ( ! yEq_SEND_SNPDU_ACK_T(Expr1,Expr2) )
#ifndef ANY_SEND_SNPDU_ACK_T
#define ANY_SEND_SNPDU_ACK_T yMake_SEND_SNPDU_ACK_T(ANY_SEND_SNPDU_ACK_LIST_PTR_T, \
  ANY_SEND_SNPDU_ACK_PTR_T, ANY_PDU_PTR_T, ANY_PDU_SIZE_T)
#endif
#define z0KY3_copy(P)  P

#define yAssF_SEND_SNPDU_ACK_PTR_T(V,E,A)  V = E
#define yDef_SEND_SNPDU_ACK_PTR_T(yVar)  *(yVar) = z0KZ0_Null()
#define yEqF_SEND_SNPDU_ACK_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SEND_SNPDU_ACK_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SEND_SNPDU_ACK_PTR_T
#define ANY_SEND_SNPDU_ACK_PTR_T 0
#endif
#define z0KZF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_SEND_SNPDU_ACK_PTR_T() (SEND_SNPDU_ACK_PTR_T)XALLOC_REF_VAL(sizeof(SEND_SNPDU_ACK_T), ySrtN_SEND_SNPDU_ACK_PTR_T)
#else
#define yAll_SEND_SNPDU_ACK_PTR_T() (SEND_SNPDU_ACK_PTR_T)XALLOC(sizeof(SEND_SNPDU_ACK_T), \
  &ySrtR_SEND_SNPDU_ACK_PTR_T)
#endif
#define yPlus_SEND_SNPDU_ACK_PTR_T(P1,P2) (P1+P2)
#define yMinus_SEND_SNPDU_ACK_PTR_T(P1,P2) (P1-P2)
#define z0KZ0_Null() 0
#define z0KZ1_Alloc() yAll_SEND_SNPDU_ACK_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0KZ6_free(P) XFREE_REF_VAL((void **)(P), sizeof(SEND_SNPDU_ACK_T))
#else
#define z0KZ6_free(P) XFREE((void **)(P), sizeof(SEND_SNPDU_ACK_T))
#endif
#define z0KZ9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0KZA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0KZB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_NPDU_BUFFER_UNIT_T(V,E,A)  V = E
#define yDef_NPDU_BUFFER_UNIT_T(yVar)  *(yVar) = yMake_NPDU_BUFFER_UNIT_T( \
  SDL_INTEGER_LIT(0), SDL_INTEGER_LIT(0), z0N40_Null(), SDL_INTEGER_LIT(0), \
  z0L10_Null())
#define yEqF_NPDU_BUFFER_UNIT_T(Expr1,Expr2)  yEq_NPDU_BUFFER_UNIT_T(Expr1,Expr2)
#define yNEqF_NPDU_BUFFER_UNIT_T(Expr1,Expr2)  ( ! yEq_NPDU_BUFFER_UNIT_T(Expr1,Expr2) )
#ifndef ANY_NPDU_BUFFER_UNIT_T
#define ANY_NPDU_BUFFER_UNIT_T yMake_NPDU_BUFFER_UNIT_T(ANY_SDL_Integer, \
  ANY_NPDU_SIZE_T, ANY_NPDU_PTR_T, ANY_SDL_Integer, ANY_NPDU_BUFFER_UNIT_PTR_T)
#endif
#define z0L03_copy(P)  P

#define yAssF_NPDU_BUFFER_UNIT_PTR_T(V,E,A)  V = E
#define yDef_NPDU_BUFFER_UNIT_PTR_T(yVar)  *(yVar) = z0L10_Null()
#define yEqF_NPDU_BUFFER_UNIT_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_NPDU_BUFFER_UNIT_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_NPDU_BUFFER_UNIT_PTR_T
#define ANY_NPDU_BUFFER_UNIT_PTR_T 0
#endif
#define z0L1F_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_NPDU_BUFFER_UNIT_PTR_T() (NPDU_BUFFER_UNIT_PTR_T)XALLOC_REF_VAL(sizeof(NPDU_BUFFER_UNIT_T), ySrtN_NPDU_BUFFER_UNIT_PTR_T)
#else
#define yAll_NPDU_BUFFER_UNIT_PTR_T() (NPDU_BUFFER_UNIT_PTR_T)XALLOC(sizeof(NPDU_BUFFER_UNIT_T), \
  &ySrtR_NPDU_BUFFER_UNIT_PTR_T)
#endif
#define yPlus_NPDU_BUFFER_UNIT_PTR_T(P1,P2) (P1+P2)
#define yMinus_NPDU_BUFFER_UNIT_PTR_T(P1,P2) (P1-P2)
#define z0L10_Null() 0
#define z0L11_Alloc() yAll_NPDU_BUFFER_UNIT_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0L16_free(P) XFREE_REF_VAL((void **)(P), sizeof(NPDU_BUFFER_UNIT_T))
#else
#define z0L16_free(P) XFREE((void **)(P), sizeof(NPDU_BUFFER_UNIT_T))
#endif
#define z0L19_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0L1A_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0L1B_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_SNPDU_INFO_T(V,E,A)  V = E
#define yDef_SNPDU_INFO_T(yVar)  *(yVar) = yMake_SNPDU_INFO_T(yMake_QOS_PARAM_T( \
  SDL_INTEGER_LIT(0), SDL_INTEGER_LIT(0)), SDL_INTEGER_LIT(0), z0N40_Null(), \
  SDL_INTEGER_LIT(0))
#define yEqF_SNPDU_INFO_T(Expr1,Expr2)  yEq_SNPDU_INFO_T(Expr1,Expr2)
#define yNEqF_SNPDU_INFO_T(Expr1,Expr2)  ( ! yEq_SNPDU_INFO_T(Expr1,Expr2) )
#ifndef ANY_SNPDU_INFO_T
#define ANY_SNPDU_INFO_T yMake_SNPDU_INFO_T(ANY_QOS_PARAM_T, \
  ANY_RADIO_PRIORITY_T, ANY_OCTET_PTR_T, ANY_PDU_SIZE_T)
#endif
#define z0L23_copy(P)  P

#define yAssF_SNPDU_INFO_PTR_T(V,E,A)  V = E
#define yDef_SNPDU_INFO_PTR_T(yVar)  *(yVar) = z0L30_Null()
#define yEqF_SNPDU_INFO_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SNPDU_INFO_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SNPDU_INFO_PTR_T
#define ANY_SNPDU_INFO_PTR_T 0
#endif
#define z0L3F_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_SNPDU_INFO_PTR_T() (SNPDU_INFO_PTR_T)XALLOC_REF_VAL(sizeof(SNPDU_INFO_T), ySrtN_SNPDU_INFO_PTR_T)
#else
#define yAll_SNPDU_INFO_PTR_T() (SNPDU_INFO_PTR_T)XALLOC(sizeof(SNPDU_INFO_T), \
  &ySrtR_SNPDU_INFO_PTR_T)
#endif
#define yPlus_SNPDU_INFO_PTR_T(P1,P2) (P1+P2)
#define yMinus_SNPDU_INFO_PTR_T(P1,P2) (P1-P2)
#define z0L30_Null() 0
#define z0L31_Alloc() yAll_SNPDU_INFO_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0L36_free(P) XFREE_REF_VAL((void **)(P), sizeof(SNPDU_INFO_T))
#else
#define z0L36_free(P) XFREE((void **)(P), sizeof(SNPDU_INFO_T))
#endif
#define z0L39_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0L3A_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0L3B_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_REFERENCE_T(V,E,A)  yAssF_NPDU_BUFFER_UNIT_PTR_T(V,E,A)
#define yDef_REFERENCE_T(yVar)  *(yVar) = z0L10_Null()
#define yEqF_REFERENCE_T(Expr1,Expr2)  yEqF_NPDU_BUFFER_UNIT_PTR_T(Expr1,Expr2)
#define yNEqF_REFERENCE_T(Expr1,Expr2)  yNEqF_NPDU_BUFFER_UNIT_PTR_T(Expr1,Expr2)
#ifndef ANY_REFERENCE_T
#define ANY_REFERENCE_T ANY_NPDU_BUFFER_UNIT_PTR_T
#endif

#define yAssF_BLOCK_PTR_T(V,E,A)  yAssF_OCTET_PTR_T(V,E,A)
#define yDef_BLOCK_PTR_T(yVar)  *(yVar) = z0N40_Null()
#define yEqF_BLOCK_PTR_T(Expr1,Expr2)  yEqF_OCTET_PTR_T(Expr1,Expr2)
#define yNEqF_BLOCK_PTR_T(Expr1,Expr2)  yNEqF_OCTET_PTR_T(Expr1,Expr2)
#ifndef ANY_BLOCK_PTR_T
#define ANY_BLOCK_PTR_T ANY_OCTET_PTR_T
#endif

#define yAssF_RX_EX_T(V,E,A)  V = E
#define yEqF_RX_EX_T(Expr1,Expr2)  yEq_RX_EX_T(Expr1,Expr2)
#define yNEqF_RX_EX_T(Expr1,Expr2)  ( ! yEq_RX_EX_T(Expr1,Expr2) )
#ifndef ANY_RX_EX_T
#define ANY_RX_EX_T yMake_RX_EX_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_MS_BAND_E)
#endif
#define z0L43_copy(P)  P

#define yAssF_SEND_SNPDU_ACK_LIST_T(V,E,A)  V = E
#define yEqF_SEND_SNPDU_ACK_LIST_T(Expr1,Expr2)  yEq_SEND_SNPDU_ACK_LIST_T(Expr1,Expr2)
#define yNEqF_SEND_SNPDU_ACK_LIST_T(Expr1,Expr2)  ( ! yEq_SEND_SNPDU_ACK_LIST_T(Expr1,Expr2) )
#ifndef ANY_SEND_SNPDU_ACK_LIST_T
#define ANY_SEND_SNPDU_ACK_LIST_T yMake_SEND_SNPDU_ACK_LIST_T(ANY_NSAPI_NUM_T, \
  ANY_QOS_PARAM_T, ANY_RADIO_PRIORITY_T, ANY_SDL_Integer, \
  ANY_SEND_SNPDU_ACK_PTR_T, ANY_SEND_SNPDU_ACK_PTR_T, \
  ANY_NPDU_BUFFER_UNIT_PTR_T, ANY_SEND_SNPDU_ACK_LIST_PTR_T)
#endif
#define z0L53_copy(P)  P

#define yAssF_SEND_SNPDU_ACK_LIST_PTR_T(V,E,A)  V = E
#define yDef_SEND_SNPDU_ACK_LIST_PTR_T(yVar)  *(yVar) = z0L60_Null()
#define yEqF_SEND_SNPDU_ACK_LIST_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SEND_SNPDU_ACK_LIST_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SEND_SNPDU_ACK_LIST_PTR_T
#define ANY_SEND_SNPDU_ACK_LIST_PTR_T 0
#endif
#define z0L6F_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_SEND_SNPDU_ACK_LIST_PTR_T() (SEND_SNPDU_ACK_LIST_PTR_T)XALLOC_REF_VAL(sizeof(SEND_SNPDU_ACK_LIST_T), ySrtN_SEND_SNPDU_ACK_LIST_PTR_T)
#else
#define yAll_SEND_SNPDU_ACK_LIST_PTR_T() (SEND_SNPDU_ACK_LIST_PTR_T)XALLOC(sizeof(SEND_SNPDU_ACK_LIST_T), \
  &ySrtR_SEND_SNPDU_ACK_LIST_PTR_T)
#endif
#define yPlus_SEND_SNPDU_ACK_LIST_PTR_T(P1,P2) (P1+P2)
#define yMinus_SEND_SNPDU_ACK_LIST_PTR_T(P1,P2) (P1-P2)
#define z0L60_Null() 0
#define z0L61_Alloc() yAll_SEND_SNPDU_ACK_LIST_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0L66_free(P) XFREE_REF_VAL((void **)(P), sizeof(SEND_SNPDU_ACK_LIST_T))
#else
#define z0L66_free(P) XFREE((void **)(P), sizeof(SEND_SNPDU_ACK_LIST_T))
#endif
#define z0L69_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0L6A_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0L6B_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_SNDCP_CAUSE_T(V,E,A)  V = E
#define yDef_SNDCP_CAUSE_T(yVar)  *(yVar) = LLC_SNDCP_CAUSE_NO_ERROR
#define yEqF_SNDCP_CAUSE_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SNDCP_CAUSE_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SNDCP_CAUSE_T
#define ANY_SNDCP_CAUSE_T (SNDCP_CAUSE_T)(0 + \
  GETINTRAND%((int)(SNDCP_CAUSE_LLC_ERROR)+1))
#endif
#define z0L7D_copy(P)  P

#define yAssF_LLC_LINK_STATE_E(V,E,A)  V = E
#define yDef_LLC_LINK_STATE_E(yVar)  *(yVar) = STATE_INITVAL
#define yEqF_LLC_LINK_STATE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_LLC_LINK_STATE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_LLC_LINK_STATE_E
#define ANY_LLC_LINK_STATE_E (LLC_LINK_STATE_E)(0 + \
  GETINTRAND%((int)(STATE_LL_REL_START)+1))
#endif
#define z0L8A_copy(P)  P

#define yAssF_LLC_PRO_TYPE_E(V,E,A)  V = E
#define yDef_LLC_PRO_TYPE_E(yVar)  *(yVar) = LLC_PRO_XID
#define yEqF_LLC_PRO_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_LLC_PRO_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_LLC_PRO_TYPE_E
#define ANY_LLC_PRO_TYPE_E (LLC_PRO_TYPE_E)(0 + GETINTRAND%((int)(LLC_PRO_REL) \
  +1))
#endif
#define z0L96_copy(P)  P

#define yAssF_FLOW_CTRL_MODE_E(V,E,A)  V = E
#define yDef_FLOW_CTRL_MODE_E(yVar)  *(yVar) = FLOW_CTRL_UNACK_MODE
#define yEqF_FLOW_CTRL_MODE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_FLOW_CTRL_MODE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_FLOW_CTRL_MODE_E
#define ANY_FLOW_CTRL_MODE_E (FLOW_CTRL_MODE_E)(0 + \
  GETINTRAND%((int)(FLOW_CTRL_BOTH_MODE)+1))
#endif
#define z0LA6_copy(P)  P

#define yAssF_GPRS_FLOW_CTRL_MOD_E(V,E,A)  V = E
#define yDef_GPRS_FLOW_CTRL_MOD_E(yVar)  *(yVar) = GPRS_FLOW_CTRL_MOD_L4
#define yEqF_GPRS_FLOW_CTRL_MOD_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_GPRS_FLOW_CTRL_MOD_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_GPRS_FLOW_CTRL_MOD_E
#define ANY_GPRS_FLOW_CTRL_MOD_E (GPRS_FLOW_CTRL_MOD_E)(0 + \
  GETINTRAND%((int)(GPRS_FLOW_CTRL_MOD_INVALID)+1))
#endif
#define z0LB8_copy(P)  P

#define yAssF_SMI_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_SMI_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_SMI_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_SMI_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_SMI_T
#define ANY_SMI_T ANY_SDL_Integer
#endif

#define yAssF_SMS_PS_ERROR_E(V,E,A)  V = E
#define yDef_SMS_PS_ERROR_E(yVar)  *(yVar) = SMS_NO_AVIAL_TI
#define yEqF_SMS_PS_ERROR_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SMS_PS_ERROR_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SMS_PS_ERROR_E
#define ANY_SMS_PS_ERROR_E (SMS_PS_ERROR_E)(0 + \
  GETINTRAND%((int)(SMS_LOW_LAYER_FAILURE)+1))
#endif
#define z0LC7_copy(P)  P

extern void yAss_SMS_TL_RL_REPORT_T XPP((SMS_TL_RL_REPORT_T *,
  SMS_TL_RL_REPORT_T, int));
#define yAssF_SMS_TL_RL_REPORT_T(V,E,A)  yAss_SMS_TL_RL_REPORT_T(&(V),E,A)
#define yEqF_SMS_TL_RL_REPORT_T(Expr1,Expr2)  yEq_SMS_TL_RL_REPORT_T(Expr1,Expr2)
#define yNEqF_SMS_TL_RL_REPORT_T(Expr1,Expr2)  ( ! yEq_SMS_TL_RL_REPORT_T(Expr1,Expr2) )
#ifndef ANY_SMS_TL_RL_REPORT_T
#define ANY_SMS_TL_RL_REPORT_T yMake_SMS_TL_RL_REPORT_T(ANY_SMS_CAUSE_TYPE_T, \
  ANY_GSM_CAUSE_T, ANY_L3_MSG_UNIT_T)
#endif
#define z0LD3_copy(P)  P

extern void yAss_SMS_ADDR_ARR_T XPP((SMS_ADDR_ARR_T, SMS_ADDR_ARR_T, int));
#define yAssF_SMS_ADDR_ARR_T(V,E,A)  yAss_SMS_ADDR_ARR_T(V,E,A)
#define yEqF_SMS_ADDR_ARR_T(Expr1,Expr2)  yEq_SMS_ADDR_ARR_T(Expr1,Expr2)
#define yNEqF_SMS_ADDR_ARR_T(Expr1,Expr2)  ( ! yEq_SMS_ADDR_ARR_T(Expr1,Expr2) )
#define yTstI_SMS_ADDR_ARR_T(yExpr)  yExpr
#ifndef ANY_SMS_ADDR_ARR_T
#define ANY_SMS_ADDR_ARR_T
#endif
#define z0LE5_copy(P)  P

extern void yAss_SMS_ADDR_T XPP((SMS_ADDR_T *, SMS_ADDR_T, int));
#define yAssF_SMS_ADDR_T(V,E,A)  yAss_SMS_ADDR_T(&(V),E,A)
#define yEqF_SMS_ADDR_T(Expr1,Expr2)  yEq_SMS_ADDR_T(Expr1,Expr2)
#define yNEqF_SMS_ADDR_T(Expr1,Expr2)  ( ! yEq_SMS_ADDR_T(Expr1,Expr2) )
#ifndef ANY_SMS_ADDR_T
#define ANY_SMS_ADDR_T yMake_SMS_ADDR_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_SMS_ADDR_ARR_T)
#endif
#define z0LF3_copy(P)  P

#define yAssF_SMS_PATH_E(V,E,A)  V = E
#define yDef_SMS_PATH_E(yVar)  *(yVar) = SMS_GSM_PATH
#define yEqF_SMS_PATH_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SMS_PATH_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SMS_PATH_E
#define ANY_SMS_PATH_E (SMS_PATH_E)(0 + GETINTRAND%((int)(SMS_GPRS_PATH)+1))
#endif
#define z0LG5_copy(P)  P

#define yAssF_RACH_CONTROL_PARAM_T(V,E,A)  V = E
#define yEqF_RACH_CONTROL_PARAM_T(Expr1,Expr2)  yEq_RACH_CONTROL_PARAM_T(Expr1,Expr2)
#define yNEqF_RACH_CONTROL_PARAM_T(Expr1,Expr2)  ( ! yEq_RACH_CONTROL_PARAM_T(Expr1,Expr2) )
#ifndef ANY_RACH_CONTROL_PARAM_T
#define ANY_RACH_CONTROL_PARAM_T yMake_RACH_CONTROL_PARAM_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_REEST_ALLOWED_OR_NOT_E, \
  ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0LH3_copy(P)  P

#define yAssF_CCCH_CONFIG_E(V,E,A)  V = E
#define yDef_CCCH_CONFIG_E(yVar)  *(yVar) = PCH1_NC
#define yEqF_CCCH_CONFIG_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CCCH_CONFIG_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CCCH_CONFIG_E
#define ANY_CCCH_CONFIG_E (CCCH_CONFIG_E)(0 + GETINTRAND%((int)(PCH4_NC)+1))
#endif
#define z0LI8_copy(P)  P

#define yAssF_CBQ2_E(V,E,A)  V = E
#define yDef_CBQ2_E(yVar)  *(yVar) = CELL_BAR_QUA2_INACT
#define yEqF_CBQ2_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CBQ2_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CBQ2_E
#define ANY_CBQ2_E (CBQ2_E)(0 + GETINTRAND%((int)(LOW_PRIO)+1))
#endif
#define z0LJ7_copy(P)  P

#define yAssF_CCCH_T(V,E,A)  V = E
#define yEqF_CCCH_T(Expr1,Expr2)  yEq_CCCH_T(Expr1,Expr2)
#define yNEqF_CCCH_T(Expr1,Expr2)  ( ! yEq_CCCH_T(Expr1,Expr2) )
#ifndef ANY_CCCH_T
#define ANY_CCCH_T yMake_CCCH_T(ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_CCCH_CONFIG_E, ANY_CBQ2_E, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt)
#endif
#define z0LK3_copy(P)  P

#define yAssF_CELL_OPTION_T(V,E,A)  V = E
#define yEqF_CELL_OPTION_T(Expr1,Expr2)  yEq_CELL_OPTION_T(Expr1,Expr2)
#define yNEqF_CELL_OPTION_T(Expr1,Expr2)  ( ! yEq_CELL_OPTION_T(Expr1,Expr2) )
#ifndef ANY_CELL_OPTION_T
#define ANY_CELL_OPTION_T yMake_CELL_OPTION_T(ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_DTX_ALLOWED_E, ANY_SDL_Octet)
#endif
#define z0LL3_copy(P)  P

#define yAssF_CELL_SELECTION_PARAM_T(V,E,A)  V = E
#define yEqF_CELL_SELECTION_PARAM_T(Expr1,Expr2)  yEq_CELL_SELECTION_PARAM_T(Expr1,Expr2)
#define yNEqF_CELL_SELECTION_PARAM_T(Expr1,Expr2)  ( ! yEq_CELL_SELECTION_PARAM_T(Expr1,Expr2) )
#ifndef ANY_CELL_SELECTION_PARAM_T
#define ANY_CELL_SELECTION_PARAM_T yMake_CELL_SELECTION_PARAM_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0LM3_copy(P)  P

#define yAssF_OPTION_SEL_PARAM_T(V,E,A)  V = E
#define yEqF_OPTION_SEL_PARAM_T(Expr1,Expr2)  yEq_OPTION_SEL_PARAM_T(Expr1,Expr2)
#define yNEqF_OPTION_SEL_PARAM_T(Expr1,Expr2)  ( ! yEq_OPTION_SEL_PARAM_T(Expr1,Expr2) )
#ifndef ANY_OPTION_SEL_PARAM_T
#define ANY_OPTION_SEL_PARAM_T yMake_OPTION_SEL_PARAM_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0LN3_copy(P)  P

#define yAssF_OPTION_POWER_OFFSET_T(V,E,A)  V = E
#define yEqF_OPTION_POWER_OFFSET_T(Expr1,Expr2)  yEq_OPTION_POWER_OFFSET_T(Expr1,Expr2)
#define yNEqF_OPTION_POWER_OFFSET_T(Expr1,Expr2)  ( ! yEq_OPTION_POWER_OFFSET_T(Expr1,Expr2) )
#ifndef ANY_OPTION_POWER_OFFSET_T
#define ANY_OPTION_POWER_OFFSET_T yMake_OPTION_POWER_OFFSET_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet)
#endif
#define z0LO3_copy(P)  P

#define yAssF_BCCH_POSITION_E(V,E,A)  V = E
#define yDef_BCCH_POSITION_E(yVar)  *(yVar) = BCCH_NORM
#define yEqF_BCCH_POSITION_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_BCCH_POSITION_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_BCCH_POSITION_E
#define ANY_BCCH_POSITION_E (BCCH_POSITION_E)(0 + GETINTRAND%((int)(BCCH_EXT) \
  +1))
#endif
#define z0LP5_copy(P)  P

#define yAssF_PLMN_STATE_E(V,E,A)  V = E
#define yDef_PLMN_STATE_E(yVar)  *(yVar) = NORM_SEARCH
#define yEqF_PLMN_STATE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_PLMN_STATE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_PLMN_STATE_E
#define ANY_PLMN_STATE_E (PLMN_STATE_E)(0 + \
  GETINTRAND%((int)(SHOW_PLMN_LIST_SEARCH)+1))
#endif
#define z0LQ7_copy(P)  P

#define yAssF_GPRS_IND_T(V,E,A)  V = E
#define yEqF_GPRS_IND_T(Expr1,Expr2)  yEq_GPRS_IND_T(Expr1,Expr2)
#define yNEqF_GPRS_IND_T(Expr1,Expr2)  ( ! yEq_GPRS_IND_T(Expr1,Expr2) )
#ifndef ANY_GPRS_IND_T
#define ANY_GPRS_IND_T yMake_GPRS_IND_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_BCCH_POSITION_E)
#endif
#define z0LR3_copy(P)  P

#define yAssF_NC_ORDER_E(V,E,A)  V = E
#define yDef_NC_ORDER_E(yVar)  *(yVar) = NC0
#define yEqF_NC_ORDER_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_NC_ORDER_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_NC_ORDER_E
#define ANY_NC_ORDER_E (NC_ORDER_E)(0 + GETINTRAND%((int)(NC_SPARE)+1))
#endif
#define z0LS7_copy(P)  P

#define yAssF_GPRS_CELL_OPTIONS_IE_T(V,E,A)  V = E
#define yEqF_GPRS_CELL_OPTIONS_IE_T(Expr1,Expr2)  yEq_GPRS_CELL_OPTIONS_IE_T(Expr1,Expr2)
#define yNEqF_GPRS_CELL_OPTIONS_IE_T(Expr1,Expr2)  ( ! yEq_GPRS_CELL_OPTIONS_IE_T(Expr1,Expr2) )
#ifndef ANY_GPRS_CELL_OPTIONS_IE_T
#define ANY_GPRS_CELL_OPTIONS_IE_T yMake_GPRS_CELL_OPTIONS_IE_T(ANY_NETWORK_MODE_E, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_SDL_Octet, ANY_AB_FORMAT_E, ANY_CONTROL_ACK_E, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean)
#endif
#define z0LT03_copy(P)  P

#define yAssF_PCCCH_ORG_PARAM_T(V,E,A)  V = E
#define yEqF_PCCCH_ORG_PARAM_T(Expr1,Expr2)  yEq_PCCCH_ORG_PARAM_T(Expr1,Expr2)
#define yNEqF_PCCCH_ORG_PARAM_T(Expr1,Expr2)  ( ! yEq_PCCCH_ORG_PARAM_T(Expr1,Expr2) )
#ifndef ANY_PCCCH_ORG_PARAM_T
#define ANY_PCCCH_ORG_PARAM_T yMake_PCCCH_ORG_PARAM_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0LU3_copy(P)  P

extern void yAss_CA_REF_NUM_ARR_T XPP((CA_REF_NUM_ARR_T, CA_REF_NUM_ARR_T,
  int));
#define yAssF_CA_REF_NUM_ARR_T(V,E,A)  yAss_CA_REF_NUM_ARR_T(V,E,A)
#define yEqF_CA_REF_NUM_ARR_T(Expr1,Expr2)  yEq_CA_REF_NUM_ARR_T(Expr1,Expr2)
#define yNEqF_CA_REF_NUM_ARR_T(Expr1,Expr2)  ( ! yEq_CA_REF_NUM_ARR_T(Expr1,Expr2) )
#define yTstI_CA_REF_NUM_ARR_T(yExpr)  yExpr
#ifndef ANY_CA_REF_NUM_ARR_T
#define ANY_CA_REF_NUM_ARR_T
#endif
#define z0LV5_copy(P)  P

#define yAssF_RR_PCCCH_DESC_T(V,E,A)  V = E
#define yEqF_RR_PCCCH_DESC_T(Expr1,Expr2)  yEq_RR_PCCCH_DESC_T(Expr1,Expr2)
#define yNEqF_RR_PCCCH_DESC_T(Expr1,Expr2)  ( ! yEq_RR_PCCCH_DESC_T(Expr1,Expr2) )
#ifndef ANY_RR_PCCCH_DESC_T
#define ANY_RR_PCCCH_DESC_T yMake_RR_PCCCH_DESC_T(ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_ARFCN_T, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0LW3_copy(P)  P

extern void yAss_RR_PCCCH_DESC_ARR_T XPP((RR_PCCCH_DESC_ARR_T,
  RR_PCCCH_DESC_ARR_T, int));
#define yAssF_RR_PCCCH_DESC_ARR_T(V,E,A)  yAss_RR_PCCCH_DESC_ARR_T(V,E,A)
#define yEqF_RR_PCCCH_DESC_ARR_T(Expr1,Expr2)  yEq_RR_PCCCH_DESC_ARR_T(Expr1,Expr2)
#define yNEqF_RR_PCCCH_DESC_ARR_T(Expr1,Expr2)  ( ! yEq_RR_PCCCH_DESC_ARR_T(Expr1,Expr2) )
#define yTstI_RR_PCCCH_DESC_ARR_T(yExpr)  yExpr
#ifndef ANY_RR_PCCCH_DESC_ARR_T
#define ANY_RR_PCCCH_DESC_ARR_T
#endif
#define z0LX5_copy(P)  P

#define yAssF_MEAS_CHAN_T(V,E,A)  V = E
#define yEqF_MEAS_CHAN_T(Expr1,Expr2)  yEq_MEAS_CHAN_T(Expr1,Expr2)
#define yNEqF_MEAS_CHAN_T(Expr1,Expr2)  ( ! yEq_MEAS_CHAN_T(Expr1,Expr2) )
#ifndef ANY_MEAS_CHAN_T
#define ANY_MEAS_CHAN_T yMake_MEAS_CHAN_T(ANY_SDL_Boolean, ANY_ARFCN_T, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0LY3_copy(P)  P

extern void yAss_MEAS_CHAN_ARR_T XPP((MEAS_CHAN_ARR_T, MEAS_CHAN_ARR_T, int));
#define yAssF_MEAS_CHAN_ARR_T(V,E,A)  yAss_MEAS_CHAN_ARR_T(V,E,A)
#define yEqF_MEAS_CHAN_ARR_T(Expr1,Expr2)  yEq_MEAS_CHAN_ARR_T(Expr1,Expr2)
#define yNEqF_MEAS_CHAN_ARR_T(Expr1,Expr2)  ( ! yEq_MEAS_CHAN_ARR_T(Expr1,Expr2) )
#define yTstI_MEAS_CHAN_ARR_T(yExpr)  yExpr
#ifndef ANY_MEAS_CHAN_ARR_T
#define ANY_MEAS_CHAN_ARR_T
#endif
#define z0LZ5_copy(P)  P

#define yAssF_RR_SI13_PBCCH_LOCATION_T(V,E,A)  V = E
#define yEqF_RR_SI13_PBCCH_LOCATION_T(Expr1,Expr2)  yEq_RR_SI13_PBCCH_LOCATION_T(Expr1,Expr2)
#define yNEqF_RR_SI13_PBCCH_LOCATION_T(Expr1,Expr2)  ( ! yEq_RR_SI13_PBCCH_LOCATION_T(Expr1,Expr2) )
#ifndef ANY_RR_SI13_PBCCH_LOCATION_T
#define ANY_RR_SI13_PBCCH_LOCATION_T yMake_RR_SI13_PBCCH_LOCATION_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_BCCH_POSITION_E, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0M03_copy(P)  P

#define yAssF_RR_NCELL_PARS_T(V,E,A)  V = E
#define yEqF_RR_NCELL_PARS_T(Expr1,Expr2)  yEq_RR_NCELL_PARS_T(Expr1,Expr2)
#define yNEqF_RR_NCELL_PARS_T(Expr1,Expr2)  ( ! yEq_RR_NCELL_PARS_T(Expr1,Expr2) )
#ifndef ANY_RR_NCELL_PARS_T
#define ANY_RR_NCELL_PARS_T yMake_RR_NCELL_PARS_T(ANY_ARFCN_T, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_HCS_PARS_T, ANY_RR_SI13_PBCCH_LOCATION_T)
#endif
#define z0M103_copy(P)  P

extern void yAss_RR_NCELL_PARS_ARR_T XPP((RR_NCELL_PARS_ARR_T,
  RR_NCELL_PARS_ARR_T, int));
#define yAssF_RR_NCELL_PARS_ARR_T(V,E,A)  yAss_RR_NCELL_PARS_ARR_T(V,E,A)
#define yEqF_RR_NCELL_PARS_ARR_T(Expr1,Expr2)  yEq_RR_NCELL_PARS_ARR_T(Expr1,Expr2)
#define yNEqF_RR_NCELL_PARS_ARR_T(Expr1,Expr2)  ( ! yEq_RR_NCELL_PARS_ARR_T(Expr1,Expr2) )
#define yTstI_RR_NCELL_PARS_ARR_T(yExpr)  yExpr
#ifndef ANY_RR_NCELL_PARS_ARR_T
#define ANY_RR_NCELL_PARS_ARR_T
#endif
#define z0M25_copy(P)  P

extern void yAss_CELL_EXT_MEAS_PARS_T XPP((CELL_EXT_MEAS_PARS_T *,
  CELL_EXT_MEAS_PARS_T, int));
#define yAssF_CELL_EXT_MEAS_PARS_T(V,E,A)  yAss_CELL_EXT_MEAS_PARS_T(&(V),E,A)
#define yEqF_CELL_EXT_MEAS_PARS_T(Expr1,Expr2)  yEq_CELL_EXT_MEAS_PARS_T(Expr1,Expr2)
#define yNEqF_CELL_EXT_MEAS_PARS_T(Expr1,Expr2)  ( ! yEq_CELL_EXT_MEAS_PARS_T(Expr1,Expr2) )
#ifndef ANY_CELL_EXT_MEAS_PARS_T
#define ANY_CELL_EXT_MEAS_PARS_T yMake_CELL_EXT_MEAS_PARS_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_ARFCN_LIST_T)
#endif
#define z0M33_copy(P)  P

#define yAssF_CELL_PRIO_E(V,E,A)  V = E
#define yDef_CELL_PRIO_E(yVar)  *(yVar) = NO_CELL
#define yEqF_CELL_PRIO_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CELL_PRIO_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CELL_PRIO_E
#define ANY_CELL_PRIO_E (CELL_PRIO_E)(0 + GETINTRAND%((int)(NORMAL_PRIO_CELL) \
  +1))
#endif
#define z0M48_copy(P)  P

extern void yAss_CELL_INFO_T XPP((CELL_INFO_T *, CELL_INFO_T, int));
#define yAssF_CELL_INFO_T(V,E,A)  yAss_CELL_INFO_T(&(V),E,A)
#define yEqF_CELL_INFO_T(Expr1,Expr2)  yEq_CELL_INFO_T(Expr1,Expr2)
#define yNEqF_CELL_INFO_T(Expr1,Expr2)  ( ! yEq_CELL_INFO_T(Expr1,Expr2) )
#ifndef ANY_CELL_INFO_T
#define ANY_CELL_INFO_T yMake_CELL_INFO_T(ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_MS_BAND_E, ANY_MS_BAND_E, ANY_ARFCN_T, ANY_RSSI_T, ANY_BSIC_T, \
  ANY_SDL_Boolean, ANY_RACH_CONTROL_PARAM_T, ANY_ARFCN_LIST_T, \
  ANY_ARFCN_LIST_T, ANY_ARFCN_LIST_T, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_BA_LIST_ARR_T, ANY_BA_LIST_ARR_T, \
  ANY_BA_LIST_ARR_T, ANY_SDL_Octet, ANY_CELL_ID_T, ANY_LAI_T, ANY_SDL_Octet, \
  ANY_CCCH_T, ANY_CELL_OPTION_T, ANY_CELL_SELECTION_PARAM_T, \
  ANY_OPTION_SEL_PARAM_T, ANY_OPTION_POWER_OFFSET_T, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_BCCH_POSITION_E, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_CHANNEL_DESCRIPTION_T, ANY_MA_BITMAP_T, ANY_GPRS_IND_T, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_GPRS_MOBILE_ALLOCATION_T, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_NC_ORDER_E, \
  ANY_GPRS_CELL_OPTIONS_IE_T, ANY_GLOBAL_PWRC_PARAM_T, ANY_SDL_Octet, \
  ANY_PRACH_CTRL_PARAMETERS_T, ANY_PCCCH_ORG_PARAM_T, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_REF_FREQ_LIST_ARR_T, \
  ANY_SDL_Octet, ANY_CA_REF_NUM_ARR_T, ANY_ARFCN_LIST_T, ANY_ARFCN_LIST_T, \
  ANY_SDL_Octet, ANY_GPRS_MOBILE_ALLOC_ARR_T, ANY_SDL_Octet, \
  ANY_RR_PCCCH_DESC_ARR_T, ANY_SDL_Octet, ANY_MEAS_CHAN_ARR_T, \
  ANY_SERVING_CELL_PARS_T, ANY_GENERAL_CELL_SEL_PARS_T, ANY_SDL_Octet, \
  ANY_RR_NCELL_PARS_ARR_T, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_CELL_EXT_MEAS_PARS_T, \
  ANY_CELL_PRIO_E, ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt, \
  ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_BCCH_TC_MASK_T, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_z_ctypes_A_UnsignedLongInt, ANY_RSSI_T, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_PAGING_MODE_E, \
  ANY_SDL_Boolean, ANY_PBCCH_DESCRIPTION_T, ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_z_ctypes_6_ShortInt, ANY_SDL_Octet, ANY_IS_SGSN_R99_T, ANY_SDL_Boolean, \
  ANY_z_ctypes_6_ShortInt, ANY_SDL_Boolean)
#endif
#define z0M503_copy(P)  P

#define yAssF_REDUCED_CELL_INFO_T(V,E,A)  V = E
#define yEqF_REDUCED_CELL_INFO_T(Expr1,Expr2)  yEq_REDUCED_CELL_INFO_T(Expr1,Expr2)
#define yNEqF_REDUCED_CELL_INFO_T(Expr1,Expr2)  ( ! yEq_REDUCED_CELL_INFO_T(Expr1,Expr2) )
#ifndef ANY_REDUCED_CELL_INFO_T
#define ANY_REDUCED_CELL_INFO_T yMake_REDUCED_CELL_INFO_T(ANY_SDL_Boolean, \
  ANY_MS_BAND_E, ANY_ARFCN_T, ANY_BSIC_T, ANY_SDL_Boolean, ANY_RSSI_T, \
  ANY_BCCH_TC_MASK_T, ANY_z_ctypes_A_UnsignedLongInt, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean)
#endif
#define z0M603_copy(P)  P

#define yAssF_RXLEV_T(V,E,A)  V = E
#define yEqF_RXLEV_T(Expr1,Expr2)  yEq_RXLEV_T(Expr1,Expr2)
#define yNEqF_RXLEV_T(Expr1,Expr2)  ( ! yEq_RXLEV_T(Expr1,Expr2) )
#ifndef ANY_RXLEV_T
#define ANY_RXLEV_T yMake_RXLEV_T(ANY_RSSI_T, ANY_RSSI_T)
#endif
#define z0M73_copy(P)  P

#define yAssF_RXQUAL_T(V,E,A)  V = E
#define yEqF_RXQUAL_T(Expr1,Expr2)  yEq_RXQUAL_T(Expr1,Expr2)
#define yNEqF_RXQUAL_T(Expr1,Expr2)  ( ! yEq_RXQUAL_T(Expr1,Expr2) )
#ifndef ANY_RXQUAL_T
#define ANY_RXQUAL_T yMake_RXQUAL_T(ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0M83_copy(P)  P

extern void yAss_RES_PARAM_T XPP((RES_PARAM_T *, RES_PARAM_T, int));
#define yAssF_RES_PARAM_T(V,E,A)  yAss_RES_PARAM_T(&(V),E,A)
#define yEqF_RES_PARAM_T(Expr1,Expr2)  yEq_RES_PARAM_T(Expr1,Expr2)
#define yNEqF_RES_PARAM_T(Expr1,Expr2)  ( ! yEq_RES_PARAM_T(Expr1,Expr2) )
#ifndef ANY_RES_PARAM_T
#define ANY_RES_PARAM_T yMake_RES_PARAM_T(ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_CHANNEL_TYPE_E, ANY_CHANNEL_TYPE_E, ANY_CHANNEL_DESCRIPTION_T, \
  ANY_MOBILE_ALLOCATION_T, ANY_CHANNEL_MODE_E, ANY_SDL_Boolean, \
  ANY_CIPHER_PARAM_T, ANY_SDL_Boolean, ANY_MULTI_SLOTS_T, ANY_RXLEV_T, \
  ANY_RXQUAL_T, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet)
#endif
#define z0M903_copy(P)  P

#define yAssF_RR_SERVICE_STATE_E(V,E,A)  V = E
#define yDef_RR_SERVICE_STATE_E(yVar)  *(yVar) = NO_SERVICE
#define yEqF_RR_SERVICE_STATE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_RR_SERVICE_STATE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_RR_SERVICE_STATE_E
#define ANY_RR_SERVICE_STATE_E (RR_SERVICE_STATE_E)(0 + \
  GETINTRAND%((int)(GSM_GPRS_SERVICE)+1))
#endif
#define z0MA7_copy(P)  P

#define yAssF_ARFCN_POWERLEVEL_T(V,E,A)  V = E
#define yEqF_ARFCN_POWERLEVEL_T(Expr1,Expr2)  yEq_ARFCN_POWERLEVEL_T(Expr1,Expr2)
#define yNEqF_ARFCN_POWERLEVEL_T(Expr1,Expr2)  ( ! yEq_ARFCN_POWERLEVEL_T(Expr1,Expr2) )
#ifndef ANY_ARFCN_POWERLEVEL_T
#define ANY_ARFCN_POWERLEVEL_T yMake_ARFCN_POWERLEVEL_T(ANY_ARFCN_T, \
  ANY_RSSI_T, ANY_MS_BAND_E)
#endif
#define z0MB3_copy(P)  P

extern void yAss_ARFCN_POWERLEVEL_ARR_T XPP((ARFCN_POWERLEVEL_ARR_T,
  ARFCN_POWERLEVEL_ARR_T, int));
#define yAssF_ARFCN_POWERLEVEL_ARR_T(V,E,A)  yAss_ARFCN_POWERLEVEL_ARR_T(V,E,A)
#define yEqF_ARFCN_POWERLEVEL_ARR_T(Expr1,Expr2)  yEq_ARFCN_POWERLEVEL_ARR_T(Expr1,Expr2)
#define yNEqF_ARFCN_POWERLEVEL_ARR_T(Expr1,Expr2)  ( ! yEq_ARFCN_POWERLEVEL_ARR_T(Expr1,Expr2) )
#define yTstI_ARFCN_POWERLEVEL_ARR_T(yExpr)  yExpr
#ifndef ANY_ARFCN_POWERLEVEL_ARR_T
#define ANY_ARFCN_POWERLEVEL_ARR_T
#endif
#define z0MC5_copy(P)  P

extern void yAss_NETWORK_NAME_ARR_T XPP((NETWORK_NAME_ARR_T,
  NETWORK_NAME_ARR_T, int));
#define yAssF_NETWORK_NAME_ARR_T(V,E,A)  yAss_NETWORK_NAME_ARR_T(V,E,A)
#define yEqF_NETWORK_NAME_ARR_T(Expr1,Expr2)  yEq_NETWORK_NAME_ARR_T(Expr1,Expr2)
#define yNEqF_NETWORK_NAME_ARR_T(Expr1,Expr2)  ( ! yEq_NETWORK_NAME_ARR_T(Expr1,Expr2) )
#define yTstI_NETWORK_NAME_ARR_T(yExpr)  yExpr
#ifndef ANY_NETWORK_NAME_ARR_T
#define ANY_NETWORK_NAME_ARR_T
#endif
#define z0MD5_copy(P)  P

#define yAssF_CODE_SCHEME_E(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_CODE_SCHEME_E(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_CODE_SCHEME_E(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_CODE_SCHEME_E(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_CODE_SCHEME_E
#define ANY_CODE_SCHEME_E ANY_SDL_Integer
#endif

extern void yAss_NETWORK_NAME_T XPP((NETWORK_NAME_T *, NETWORK_NAME_T, int));
#define yAssF_NETWORK_NAME_T(V,E,A)  yAss_NETWORK_NAME_T(&(V),E,A)
#define yEqF_NETWORK_NAME_T(Expr1,Expr2)  yEq_NETWORK_NAME_T(Expr1,Expr2)
#define yNEqF_NETWORK_NAME_T(Expr1,Expr2)  ( ! yEq_NETWORK_NAME_T(Expr1,Expr2) )
#ifndef ANY_NETWORK_NAME_T
#define ANY_NETWORK_NAME_T yMake_NETWORK_NAME_T(ANY_CODE_SCHEME_E, \
  ANY_SDL_Boolean, ANY_z_ctypes_8_UnsignedShortInt, ANY_NETWORK_NAME_ARR_T)
#endif
#define z0ME3_copy(P)  P

#define yAssF_LOCAL_TIME_ZONE_T(V,E,A)  yAssF_SDL_Character(V,E,A)
#define yDef_LOCAL_TIME_ZONE_T(yVar)  xDef_SDL_Character((SDL_Character *)yVar)
#define yEqF_LOCAL_TIME_ZONE_T(Expr1,Expr2)  yEqF_SDL_Character(Expr1,Expr2)
#define yNEqF_LOCAL_TIME_ZONE_T(Expr1,Expr2)  yNEqF_SDL_Character(Expr1,Expr2)
#ifndef ANY_LOCAL_TIME_ZONE_T
#define ANY_LOCAL_TIME_ZONE_T ANY_SDL_Character
#endif

#define yAssF_UT_LT_ZONE_T(V,E,A)  V = E
#define yEqF_UT_LT_ZONE_T(Expr1,Expr2)  yEq_UT_LT_ZONE_T(Expr1,Expr2)
#define yNEqF_UT_LT_ZONE_T(Expr1,Expr2)  ( ! yEq_UT_LT_ZONE_T(Expr1,Expr2) )
#ifndef ANY_UT_LT_ZONE_T
#define ANY_UT_LT_ZONE_T yMake_UT_LT_ZONE_T(ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Integer)
#endif
#define z0MF3_copy(P)  P

#define yAssF_LSA_IDENTITY_T(V,E,A)  yAssF_z_ctypes_A_UnsignedLongInt(V,E,A)
#define yDef_LSA_IDENTITY_T(yVar) \
  yDef_z_ctypes_A_UnsignedLongInt((z_ctypes_A_UnsignedLongInt *)yVar)
#define yEqF_LSA_IDENTITY_T(Expr1,Expr2)  yEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#define yNEqF_LSA_IDENTITY_T(Expr1,Expr2)  yNEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#ifndef ANY_LSA_IDENTITY_T
#define ANY_LSA_IDENTITY_T ANY_SDL_Integer
#endif

#define yAssF_DAYLIGHT_SAVING_TIME_T(V,E,A)  V = E
#define yEqF_DAYLIGHT_SAVING_TIME_T(Expr1,Expr2)  yEq_DAYLIGHT_SAVING_TIME_T(Expr1,Expr2)
#define yNEqF_DAYLIGHT_SAVING_TIME_T(Expr1,Expr2)  ( ! yEq_DAYLIGHT_SAVING_TIME_T(Expr1,Expr2) )
#ifndef ANY_DAYLIGHT_SAVING_TIME_T
#define ANY_DAYLIGHT_SAVING_TIME_T yMake_DAYLIGHT_SAVING_TIME_T(ANY_SDL_Octet)
#endif
#define z0MG3_copy(P)  P

extern void yAss_MMGMM_INFORMATION_T XPP((MMGMM_INFORMATION_T *,
  MMGMM_INFORMATION_T, int));
#define yAssF_MMGMM_INFORMATION_T(V,E,A)  yAss_MMGMM_INFORMATION_T(&(V),E,A)
#define yEqF_MMGMM_INFORMATION_T(Expr1,Expr2)  yEq_MMGMM_INFORMATION_T(Expr1,Expr2)
#define yNEqF_MMGMM_INFORMATION_T(Expr1,Expr2)  ( ! yEq_MMGMM_INFORMATION_T(Expr1,Expr2) )
#ifndef ANY_MMGMM_INFORMATION_T
#define ANY_MMGMM_INFORMATION_T yMake_MMGMM_INFORMATION_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_NETWORK_NAME_T, ANY_NETWORK_NAME_T, \
  ANY_LOCAL_TIME_ZONE_T, ANY_UT_LT_ZONE_T, ANY_LSA_IDENTITY_T, \
  ANY_DAYLIGHT_SAVING_TIME_T)
#endif
#define z0MH03_copy(P)  P

extern void yAss_MSG_HEADER_ARR_T XPP((MSG_HEADER_ARR_T, MSG_HEADER_ARR_T,
  int));
#define yAssF_MSG_HEADER_ARR_T(V,E,A)  yAss_MSG_HEADER_ARR_T(V,E,A)
#define yEqF_MSG_HEADER_ARR_T(Expr1,Expr2)  yEq_MSG_HEADER_ARR_T(Expr1,Expr2)
#define yNEqF_MSG_HEADER_ARR_T(Expr1,Expr2)  ( ! yEq_MSG_HEADER_ARR_T(Expr1,Expr2) )
#define yTstI_MSG_HEADER_ARR_T(yExpr)  yExpr
#ifndef ANY_MSG_HEADER_ARR_T
#define ANY_MSG_HEADER_ARR_T
#endif
#define z0MI5_copy(P)  P

#define yAssF_BSIC_FAIL_CAUSE_E(V,E,A)  V = E
#define yDef_BSIC_FAIL_CAUSE_E(yVar)  *(yVar) = DSP_DECODE_FAIL
#define yEqF_BSIC_FAIL_CAUSE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_BSIC_FAIL_CAUSE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_BSIC_FAIL_CAUSE_E
#define ANY_BSIC_FAIL_CAUSE_E (BSIC_FAIL_CAUSE_E)(0 + \
  GETINTRAND%((int)(LAYER1_PGREORG)+1))
#endif
#define z0MJ7_copy(P)  P

#define yAssF_SS_VERSION_PRESENT_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_SS_VERSION_PRESENT_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_SS_VERSION_PRESENT_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_SS_VERSION_PRESENT_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_SS_VERSION_PRESENT_T
#define ANY_SS_VERSION_PRESENT_T ANY_SDL_Boolean
#endif

#define yAssF_SS_VERSION_VALUE_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_SS_VERSION_VALUE_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_SS_VERSION_VALUE_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_SS_VERSION_VALUE_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_SS_VERSION_VALUE_T
#define ANY_SS_VERSION_VALUE_T ANY_SDL_Octet
#endif

#define yAssF_IS_MORE_SMS_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_MORE_SMS_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_MORE_SMS_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_MORE_SMS_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_MORE_SMS_T
#define ANY_IS_MORE_SMS_T ANY_SDL_Boolean
#endif

#define yAssF_MS_MODE_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_MS_MODE_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_MS_MODE_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_MS_MODE_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_MS_MODE_T
#define ANY_MS_MODE_T ANY_SDL_Octet
#endif

#define yAssF_IS_SGSN_R99_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_SGSN_R99_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_SGSN_R99_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_SGSN_R99_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_SGSN_R99_T
#define ANY_IS_SGSN_R99_T ANY_SDL_Boolean
#endif

#define yAssF_IS_REJECT_RECALL_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_REJECT_RECALL_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_REJECT_RECALL_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_REJECT_RECALL_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_REJECT_RECALL_T
#define ANY_IS_REJECT_RECALL_T ANY_SDL_Boolean
#endif

#define yAssF_IS_CAUSE_PRESENT_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_CAUSE_PRESENT_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_CAUSE_PRESENT_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_CAUSE_PRESENT_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_CAUSE_PRESENT_T
#define ANY_IS_CAUSE_PRESENT_T ANY_SDL_Boolean
#endif

#define yAssF_SS_LOW_LAYER_ERROR_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_SS_LOW_LAYER_ERROR_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_SS_LOW_LAYER_ERROR_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_SS_LOW_LAYER_ERROR_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_SS_LOW_LAYER_ERROR_E
#define ANY_SS_LOW_LAYER_ERROR_E ANY_SDL_Integer
#endif

#define yAssF_BAND_FILTER_T(V,E,A)  V = E
#define yEqF_BAND_FILTER_T(Expr1,Expr2)  yEq_BAND_FILTER_T(Expr1,Expr2)
#define yNEqF_BAND_FILTER_T(Expr1,Expr2)  ( ! yEq_BAND_FILTER_T(Expr1,Expr2) )
#ifndef ANY_BAND_FILTER_T
#define ANY_BAND_FILTER_T yMake_BAND_FILTER_T(ANY_SDL_Boolean, ANY_ARFCN_T, \
  ANY_ARFCN_T)
#endif
#define z0MK3_copy(P)  P

#define yAssF_SMS_CAUSE_TYPE_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_SMS_CAUSE_TYPE_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_SMS_CAUSE_TYPE_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_SMS_CAUSE_TYPE_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_SMS_CAUSE_TYPE_T
#define ANY_SMS_CAUSE_TYPE_T ANY_SDL_Integer
#endif

#define yAssF_SMS_CAUSE_T(V,E,A)  V = E
#define yEqF_SMS_CAUSE_T(Expr1,Expr2)  yEq_SMS_CAUSE_T(Expr1,Expr2)
#define yNEqF_SMS_CAUSE_T(Expr1,Expr2)  ( ! yEq_SMS_CAUSE_T(Expr1,Expr2) )
#ifndef ANY_SMS_CAUSE_T
#define ANY_SMS_CAUSE_T yMake_SMS_CAUSE_T(ANY_SMS_CAUSE_TYPE_T, \
  ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0ML3_copy(P)  P

#define yAssF_ARFCN_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_ARFCN_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_ARFCN_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_ARFCN_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_ARFCN_T
#define ANY_ARFCN_T ANY_SDL_Integer
#endif

extern void yAss_ARFCN_LIST_ARR_T XPP((ARFCN_LIST_ARR_T, ARFCN_LIST_ARR_T,
  int));
#define yAssF_ARFCN_LIST_ARR_T(V,E,A)  yAss_ARFCN_LIST_ARR_T(V,E,A)
#define yEqF_ARFCN_LIST_ARR_T(Expr1,Expr2)  yEq_ARFCN_LIST_ARR_T(Expr1,Expr2)
#define yNEqF_ARFCN_LIST_ARR_T(Expr1,Expr2)  ( ! yEq_ARFCN_LIST_ARR_T(Expr1,Expr2) )
#define yTstI_ARFCN_LIST_ARR_T(yExpr)  yExpr
#ifndef ANY_ARFCN_LIST_ARR_T
#define ANY_ARFCN_LIST_ARR_T
#endif
#define z0MM5_copy(P)  P

extern void yAss_ARFCN_BAND_LIST_ARR_T XPP((ARFCN_BAND_LIST_ARR_T,
  ARFCN_BAND_LIST_ARR_T, int));
#define yAssF_ARFCN_BAND_LIST_ARR_T(V,E,A)  yAss_ARFCN_BAND_LIST_ARR_T(V,E,A)
#define yEqF_ARFCN_BAND_LIST_ARR_T(Expr1,Expr2)  yEq_ARFCN_BAND_LIST_ARR_T(Expr1,Expr2)
#define yNEqF_ARFCN_BAND_LIST_ARR_T(Expr1,Expr2)  ( ! yEq_ARFCN_BAND_LIST_ARR_T(Expr1,Expr2) )
#define yTstI_ARFCN_BAND_LIST_ARR_T(yExpr)  yExpr
#ifndef ANY_ARFCN_BAND_LIST_ARR_T
#define ANY_ARFCN_BAND_LIST_ARR_T
#endif
#define z0MN5_copy(P)  P

extern void yAss_ARFCN_LIST_T XPP((ARFCN_LIST_T *, ARFCN_LIST_T, int));
#define yAssF_ARFCN_LIST_T(V,E,A)  yAss_ARFCN_LIST_T(&(V),E,A)
#define yEqF_ARFCN_LIST_T(Expr1,Expr2)  yEq_ARFCN_LIST_T(Expr1,Expr2)
#define yNEqF_ARFCN_LIST_T(Expr1,Expr2)  ( ! yEq_ARFCN_LIST_T(Expr1,Expr2) )
#ifndef ANY_ARFCN_LIST_T
#define ANY_ARFCN_LIST_T yMake_ARFCN_LIST_T(ANY_z_ctypes_6_ShortInt, \
  ANY_ARFCN_LIST_ARR_T)
#endif
#define z0MO3_copy(P)  P

extern void yAss_ARFCN_ROUND_LIST_T XPP((ARFCN_ROUND_LIST_T *,
  ARFCN_ROUND_LIST_T, int));
#define yAssF_ARFCN_ROUND_LIST_T(V,E,A)  yAss_ARFCN_ROUND_LIST_T(&(V),E,A)
#define yEqF_ARFCN_ROUND_LIST_T(Expr1,Expr2)  yEq_ARFCN_ROUND_LIST_T(Expr1,Expr2)
#define yNEqF_ARFCN_ROUND_LIST_T(Expr1,Expr2)  ( ! yEq_ARFCN_ROUND_LIST_T(Expr1,Expr2) )
#ifndef ANY_ARFCN_ROUND_LIST_T
#define ANY_ARFCN_ROUND_LIST_T yMake_ARFCN_ROUND_LIST_T(ANY_z_ctypes_6_ShortInt, \
  ANY_z_ctypes_6_ShortInt, ANY_ARFCN_LIST_ARR_T, ANY_MS_BAND_E)
#endif
#define z0MP3_copy(P)  P

extern void yAss_PLMN_ARFCN_T XPP((PLMN_ARFCN_T *, PLMN_ARFCN_T, int));
#define yAssF_PLMN_ARFCN_T(V,E,A)  yAss_PLMN_ARFCN_T(&(V),E,A)
#define yEqF_PLMN_ARFCN_T(Expr1,Expr2)  yEq_PLMN_ARFCN_T(Expr1,Expr2)
#define yNEqF_PLMN_ARFCN_T(Expr1,Expr2)  ( ! yEq_PLMN_ARFCN_T(Expr1,Expr2) )
#ifndef ANY_PLMN_ARFCN_T
#define ANY_PLMN_ARFCN_T yMake_PLMN_ARFCN_T(ANY_PLMN_T, ANY_ARFCN_ROUND_LIST_T)
#endif
#define z0MQ3_copy(P)  P

extern void yAss_PLMN_ARFCN_ARR_T XPP((PLMN_ARFCN_ARR_T, PLMN_ARFCN_ARR_T,
  int));
#define yAssF_PLMN_ARFCN_ARR_T(V,E,A)  yAss_PLMN_ARFCN_ARR_T(V,E,A)
#define yEqF_PLMN_ARFCN_ARR_T(Expr1,Expr2)  yEq_PLMN_ARFCN_ARR_T(Expr1,Expr2)
#define yNEqF_PLMN_ARFCN_ARR_T(Expr1,Expr2)  ( ! yEq_PLMN_ARFCN_ARR_T(Expr1,Expr2) )
#define yTstI_PLMN_ARFCN_ARR_T(yExpr)  yExpr
#ifndef ANY_PLMN_ARFCN_ARR_T
#define ANY_PLMN_ARFCN_ARR_T
#endif
#define z0MR5_copy(P)  P

extern void yAss_PLMN_ARFCN_LIST_T XPP((PLMN_ARFCN_LIST_T *, PLMN_ARFCN_LIST_T,
  int));
#define yAssF_PLMN_ARFCN_LIST_T(V,E,A)  yAss_PLMN_ARFCN_LIST_T(&(V),E,A)
#define yEqF_PLMN_ARFCN_LIST_T(Expr1,Expr2)  yEq_PLMN_ARFCN_LIST_T(Expr1,Expr2)
#define yNEqF_PLMN_ARFCN_LIST_T(Expr1,Expr2)  ( ! yEq_PLMN_ARFCN_LIST_T(Expr1,Expr2) )
#ifndef ANY_PLMN_ARFCN_LIST_T
#define ANY_PLMN_ARFCN_LIST_T yMake_PLMN_ARFCN_LIST_T(ANY_SDL_Octet, \
  ANY_PLMN_ARFCN_ARR_T)
#endif
#define z0MS3_copy(P)  P

#define yAssF_BSIC_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_BSIC_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_BSIC_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_BSIC_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_BSIC_T
#define ANY_BSIC_T ANY_SDL_Octet
#endif

#define yAssF_ARFCN_BSIC_T(V,E,A)  V = E
#define yEqF_ARFCN_BSIC_T(Expr1,Expr2)  yEq_ARFCN_BSIC_T(Expr1,Expr2)
#define yNEqF_ARFCN_BSIC_T(Expr1,Expr2)  ( ! yEq_ARFCN_BSIC_T(Expr1,Expr2) )
#ifndef ANY_ARFCN_BSIC_T
#define ANY_ARFCN_BSIC_T yMake_ARFCN_BSIC_T(ANY_BSIC_T, ANY_ARFCN_T)
#endif
#define z0MT3_copy(P)  P

extern void yAss_ARFCN_BSIC_LIST_ARR_T XPP((ARFCN_BSIC_LIST_ARR_T,
  ARFCN_BSIC_LIST_ARR_T, int));
#define yAssF_ARFCN_BSIC_LIST_ARR_T(V,E,A)  yAss_ARFCN_BSIC_LIST_ARR_T(V,E,A)
#define yEqF_ARFCN_BSIC_LIST_ARR_T(Expr1,Expr2)  yEq_ARFCN_BSIC_LIST_ARR_T(Expr1,Expr2)
#define yNEqF_ARFCN_BSIC_LIST_ARR_T(Expr1,Expr2)  ( ! yEq_ARFCN_BSIC_LIST_ARR_T(Expr1,Expr2) )
#define yTstI_ARFCN_BSIC_LIST_ARR_T(yExpr)  yExpr
#ifndef ANY_ARFCN_BSIC_LIST_ARR_T
#define ANY_ARFCN_BSIC_LIST_ARR_T
#endif
#define z0MU5_copy(P)  P

extern void yAss_ARFCN_BSIC_LIST_T XPP((ARFCN_BSIC_LIST_T *, ARFCN_BSIC_LIST_T,
  int));
#define yAssF_ARFCN_BSIC_LIST_T(V,E,A)  yAss_ARFCN_BSIC_LIST_T(&(V),E,A)
#define yEqF_ARFCN_BSIC_LIST_T(Expr1,Expr2)  yEq_ARFCN_BSIC_LIST_T(Expr1,Expr2)
#define yNEqF_ARFCN_BSIC_LIST_T(Expr1,Expr2)  ( ! yEq_ARFCN_BSIC_LIST_T(Expr1,Expr2) )
#ifndef ANY_ARFCN_BSIC_LIST_T
#define ANY_ARFCN_BSIC_LIST_T yMake_ARFCN_BSIC_LIST_T(ANY_z_ctypes_6_ShortInt, \
  ANY_ARFCN_BSIC_LIST_ARR_T)
#endif
#define z0MV3_copy(P)  P

extern void yAss_KC_T XPP((KC_T, KC_T, int));
#define yAssF_KC_T(V,E,A)  yAss_KC_T(V,E,A)
#define yEqF_KC_T(Expr1,Expr2)  yEq_KC_T(Expr1,Expr2)
#define yNEqF_KC_T(Expr1,Expr2)  ( ! yEq_KC_T(Expr1,Expr2) )
#define yTstI_KC_T(yExpr)  yExpr
#ifndef ANY_KC_T
#define ANY_KC_T
#endif
#define z0MW5_copy(P)  P

#define yAssF_MS_BAND_E(V,E,A)  V = E
#define yDef_MS_BAND_E(yVar)  *(yVar) = EGSM900
#define yEqF_MS_BAND_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MS_BAND_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MS_BAND_E
#define ANY_MS_BAND_E (MS_BAND_E)(0 + GETINTRAND%((int)(INVALID_BAND)+1))
#endif
#define z0MXJ_copy(P)  P

#define yAssF_RRA_COMMAND_E(V,E,A)  V = E
#define yDef_RRA_COMMAND_E(yVar)  *(yVar) = NO_COMMAND
#define yEqF_RRA_COMMAND_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_RRA_COMMAND_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_RRA_COMMAND_E
#define ANY_RRA_COMMAND_E (RRA_COMMAND_E)(0 + \
  GETINTRAND%((int)(FORCED_CELL_RESEL_COMMAND)+1))
#endif
#define z0MY6_copy(P)  P

#define yAssF_CAMP_RESULT_E(V,E,A)  V = E
#define yDef_CAMP_RESULT_E(yVar)  *(yVar) = CAMP_OK
#define yEqF_CAMP_RESULT_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CAMP_RESULT_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CAMP_RESULT_E
#define ANY_CAMP_RESULT_E (CAMP_RESULT_E)(0 + \
  GETINTRAND%((int)(CAMP_FAIL_NONSYNC)+1))
#endif
#define z0MZ5_copy(P)  P

#define yAssF_BCCH_COLLISION_TYPE_E(V,E,A)  V = E
#define yDef_BCCH_COLLISION_TYPE_E(yVar)  *(yVar) = NO_COMMAND
#define yEqF_BCCH_COLLISION_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_BCCH_COLLISION_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_BCCH_COLLISION_TYPE_E
#define ANY_BCCH_COLLISION_TYPE_E (BCCH_COLLISION_TYPE_E)(0 + \
  GETINTRAND%((int)(BCCH_TRAFFIC_COLLISION)+1))
#endif
#define z0N06_copy(P)  P

#define yAssF_CHANNEL_TYPE_E(V,E,A)  V = E
#define yDef_CHANNEL_TYPE_E(yVar)  *(yVar) = SACCH
#define yEqF_CHANNEL_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CHANNEL_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CHANNEL_TYPE_E
#define ANY_CHANNEL_TYPE_E (CHANNEL_TYPE_E)(0 + GETINTRAND%((int)(NO_CHANNEL) \
  +1))
#endif
#define z0N1G_copy(P)  P

#define yAssF_CHANNEL_MODE_E(V,E,A)  V = E
#define yDef_CHANNEL_MODE_E(yVar)  *(yVar) = SIGNAL_ONLY
#define yEqF_CHANNEL_MODE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CHANNEL_MODE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CHANNEL_MODE_E
#define ANY_CHANNEL_MODE_E (CHANNEL_MODE_E)(0 + GETINTRAND%((int)(DATA_3_RATE) \
  +1))
#endif
#define z0N2K_copy(P)  P

#define yAssF_MULTI_RATE_CFG_T(V,E,A)  V = E
#define yEqF_MULTI_RATE_CFG_T(Expr1,Expr2)  yEq_MULTI_RATE_CFG_T(Expr1,Expr2)
#define yNEqF_MULTI_RATE_CFG_T(Expr1,Expr2)  ( ! yEq_MULTI_RATE_CFG_T(Expr1,Expr2) )
#ifndef ANY_MULTI_RATE_CFG_T
#define ANY_MULTI_RATE_CFG_T yMake_MULTI_RATE_CFG_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet)
#endif
#define z0N303_copy(P)  P

#define yAssF_OCTET_PTR_T(V,E,A)  V = E
#define yDef_OCTET_PTR_T(yVar)  *(yVar) = z0N40_Null()
#define yEqF_OCTET_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_OCTET_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_OCTET_PTR_T
#define ANY_OCTET_PTR_T 0
#endif
#define z0N4F_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_OCTET_PTR_T() (OCTET_PTR_T)XALLOC_REF_VAL(sizeof(SDL_Octet), ySrtN_OCTET_PTR_T)
#else
#define yAll_OCTET_PTR_T() (OCTET_PTR_T)XALLOC(sizeof(SDL_Octet), \
  &ySrtR_OCTET_PTR_T)
#endif
#define yPlus_OCTET_PTR_T(P1,P2) (P1+P2)
#define yMinus_OCTET_PTR_T(P1,P2) (P1-P2)
#define z0N40_Null() 0
#define z0N41_Alloc() yAll_OCTET_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0N46_free(P) XFREE_REF_VAL((void **)(P), sizeof(SDL_Octet))
#else
#define z0N46_free(P) XFREE((void **)(P), sizeof(SDL_Octet))
#endif
#define z0N49_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0N4A_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0N4B_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_MS_MULTISLOT_CAPABILITY_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_MS_MULTISLOT_CAPABILITY_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_MS_MULTISLOT_CAPABILITY_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_MS_MULTISLOT_CAPABILITY_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_MS_MULTISLOT_CAPABILITY_T
#define ANY_MS_MULTISLOT_CAPABILITY_T ANY_SDL_Octet
#endif

#define yAssF_SUB_CHANNEL_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_SUB_CHANNEL_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_SUB_CHANNEL_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_SUB_CHANNEL_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_SUB_CHANNEL_T
#define ANY_SUB_CHANNEL_T ANY_SDL_Octet
#endif

#define yAssF_MS_TXPWR_CAPABILITY_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_MS_TXPWR_CAPABILITY_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_MS_TXPWR_CAPABILITY_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_MS_TXPWR_CAPABILITY_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_MS_TXPWR_CAPABILITY_T
#define ANY_MS_TXPWR_CAPABILITY_T ANY_SDL_Octet
#endif

#define yAssF_MS_EGPRS_CAPABILITY_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_MS_EGPRS_CAPABILITY_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_MS_EGPRS_CAPABILITY_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_MS_EGPRS_CAPABILITY_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_MS_EGPRS_CAPABILITY_T
#define ANY_MS_EGPRS_CAPABILITY_T ANY_SDL_Octet
#endif

#define yAssF_BA_IS_VALID_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_BA_IS_VALID_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_BA_IS_VALID_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_BA_IS_VALID_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_BA_IS_VALID_T
#define ANY_BA_IS_VALID_T ANY_SDL_Boolean
#endif

#define yAssF_DTX_USED_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_DTX_USED_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_DTX_USED_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_DTX_USED_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_DTX_USED_T
#define ANY_DTX_USED_T ANY_SDL_Boolean
#endif

#define yAssF_CCCH_GROUP_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_CCCH_GROUP_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_CCCH_GROUP_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_CCCH_GROUP_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_CCCH_GROUP_T(yExpr)  yExpr
#define yTstI_CCCH_GROUP_T(yExpr)  yExpr
#ifndef ANY_CCCH_GROUP_T
#define ANY_CCCH_GROUP_T (CCCH_GROUP_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(3)+1))
#endif

#define yAssF_L2_SIZE_T(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_L2_SIZE_T(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_L2_SIZE_T(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_L2_SIZE_T(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#define yTstA_L2_SIZE_T(yExpr)  yExpr
#define yTstI_L2_SIZE_T(yExpr)  yExpr
#ifndef ANY_L2_SIZE_T
#define ANY_L2_SIZE_T (L2_SIZE_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(23)+1))
#endif

extern void yAss_L2_MESSAGE_ARR_T XPP((L2_MESSAGE_ARR_T, L2_MESSAGE_ARR_T,
  int));
#define yAssF_L2_MESSAGE_ARR_T(V,E,A)  yAss_L2_MESSAGE_ARR_T(V,E,A)
#define yEqF_L2_MESSAGE_ARR_T(Expr1,Expr2)  yEq_L2_MESSAGE_ARR_T(Expr1,Expr2)
#define yNEqF_L2_MESSAGE_ARR_T(Expr1,Expr2)  ( ! yEq_L2_MESSAGE_ARR_T(Expr1,Expr2) )
#define yTstI_L2_MESSAGE_ARR_T(yExpr)  yExpr
#ifndef ANY_L2_MESSAGE_ARR_T
#define ANY_L2_MESSAGE_ARR_T
#endif
#define z0N55_copy(P)  P

#define yAssF_SAPI_NUM_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_SAPI_NUM_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_SAPI_NUM_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_SAPI_NUM_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_SAPI_NUM_T(yExpr)  yExpr
#define yTstI_SAPI_NUM_T(yExpr)  yExpr
#ifndef ANY_SAPI_NUM_T
#define ANY_SAPI_NUM_T (SAPI_NUM_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(15)+1))
#endif

#define yAssF_TLLI_T(V,E,A)  yAssF_z_ctypes_A_UnsignedLongInt(V,E,A)
#define yDef_TLLI_T(yVar) \
  yDef_z_ctypes_A_UnsignedLongInt((z_ctypes_A_UnsignedLongInt *)yVar)
#define yEqF_TLLI_T(Expr1,Expr2)  yEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#define yNEqF_TLLI_T(Expr1,Expr2)  yNEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#ifndef ANY_TLLI_T
#define ANY_TLLI_T ANY_SDL_Integer
#endif

extern void yAss_POLLING_TS_INDEX_ARR_T XPP((POLLING_TS_INDEX_ARR_T,
  POLLING_TS_INDEX_ARR_T, int));
#define yAssF_POLLING_TS_INDEX_ARR_T(V,E,A)  yAss_POLLING_TS_INDEX_ARR_T(V,E,A)
#define yEqF_POLLING_TS_INDEX_ARR_T(Expr1,Expr2)  yEq_POLLING_TS_INDEX_ARR_T(Expr1,Expr2)
#define yNEqF_POLLING_TS_INDEX_ARR_T(Expr1,Expr2)  ( ! yEq_POLLING_TS_INDEX_ARR_T(Expr1,Expr2) )
#define yTstI_POLLING_TS_INDEX_ARR_T(yExpr)  yExpr
#ifndef ANY_POLLING_TS_INDEX_ARR_T
#define ANY_POLLING_TS_INDEX_ARR_T
#endif
#define z0N65_copy(P)  P

extern void yAss_RXLEV_ARR_T XPP((RXLEV_ARR_T, RXLEV_ARR_T, int));
#define yAssF_RXLEV_ARR_T(V,E,A)  yAss_RXLEV_ARR_T(V,E,A)
#define yEqF_RXLEV_ARR_T(Expr1,Expr2)  yEq_RXLEV_ARR_T(Expr1,Expr2)
#define yNEqF_RXLEV_ARR_T(Expr1,Expr2)  ( ! yEq_RXLEV_ARR_T(Expr1,Expr2) )
#define yTstI_RXLEV_ARR_T(yExpr)  yExpr
#ifndef ANY_RXLEV_ARR_T
#define ANY_RXLEV_ARR_T
#endif
#define z0N75_copy(P)  P

#define yAssF_DCH_TYPE_E(V,E,A)  V = E
#define yDef_DCH_TYPE_E(yVar)  *(yVar) = TCH_H
#define yEqF_DCH_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_DCH_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_DCH_TYPE_E
#define ANY_DCH_TYPE_E (DCH_TYPE_E)(0 + GETINTRAND%((int)(SDCCH_8)+1))
#endif
#define z0N87_copy(P)  P

#define yAssF_CHANNEL_DESCRIPTION_T(V,E,A)  V = E
#define yEqF_CHANNEL_DESCRIPTION_T(Expr1,Expr2)  yEq_CHANNEL_DESCRIPTION_T(Expr1,Expr2)
#define yNEqF_CHANNEL_DESCRIPTION_T(Expr1,Expr2)  ( ! yEq_CHANNEL_DESCRIPTION_T(Expr1,Expr2) )
#ifndef ANY_CHANNEL_DESCRIPTION_T
#define ANY_CHANNEL_DESCRIPTION_T yMake_CHANNEL_DESCRIPTION_T(ANY_DCH_TYPE_E, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_ARFCN_T)
#endif
#define z0N93_copy(P)  P

#define yAssF_PAGING_MODE_E(V,E,A)  V = E
#define yDef_PAGING_MODE_E(yVar)  *(yVar) = PAGING_NORMAL
#define yEqF_PAGING_MODE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_PAGING_MODE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_PAGING_MODE_E
#define ANY_PAGING_MODE_E (PAGING_MODE_E)(0 + \
  GETINTRAND%((int)(PAGING_SAME_AS_BEFORE)+1))
#endif
#define z0NA7_copy(P)  P

#define yAssF_TXPWR_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_TXPWR_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_TXPWR_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_TXPWR_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_TXPWR_T
#define ANY_TXPWR_T ANY_SDL_Octet
#endif

#define yAssF_SI13_INDICATOR_E(V,E,A)  V = E
#define yDef_SI13_INDICATOR_E(yVar)  *(yVar) = SI13_NOT_PRESENT
#define yEqF_SI13_INDICATOR_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SI13_INDICATOR_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SI13_INDICATOR_E
#define ANY_SI13_INDICATOR_E (SI13_INDICATOR_E)(0 + GETINTRAND%((int)(SI13_EXT) \
  +1))
#endif
#define z0NB6_copy(P)  P

extern void yAss_CAMP_PARAM_T XPP((CAMP_PARAM_T *, CAMP_PARAM_T, int));
#define yAssF_CAMP_PARAM_T(V,E,A)  yAss_CAMP_PARAM_T(&(V),E,A)
#define yEqF_CAMP_PARAM_T(Expr1,Expr2)  yEq_CAMP_PARAM_T(Expr1,Expr2)
#define yNEqF_CAMP_PARAM_T(Expr1,Expr2)  ( ! yEq_CAMP_PARAM_T(Expr1,Expr2) )
#ifndef ANY_CAMP_PARAM_T
#define ANY_CAMP_PARAM_T yMake_CAMP_PARAM_T(ANY_ARFCN_T, ANY_SI13_INDICATOR_E, \
  ANY_SDL_Boolean, ANY_CCCH_GROUP_T, ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_TXPWR_T, ANY_PAGING_MODE_E, \
  ANY_ARFCN_LIST_T, ANY_SDL_Boolean, ANY_DTX_ALLOWED_E, \
  ANY_RADIO_LINK_TIMEOUT_T, ANY_SDL_Boolean, ANY_CHANNEL_DESCRIPTION_T, \
  ANY_ARFCN_LIST_T, ANY_SDL_Boolean, ANY_GLOBAL_PWRC_PARAM_T, ANY_AB_FORMAT_E, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean)
#endif
#define z0NC03_copy(P)  P

extern void yAss_PBCCH_MODE_PARAM_T XPP((PBCCH_MODE_PARAM_T *,
  PBCCH_MODE_PARAM_T, int));
#define yAssF_PBCCH_MODE_PARAM_T(V,E,A)  yAss_PBCCH_MODE_PARAM_T(&(V),E,A)
#define yEqF_PBCCH_MODE_PARAM_T(Expr1,Expr2)  yEq_PBCCH_MODE_PARAM_T(Expr1,Expr2)
#define yNEqF_PBCCH_MODE_PARAM_T(Expr1,Expr2)  ( ! yEq_PBCCH_MODE_PARAM_T(Expr1,Expr2) )
#ifndef ANY_PBCCH_MODE_PARAM_T
#define ANY_PBCCH_MODE_PARAM_T yMake_PBCCH_MODE_PARAM_T(ANY_PAGING_MODE_E, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_z_ctypes_8_UnsignedShortInt, ANY_TXPWR_T, \
  ANY_PBCCH_DESCRIPTION_T, ANY_PCCCH_DESC_T, ANY_PAGING_COORDINATION_E)
#endif
#define z0ND03_copy(P)  P

#define yAssF_PAGING_COORDINATION_E(V,E,A)  V = E
#define yDef_PAGING_COORDINATION_E(yVar)  *(yVar) = CS_ONLY_ON_PCH
#define yEqF_PAGING_COORDINATION_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_PAGING_COORDINATION_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_PAGING_COORDINATION_E
#define ANY_PAGING_COORDINATION_E (PAGING_COORDINATION_E)(0 + \
  GETINTRAND%((int)(CS_PCH_AND_PS_PPCH_OR_PCH)+1))
#endif
#define z0NE7_copy(P)  P

#define yAssF_BA_IND_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_BA_IND_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_BA_IND_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_BA_IND_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_BA_IND_T
#define ANY_BA_IND_T ANY_SDL_Octet
#endif

#define yAssF_SYSINFO_READ_MODE_E(V,E,A)  V = E
#define yDef_SYSINFO_READ_MODE_E(yVar)  *(yVar) = CON_BCCH
#define yEqF_SYSINFO_READ_MODE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SYSINFO_READ_MODE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SYSINFO_READ_MODE_E
#define ANY_SYSINFO_READ_MODE_E (SYSINFO_READ_MODE_E)(0 + \
  GETINTRAND%((int)(MULTIPLE_SINGLE_BCCH)+1))
#endif
#define z0NFC_copy(P)  P

#define yAssF_SYSINFO_IND_E(V,E,A)  V = E
#define yDef_SYSINFO_IND_E(yVar)  *(yVar) = SYSINFO_ALL
#define yEqF_SYSINFO_IND_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SYSINFO_IND_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SYSINFO_IND_E
#define ANY_SYSINFO_IND_E (SYSINFO_IND_E)(0 + GETINTRAND%((int)(SYSINFO_2)+1))
#endif
#define z0NGF_copy(P)  P

#define yAssF_LR_START_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_LR_START_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_LR_START_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_LR_START_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_LR_START_T
#define ANY_LR_START_T ANY_SDL_Octet
#endif

extern void yAss_PBCCH_DESCRIPTION_T XPP((PBCCH_DESCRIPTION_T *,
  PBCCH_DESCRIPTION_T, int));
#define yAssF_PBCCH_DESCRIPTION_T(V,E,A)  yAss_PBCCH_DESCRIPTION_T(&(V),E,A)
#define yEqF_PBCCH_DESCRIPTION_T(Expr1,Expr2)  yEq_PBCCH_DESCRIPTION_T(Expr1,Expr2)
#define yNEqF_PBCCH_DESCRIPTION_T(Expr1,Expr2)  ( ! yEq_PBCCH_DESCRIPTION_T(Expr1,Expr2) )
#ifndef ANY_PBCCH_DESCRIPTION_T
#define ANY_PBCCH_DESCRIPTION_T yMake_PBCCH_DESCRIPTION_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_ARFCN_LIST_T, ANY_MS_BAND_E)
#endif
#define z0NH03_copy(P)  P

#define yAssF_ABSOLUTE_FRAME_NUMBER_T(V,E,A)  yAssF_z_ctypes_A_UnsignedLongInt(V,E,A)
#define yDef_ABSOLUTE_FRAME_NUMBER_T(yVar) \
  yDef_z_ctypes_A_UnsignedLongInt((z_ctypes_A_UnsignedLongInt *)yVar)
#define yEqF_ABSOLUTE_FRAME_NUMBER_T(Expr1,Expr2)  yEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#define yNEqF_ABSOLUTE_FRAME_NUMBER_T(Expr1,Expr2)  yNEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#ifndef ANY_ABSOLUTE_FRAME_NUMBER_T
#define ANY_ABSOLUTE_FRAME_NUMBER_T ANY_SDL_Integer
#endif

#define yAssF_PHYSICAL_BLOCK_ARR_T(V,E,A)  yAssF_L2_MESSAGE_ARR_T(V,E,A)
#define yDef_PHYSICAL_BLOCK_ARR_T(yVar)  yDef_L2_MESSAGE_ARR_T(yVar)
#define yEqF_PHYSICAL_BLOCK_ARR_T(Expr1,Expr2)  yEqF_L2_MESSAGE_ARR_T(Expr1,Expr2)
#define yNEqF_PHYSICAL_BLOCK_ARR_T(Expr1,Expr2)  yNEqF_L2_MESSAGE_ARR_T(Expr1,Expr2)
#define yTstI_PHYSICAL_BLOCK_ARR_T(yExpr)  yExpr
#ifndef ANY_PHYSICAL_BLOCK_ARR_T
#define ANY_PHYSICAL_BLOCK_ARR_T ANY_L2_MESSAGE_ARR_T
#endif

#define yAssF_BCCH_DECODE_INDICATOR_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_BCCH_DECODE_INDICATOR_T(yVar) \
  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_BCCH_DECODE_INDICATOR_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_BCCH_DECODE_INDICATOR_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_BCCH_DECODE_INDICATOR_T
#define ANY_BCCH_DECODE_INDICATOR_T ANY_SDL_Boolean
#endif

#define yAssF_SCELL_BCCH_ON_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_SCELL_BCCH_ON_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_SCELL_BCCH_ON_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_SCELL_BCCH_ON_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_SCELL_BCCH_ON_T
#define ANY_SCELL_BCCH_ON_T ANY_SDL_Boolean
#endif

#define yAssF_RACH_AB_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_RACH_AB_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_RACH_AB_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_RACH_AB_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_RACH_AB_T
#define ANY_RACH_AB_T ANY_SDL_Octet
#endif

#define yAssF_DELAY_SLOTS_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_DELAY_SLOTS_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_DELAY_SLOTS_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_DELAY_SLOTS_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_DELAY_SLOTS_T
#define ANY_DELAY_SLOTS_T ANY_SDL_Integer
#endif

#define yAssF_PMAX_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_PMAX_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_PMAX_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_PMAX_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_PMAX_T
#define ANY_PMAX_T ANY_SDL_Octet
#endif

#define yAssF_REDUCED_FRAME_NUMBER_T(V,E,A)  V = E
#define yEqF_REDUCED_FRAME_NUMBER_T(Expr1,Expr2)  yEq_REDUCED_FRAME_NUMBER_T(Expr1,Expr2)
#define yNEqF_REDUCED_FRAME_NUMBER_T(Expr1,Expr2)  ( ! yEq_REDUCED_FRAME_NUMBER_T(Expr1,Expr2) )
#ifndef ANY_REDUCED_FRAME_NUMBER_T
#define ANY_REDUCED_FRAME_NUMBER_T yMake_REDUCED_FRAME_NUMBER_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0NI3_copy(P)  P

#define yAssF_STARTING_TIME_T(V,E,A)  V = E
#define yEqF_STARTING_TIME_T(Expr1,Expr2)  yEq_STARTING_TIME_T(Expr1,Expr2)
#define yNEqF_STARTING_TIME_T(Expr1,Expr2)  ( ! yEq_STARTING_TIME_T(Expr1,Expr2) )
#ifndef ANY_STARTING_TIME_T
#define ANY_STARTING_TIME_T yMake_STARTING_TIME_T(ANY_SDL_Boolean, \
  ANY_REDUCED_FRAME_NUMBER_T)
#endif
#define z0NJ3_copy(P)  P

#define yAssF_ABSOLUTE_STARTING_TIME_T(V,E,A)  V = E
#define yEqF_ABSOLUTE_STARTING_TIME_T(Expr1,Expr2)  yEq_ABSOLUTE_STARTING_TIME_T(Expr1,Expr2)
#define yNEqF_ABSOLUTE_STARTING_TIME_T(Expr1,Expr2)  ( ! yEq_ABSOLUTE_STARTING_TIME_T(Expr1,Expr2) )
#ifndef ANY_ABSOLUTE_STARTING_TIME_T
#define ANY_ABSOLUTE_STARTING_TIME_T yMake_ABSOLUTE_STARTING_TIME_T(ANY_SDL_Boolean, \
  ANY_ABSOLUTE_FRAME_NUMBER_T)
#endif
#define z0NK3_copy(P)  P

#define yAssF_MOBILE_ALLOCATION_T(V,E,A)  yAssF_ARFCN_LIST_T(V,E,A)
#define yDef_MOBILE_ALLOCATION_T(yVar)  yDef_ARFCN_LIST_T((ARFCN_LIST_T *)yVar)
#define yEqF_MOBILE_ALLOCATION_T(Expr1,Expr2)  yEqF_ARFCN_LIST_T(Expr1,Expr2)
#define yNEqF_MOBILE_ALLOCATION_T(Expr1,Expr2)  yNEqF_ARFCN_LIST_T(Expr1,Expr2)
#ifndef ANY_MOBILE_ALLOCATION_T
#define ANY_MOBILE_ALLOCATION_T ANY_ARFCN_LIST_T
#endif

extern void yAss_FREQ_PARAM_BEFORE_T XPP((FREQ_PARAM_BEFORE_T *,
  FREQ_PARAM_BEFORE_T, int));
#define yAssF_FREQ_PARAM_BEFORE_T(V,E,A)  yAss_FREQ_PARAM_BEFORE_T(&(V),E,A)
#define yEqF_FREQ_PARAM_BEFORE_T(Expr1,Expr2)  yEq_FREQ_PARAM_BEFORE_T(Expr1,Expr2)
#define yNEqF_FREQ_PARAM_BEFORE_T(Expr1,Expr2)  ( ! yEq_FREQ_PARAM_BEFORE_T(Expr1,Expr2) )
#ifndef ANY_FREQ_PARAM_BEFORE_T
#define ANY_FREQ_PARAM_BEFORE_T yMake_FREQ_PARAM_BEFORE_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_ARFCN_LIST_T)
#endif
#define z0NL3_copy(P)  P

#define yAssF_TIMING_ADVANCE_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_TIMING_ADVANCE_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_TIMING_ADVANCE_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_TIMING_ADVANCE_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_TIMING_ADVANCE_T
#define ANY_TIMING_ADVANCE_T ANY_SDL_Octet
#endif

#define yAssF_RADIO_LINK_TIMEOUT_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_RADIO_LINK_TIMEOUT_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_RADIO_LINK_TIMEOUT_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_RADIO_LINK_TIMEOUT_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_RADIO_LINK_TIMEOUT_T
#define ANY_RADIO_LINK_TIMEOUT_T ANY_SDL_Octet
#endif

#define yAssF_PWRC_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_PWRC_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_PWRC_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_PWRC_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_PWRC_T
#define ANY_PWRC_T ANY_SDL_Boolean
#endif

#define yAssF_APPLY_DTX_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_APPLY_DTX_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_APPLY_DTX_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_APPLY_DTX_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_APPLY_DTX_T
#define ANY_APPLY_DTX_T ANY_SDL_Boolean
#endif

#define yAssF_TRANS_PARAM_T(V,E,A)  V = E
#define yEqF_TRANS_PARAM_T(Expr1,Expr2)  yEq_TRANS_PARAM_T(Expr1,Expr2)
#define yNEqF_TRANS_PARAM_T(Expr1,Expr2)  ( ! yEq_TRANS_PARAM_T(Expr1,Expr2) )
#ifndef ANY_TRANS_PARAM_T
#define ANY_TRANS_PARAM_T yMake_TRANS_PARAM_T(ANY_SDL_Boolean, \
  ANY_DTX_ALLOWED_E, ANY_SDL_Octet, ANY_RADIO_LINK_TIMEOUT_T, ANY_SDL_Boolean, \
  ANY_SDL_Octet)
#endif
#define z0NM3_copy(P)  P

#define yAssF_CIPHER_ALGORITHM_E(V,E,A)  V = E
#define yDef_CIPHER_ALGORITHM_E(yVar)  *(yVar) = CIPHER_WITH_A5_1
#define yEqF_CIPHER_ALGORITHM_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CIPHER_ALGORITHM_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CIPHER_ALGORITHM_E
#define ANY_CIPHER_ALGORITHM_E (CIPHER_ALGORITHM_E)(0 + \
  GETINTRAND%((int)(CIPHER_WITH_A5_7)+1))
#endif
#define z0NNA_copy(P)  P

#define yAssF_CIPHER_PARAM_T(V,E,A)  V = E
#define yEqF_CIPHER_PARAM_T(Expr1,Expr2)  yEq_CIPHER_PARAM_T(Expr1,Expr2)
#define yNEqF_CIPHER_PARAM_T(Expr1,Expr2)  ( ! yEq_CIPHER_PARAM_T(Expr1,Expr2) )
#ifndef ANY_CIPHER_PARAM_T
#define ANY_CIPHER_PARAM_T yMake_CIPHER_PARAM_T(ANY_SDL_Boolean, \
  ANY_CIPHER_ALGORITHM_E)
#endif
#define z0NO3_copy(P)  P

#define yAssF_SLOT_DESCRIPTION_T(V,E,A)  V = E
#define yEqF_SLOT_DESCRIPTION_T(Expr1,Expr2)  yEq_SLOT_DESCRIPTION_T(Expr1,Expr2)
#define yNEqF_SLOT_DESCRIPTION_T(Expr1,Expr2)  ( ! yEq_SLOT_DESCRIPTION_T(Expr1,Expr2) )
#ifndef ANY_SLOT_DESCRIPTION_T
#define ANY_SLOT_DESCRIPTION_T yMake_SLOT_DESCRIPTION_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_CHANNEL_MODE_E)
#endif
#define z0NP3_copy(P)  P

extern void yAss_MULTI_SLOTS_T XPP((MULTI_SLOTS_T, MULTI_SLOTS_T, int));
#define yAssF_MULTI_SLOTS_T(V,E,A)  yAss_MULTI_SLOTS_T(V,E,A)
#define yEqF_MULTI_SLOTS_T(Expr1,Expr2)  yEq_MULTI_SLOTS_T(Expr1,Expr2)
#define yNEqF_MULTI_SLOTS_T(Expr1,Expr2)  ( ! yEq_MULTI_SLOTS_T(Expr1,Expr2) )
#define yTstI_MULTI_SLOTS_T(yExpr)  yExpr
#ifndef ANY_MULTI_SLOTS_T
#define ANY_MULTI_SLOTS_T
#endif
#define z0NQ5_copy(P)  P

extern void yAss_CHANNEL_ASSIGN_T XPP((CHANNEL_ASSIGN_T *, CHANNEL_ASSIGN_T,
  int));
#define yAssF_CHANNEL_ASSIGN_T(V,E,A)  yAss_CHANNEL_ASSIGN_T(&(V),E,A)
#define yEqF_CHANNEL_ASSIGN_T(Expr1,Expr2)  yEq_CHANNEL_ASSIGN_T(Expr1,Expr2)
#define yNEqF_CHANNEL_ASSIGN_T(Expr1,Expr2)  ( ! yEq_CHANNEL_ASSIGN_T(Expr1,Expr2) )
#ifndef ANY_CHANNEL_ASSIGN_T
#define ANY_CHANNEL_ASSIGN_T yMake_CHANNEL_ASSIGN_T(ANY_CHANNEL_DESCRIPTION_T, \
  ANY_CHANNEL_MODE_E, ANY_MOBILE_ALLOCATION_T, ANY_ABSOLUTE_STARTING_TIME_T, \
  ANY_SDL_Boolean, ANY_CHANNEL_DESCRIPTION_T, ANY_MOBILE_ALLOCATION_T, \
  ANY_TXPWR_T, ANY_SDL_Boolean, ANY_CIPHER_PARAM_T, ANY_MULTI_SLOTS_T, \
  ANY_MULTI_RATE_CFG_T)
#endif
#define z0NR03_copy(P)  P

#define yAssF_CELL_DESCRIPTION_T(V,E,A)  V = E
#define yEqF_CELL_DESCRIPTION_T(Expr1,Expr2)  yEq_CELL_DESCRIPTION_T(Expr1,Expr2)
#define yNEqF_CELL_DESCRIPTION_T(Expr1,Expr2)  ( ! yEq_CELL_DESCRIPTION_T(Expr1,Expr2) )
#ifndef ANY_CELL_DESCRIPTION_T
#define ANY_CELL_DESCRIPTION_T yMake_CELL_DESCRIPTION_T(ANY_SDL_Octet, \
  ANY_ARFCN_T)
#endif
#define z0NS3_copy(P)  P

#define yAssF_SYNCHRON_TYPE_E(V,E,A)  V = E
#define yDef_SYNCHRON_TYPE_E(yVar)  *(yVar) = NON_SYNCHRONIZED
#define yEqF_SYNCHRON_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SYNCHRON_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SYNCHRON_TYPE_E
#define ANY_SYNCHRON_TYPE_E (SYNCHRON_TYPE_E)(0 + \
  GETINTRAND%((int)(PSEUDO_SYNCHRONIZED)+1))
#endif
#define z0NT7_copy(P)  P

#define yAssF_SYNCHRON_PARAM_T(V,E,A)  V = E
#define yEqF_SYNCHRON_PARAM_T(Expr1,Expr2)  yEq_SYNCHRON_PARAM_T(Expr1,Expr2)
#define yNEqF_SYNCHRON_PARAM_T(Expr1,Expr2)  ( ! yEq_SYNCHRON_PARAM_T(Expr1,Expr2) )
#ifndef ANY_SYNCHRON_PARAM_T
#define ANY_SYNCHRON_PARAM_T yMake_SYNCHRON_PARAM_T(ANY_SYNCHRON_TYPE_E, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_TIMING_ADVANCE_T)
#endif
#define z0NU3_copy(P)  P

#define yAssF_HANDOVER_PARAM_T(V,E,A)  V = E
#define yEqF_HANDOVER_PARAM_T(Expr1,Expr2)  yEq_HANDOVER_PARAM_T(Expr1,Expr2)
#define yNEqF_HANDOVER_PARAM_T(Expr1,Expr2)  ( ! yEq_HANDOVER_PARAM_T(Expr1,Expr2) )
#ifndef ANY_HANDOVER_PARAM_T
#define ANY_HANDOVER_PARAM_T yMake_HANDOVER_PARAM_T(ANY_CELL_DESCRIPTION_T, \
  ANY_SYNCHRON_PARAM_T, ANY_SDL_Octet, ANY_SDL_Boolean)
#endif
#define z0NV3_copy(P)  P

#define yAssF_MOBILE_OTD_T(V,E,A)  V = E
#define yEqF_MOBILE_OTD_T(Expr1,Expr2)  yEq_MOBILE_OTD_T(Expr1,Expr2)
#define yNEqF_MOBILE_OTD_T(Expr1,Expr2)  ( ! yEq_MOBILE_OTD_T(Expr1,Expr2) )
#ifndef ANY_MOBILE_OTD_T
#define ANY_MOBILE_OTD_T yMake_MOBILE_OTD_T(ANY_SDL_Boolean, \
  ANY_z_ctypes_A_UnsignedLongInt)
#endif
#define z0NW3_copy(P)  P

#define yAssF_MULTIBAND_REP_T(V,E,A)  V = E
#define yEqF_MULTIBAND_REP_T(Expr1,Expr2)  yEq_MULTIBAND_REP_T(Expr1,Expr2)
#define yNEqF_MULTIBAND_REP_T(Expr1,Expr2)  ( ! yEq_MULTIBAND_REP_T(Expr1,Expr2) )
#ifndef ANY_MULTIBAND_REP_T
#define ANY_MULTIBAND_REP_T yMake_MULTIBAND_REP_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet)
#endif
#define z0NX3_copy(P)  P

#define yAssF_NCC_PERMITTED_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_NCC_PERMITTED_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_NCC_PERMITTED_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_NCC_PERMITTED_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_NCC_PERMITTED_T
#define ANY_NCC_PERMITTED_T ANY_SDL_Octet
#endif

#define yAssF_CELL_MEAS_T(V,E,A)  V = E
#define yEqF_CELL_MEAS_T(Expr1,Expr2)  yEq_CELL_MEAS_T(Expr1,Expr2)
#define yNEqF_CELL_MEAS_T(Expr1,Expr2)  ( ! yEq_CELL_MEAS_T(Expr1,Expr2) )
#ifndef ANY_CELL_MEAS_T
#define ANY_CELL_MEAS_T yMake_CELL_MEAS_T(ANY_ARFCN_T, ANY_BSIC_T, \
  ANY_SDL_Octet, ANY_z_ctypes_A_UnsignedLongInt, ANY_z_ctypes_6_ShortInt, \
  ANY_SDL_Octet)
#endif
#define z0NY3_copy(P)  P

#define yAssF_NCELL_NUM_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_NCELL_NUM_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_NCELL_NUM_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_NCELL_NUM_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_NCELL_NUM_T
#define ANY_NCELL_NUM_T ANY_SDL_Integer
#endif

extern void yAss_NCELL_MEAS_REPORT_T XPP((NCELL_MEAS_REPORT_T,
  NCELL_MEAS_REPORT_T, int));
#define yAssF_NCELL_MEAS_REPORT_T(V,E,A)  yAss_NCELL_MEAS_REPORT_T(V,E,A)
#define yEqF_NCELL_MEAS_REPORT_T(Expr1,Expr2)  yEq_NCELL_MEAS_REPORT_T(Expr1,Expr2)
#define yNEqF_NCELL_MEAS_REPORT_T(Expr1,Expr2)  ( ! yEq_NCELL_MEAS_REPORT_T(Expr1,Expr2) )
#define yTstI_NCELL_MEAS_REPORT_T(yExpr)  yExpr
#ifndef ANY_NCELL_MEAS_REPORT_T
#define ANY_NCELL_MEAS_REPORT_T
#endif
#define z0NZ5_copy(P)  P

extern void yAss_DUAL_NCELL_MEAS_REPORT_T XPP((DUAL_NCELL_MEAS_REPORT_T,
  DUAL_NCELL_MEAS_REPORT_T, int));
#define yAssF_DUAL_NCELL_MEAS_REPORT_T(V,E,A)  yAss_DUAL_NCELL_MEAS_REPORT_T(V,E,A)
#define yEqF_DUAL_NCELL_MEAS_REPORT_T(Expr1,Expr2)  yEq_DUAL_NCELL_MEAS_REPORT_T(Expr1,Expr2)
#define yNEqF_DUAL_NCELL_MEAS_REPORT_T(Expr1,Expr2)  ( ! yEq_DUAL_NCELL_MEAS_REPORT_T(Expr1,Expr2) )
#define yTstI_DUAL_NCELL_MEAS_REPORT_T(yExpr)  yExpr
#ifndef ANY_DUAL_NCELL_MEAS_REPORT_T
#define ANY_DUAL_NCELL_MEAS_REPORT_T
#endif
#define z0O05_copy(P)  P

#define yAssF_SCELL_MEAS_REPORT_T(V,E,A)  V = E
#define yEqF_SCELL_MEAS_REPORT_T(Expr1,Expr2)  yEq_SCELL_MEAS_REPORT_T(Expr1,Expr2)
#define yNEqF_SCELL_MEAS_REPORT_T(Expr1,Expr2)  ( ! yEq_SCELL_MEAS_REPORT_T(Expr1,Expr2) )
#ifndef ANY_SCELL_MEAS_REPORT_T
#define ANY_SCELL_MEAS_REPORT_T yMake_SCELL_MEAS_REPORT_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_TXPWR_T, \
  ANY_RADIO_LINK_TIMEOUT_T)
#endif
#define z0O13_copy(P)  P

#define yAssF_BCCH_IF_LEVEL_T(V,E,A)  V = E
#define yEqF_BCCH_IF_LEVEL_T(Expr1,Expr2)  yEq_BCCH_IF_LEVEL_T(Expr1,Expr2)
#define yNEqF_BCCH_IF_LEVEL_T(Expr1,Expr2)  ( ! yEq_BCCH_IF_LEVEL_T(Expr1,Expr2) )
#ifndef ANY_BCCH_IF_LEVEL_T
#define ANY_BCCH_IF_LEVEL_T yMake_BCCH_IF_LEVEL_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet)
#endif
#define z0O23_copy(P)  P

#define yAssF_L1_ERROR_CODE_E(V,E,A)  V = E
#define yDef_L1_ERROR_CODE_E(yVar)  *(yVar) = DOWN_LINK_FAIL
#define yEqF_L1_ERROR_CODE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_L1_ERROR_CODE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_L1_ERROR_CODE_E
#define ANY_L1_ERROR_CODE_E (L1_ERROR_CODE_E)(0 + \
  GETINTRAND%((int)(RR_CS_OVERRIDE_PS)+1))
#endif
#define z0O37_copy(P)  P

extern void yAss_PCCCH_DESC_T XPP((PCCCH_DESC_T *, PCCCH_DESC_T, int));
#define yAssF_PCCCH_DESC_T(V,E,A)  yAss_PCCCH_DESC_T(&(V),E,A)
#define yEqF_PCCCH_DESC_T(Expr1,Expr2)  yEq_PCCCH_DESC_T(Expr1,Expr2)
#define yNEqF_PCCCH_DESC_T(Expr1,Expr2)  ( ! yEq_PCCCH_DESC_T(Expr1,Expr2) )
#ifndef ANY_PCCCH_DESC_T
#define ANY_PCCCH_DESC_T yMake_PCCCH_DESC_T(ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_ARFCN_T, ANY_SDL_Octet, ANY_SDL_Octet, ANY_ARFCN_LIST_T)
#endif
#define z0O43_copy(P)  P

#define yAssF_NC_NON_DRX_PERIOD_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_NC_NON_DRX_PERIOD_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_NC_NON_DRX_PERIOD_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_NC_NON_DRX_PERIOD_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_NC_NON_DRX_PERIOD_T
#define ANY_NC_NON_DRX_PERIOD_T ANY_SDL_Octet
#endif

#define yAssF_NC_REPORT_PERIOD_I_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_NC_REPORT_PERIOD_I_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_NC_REPORT_PERIOD_I_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_NC_REPORT_PERIOD_I_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_NC_REPORT_PERIOD_I_T
#define ANY_NC_REPORT_PERIOD_I_T ANY_SDL_Octet
#endif

#define yAssF_NC_REPORT_PERIOD_T_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_NC_REPORT_PERIOD_T_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_NC_REPORT_PERIOD_T_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_NC_REPORT_PERIOD_T_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_NC_REPORT_PERIOD_T_T
#define ANY_NC_REPORT_PERIOD_T_T ANY_SDL_Octet
#endif

#define yAssF_NC_FREQUENCY_LIST_T(V,E,A)  yAssF_ARFCN_LIST_T(V,E,A)
#define yDef_NC_FREQUENCY_LIST_T(yVar)  yDef_ARFCN_LIST_T((ARFCN_LIST_T *)yVar)
#define yEqF_NC_FREQUENCY_LIST_T(Expr1,Expr2)  yEqF_ARFCN_LIST_T(Expr1,Expr2)
#define yNEqF_NC_FREQUENCY_LIST_T(Expr1,Expr2)  yNEqF_ARFCN_LIST_T(Expr1,Expr2)
#ifndef ANY_NC_FREQUENCY_LIST_T
#define ANY_NC_FREQUENCY_LIST_T ANY_ARFCN_LIST_T
#endif

#define yAssF_BCCH_INTERF_LEVEL_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_BCCH_INTERF_LEVEL_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_BCCH_INTERF_LEVEL_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_BCCH_INTERF_LEVEL_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_BCCH_INTERF_LEVEL_T
#define ANY_BCCH_INTERF_LEVEL_T ANY_SDL_Octet
#endif

#define yAssF_EXT_MEAS_MODE_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_EXT_MEAS_MODE_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_EXT_MEAS_MODE_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_EXT_MEAS_MODE_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_EXT_MEAS_MODE_T
#define ANY_EXT_MEAS_MODE_T ANY_SDL_Octet
#endif

#define yAssF_EXT_REPORT_PERIOD_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_EXT_REPORT_PERIOD_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_EXT_REPORT_PERIOD_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_EXT_REPORT_PERIOD_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_EXT_REPORT_PERIOD_T
#define ANY_EXT_REPORT_PERIOD_T ANY_SDL_Octet
#endif

#define yAssF_EXT_FREQUENCY_LIST_T(V,E,A)  yAssF_ARFCN_LIST_T(V,E,A)
#define yDef_EXT_FREQUENCY_LIST_T(yVar)  yDef_ARFCN_LIST_T((ARFCN_LIST_T *)yVar)
#define yEqF_EXT_FREQUENCY_LIST_T(Expr1,Expr2)  yEqF_ARFCN_LIST_T(Expr1,Expr2)
#define yNEqF_EXT_FREQUENCY_LIST_T(Expr1,Expr2)  yNEqF_ARFCN_LIST_T(Expr1,Expr2)
#ifndef ANY_EXT_FREQUENCY_LIST_T
#define ANY_EXT_FREQUENCY_LIST_T ANY_ARFCN_LIST_T
#endif

#define yAssF_INT_FREQ_VALID_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_INT_FREQ_VALID_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_INT_FREQ_VALID_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_INT_FREQ_VALID_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_INT_FREQ_VALID_T
#define ANY_INT_FREQ_VALID_T ANY_SDL_Boolean
#endif

#define yAssF_INT_FREQ_INDEX_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_INT_FREQ_INDEX_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_INT_FREQ_INDEX_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_INT_FREQ_INDEX_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_INT_FREQ_INDEX_T
#define ANY_INT_FREQ_INDEX_T ANY_SDL_Octet
#endif

#define yAssF_NC_EM_REPORT_PTR_T(V,E,A)  V = E
#define yDef_NC_EM_REPORT_PTR_T(yVar)  *(yVar) = z0O50_Null()
#define yEqF_NC_EM_REPORT_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_NC_EM_REPORT_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_NC_EM_REPORT_PTR_T
#define ANY_NC_EM_REPORT_PTR_T 0
#endif
#define z0O5F_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_NC_EM_REPORT_PTR_T() (NC_EM_REPORT_PTR_T)XALLOC_REF_VAL(sizeof(CELL_MEAS_T), ySrtN_NC_EM_REPORT_PTR_T)
#else
#define yAll_NC_EM_REPORT_PTR_T() (NC_EM_REPORT_PTR_T)XALLOC(sizeof(CELL_MEAS_T), \
  &ySrtR_NC_EM_REPORT_PTR_T)
#endif
#define yPlus_NC_EM_REPORT_PTR_T(P1,P2) (P1+P2)
#define yMinus_NC_EM_REPORT_PTR_T(P1,P2) (P1-P2)
#define z0O50_Null() 0
#define z0O51_Alloc() yAll_NC_EM_REPORT_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0O56_free(P) XFREE_REF_VAL((void **)(P), sizeof(CELL_MEAS_T))
#else
#define z0O56_free(P) XFREE((void **)(P), sizeof(CELL_MEAS_T))
#endif
#define z0O59_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0O5A_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0O5B_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

extern void yAss_IF_LEVEL_LIST_T XPP((IF_LEVEL_LIST_T, IF_LEVEL_LIST_T, int));
#define yAssF_IF_LEVEL_LIST_T(V,E,A)  yAss_IF_LEVEL_LIST_T(V,E,A)
#define yEqF_IF_LEVEL_LIST_T(Expr1,Expr2)  yEq_IF_LEVEL_LIST_T(Expr1,Expr2)
#define yNEqF_IF_LEVEL_LIST_T(Expr1,Expr2)  ( ! yEq_IF_LEVEL_LIST_T(Expr1,Expr2) )
#define yTstI_IF_LEVEL_LIST_T(yExpr)  yExpr
#ifndef ANY_IF_LEVEL_LIST_T
#define ANY_IF_LEVEL_LIST_T
#endif
#define z0O65_copy(P)  P

#define yAssF_TBF_DIRECTION_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_TBF_DIRECTION_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_TBF_DIRECTION_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_TBF_DIRECTION_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_TBF_DIRECTION_T
#define ANY_TBF_DIRECTION_T ANY_SDL_Integer
#endif

#define yAssF_TBF_MODE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_TBF_MODE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_TBF_MODE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_TBF_MODE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_TBF_MODE_T
#define ANY_TBF_MODE_T ANY_SDL_Integer
#endif

#define yAssF_ARQ_MODE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_ARQ_MODE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_ARQ_MODE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_ARQ_MODE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_ARQ_MODE_T
#define ANY_ARQ_MODE_T ANY_SDL_Integer
#endif

extern void yAss_PACKET_CHANNEL_T XPP((PACKET_CHANNEL_T *, PACKET_CHANNEL_T,
  int));
#define yAssF_PACKET_CHANNEL_T(V,E,A)  yAss_PACKET_CHANNEL_T(&(V),E,A)
#define yEqF_PACKET_CHANNEL_T(Expr1,Expr2)  yEq_PACKET_CHANNEL_T(Expr1,Expr2)
#define yNEqF_PACKET_CHANNEL_T(Expr1,Expr2)  ( ! yEq_PACKET_CHANNEL_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CHANNEL_T
#define ANY_PACKET_CHANNEL_T yMake_PACKET_CHANNEL_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_ARFCN_T, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_ARFCN_LIST_T)
#endif
#define z0O73_copy(P)  P

#define yAssF_GPRS_TIMING_ADVANCE_T(V,E,A)  V = E
#define yEqF_GPRS_TIMING_ADVANCE_T(Expr1,Expr2)  yEq_GPRS_TIMING_ADVANCE_T(Expr1,Expr2)
#define yNEqF_GPRS_TIMING_ADVANCE_T(Expr1,Expr2)  ( ! yEq_GPRS_TIMING_ADVANCE_T(Expr1,Expr2) )
#ifndef ANY_GPRS_TIMING_ADVANCE_T
#define ANY_GPRS_TIMING_ADVANCE_T yMake_GPRS_TIMING_ADVANCE_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0O83_copy(P)  P

#define yAssF_TBF_STARTING_TIME_T(V,E,A)  V = E
#define yEqF_TBF_STARTING_TIME_T(Expr1,Expr2)  yEq_TBF_STARTING_TIME_T(Expr1,Expr2)
#define yNEqF_TBF_STARTING_TIME_T(Expr1,Expr2)  ( ! yEq_TBF_STARTING_TIME_T(Expr1,Expr2) )
#ifndef ANY_TBF_STARTING_TIME_T
#define ANY_TBF_STARTING_TIME_T yMake_TBF_STARTING_TIME_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_ABSOLUTE_FRAME_NUMBER_T, ANY_REDUCED_FRAME_NUMBER_T)
#endif
#define z0O93_copy(P)  P

extern void yAss_USF_ARR_T XPP((USF_ARR_T, USF_ARR_T, int));
#define yAssF_USF_ARR_T(V,E,A)  yAss_USF_ARR_T(V,E,A)
#define yEqF_USF_ARR_T(Expr1,Expr2)  yEq_USF_ARR_T(Expr1,Expr2)
#define yNEqF_USF_ARR_T(Expr1,Expr2)  ( ! yEq_USF_ARR_T(Expr1,Expr2) )
#define yTstI_USF_ARR_T(yExpr)  yExpr
#ifndef ANY_USF_ARR_T
#define ANY_USF_ARR_T
#endif
#define z0OA5_copy(P)  P

extern void yAss_PH_MAC_MODE_T XPP((PH_MAC_MODE_T *, PH_MAC_MODE_T, int));
#define yAssF_PH_MAC_MODE_T(V,E,A)  yAss_PH_MAC_MODE_T(&(V),E,A)
#define yEqF_PH_MAC_MODE_T(Expr1,Expr2)  yEq_PH_MAC_MODE_T(Expr1,Expr2)
#define yNEqF_PH_MAC_MODE_T(Expr1,Expr2)  ( ! yEq_PH_MAC_MODE_T(Expr1,Expr2) )
#ifndef ANY_PH_MAC_MODE_T
#define ANY_PH_MAC_MODE_T yMake_PH_MAC_MODE_T(ANY_MAC_MODE_T, ANY_SDL_Octet, \
  ANY_USF_ARR_T)
#endif
#define z0OB3_copy(P)  P

#define yAssF_MEAS_PARAM_T(V,E,A)  V = E
#define yEqF_MEAS_PARAM_T(Expr1,Expr2)  yEq_MEAS_PARAM_T(Expr1,Expr2)
#define yNEqF_MEAS_PARAM_T(Expr1,Expr2)  ( ! yEq_MEAS_PARAM_T(Expr1,Expr2) )
#ifndef ANY_MEAS_PARAM_T
#define ANY_MEAS_PARAM_T yMake_MEAS_PARAM_T(ANY_SDL_Boolean, \
  ANY_TBF_STARTING_TIME_T, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0OC3_copy(P)  P

#define yAssF_z11O_BEP_PERIOD2(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_z11O_BEP_PERIOD2(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_z11O_BEP_PERIOD2(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_z11O_BEP_PERIOD2(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_z11O_BEP_PERIOD2
#define ANY_z11O_BEP_PERIOD2 ANY_SDL_Integer
#endif

#define yAssF_EGPRS_TBF_PARAM_T(V,E,A)  V = E
#define yEqF_EGPRS_TBF_PARAM_T(Expr1,Expr2)  yEq_EGPRS_TBF_PARAM_T(Expr1,Expr2)
#define yNEqF_EGPRS_TBF_PARAM_T(Expr1,Expr2)  ( ! yEq_EGPRS_TBF_PARAM_T(Expr1,Expr2) )
#ifndef ANY_EGPRS_TBF_PARAM_T
#define ANY_EGPRS_TBF_PARAM_T yMake_EGPRS_TBF_PARAM_T(ANY_z11O_BEP_PERIOD2, \
  ANY_ARQ_MODE_T, ANY_SDL_Octet)
#endif
#define z0OD3_copy(P)  P

#define yAssF_GLOBAL_PWRC_PARAM_T(V,E,A)  V = E
#define yEqF_GLOBAL_PWRC_PARAM_T(Expr1,Expr2)  yEq_GLOBAL_PWRC_PARAM_T(Expr1,Expr2)
#define yNEqF_GLOBAL_PWRC_PARAM_T(Expr1,Expr2)  ( ! yEq_GLOBAL_PWRC_PARAM_T(Expr1,Expr2) )
#ifndef ANY_GLOBAL_PWRC_PARAM_T
#define ANY_GLOBAL_PWRC_PARAM_T yMake_GLOBAL_PWRC_PARAM_T(ANY_ALPHA_T, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0OE3_copy(P)  P

extern void yAss_BLOCK_ARR_T XPP((BLOCK_ARR_T, BLOCK_ARR_T, int));
#define yAssF_BLOCK_ARR_T(V,E,A)  yAss_BLOCK_ARR_T(V,E,A)
#define yEqF_BLOCK_ARR_T(Expr1,Expr2)  yEq_BLOCK_ARR_T(Expr1,Expr2)
#define yNEqF_BLOCK_ARR_T(Expr1,Expr2)  ( ! yEq_BLOCK_ARR_T(Expr1,Expr2) )
#define yTstI_BLOCK_ARR_T(yExpr)  yExpr
#ifndef ANY_BLOCK_ARR_T
#define ANY_BLOCK_ARR_T
#endif
#define z0OF5_copy(P)  P

extern void yAss_BLOCK_STRUCT_T XPP((BLOCK_STRUCT_T *, BLOCK_STRUCT_T, int));
#define yAssF_BLOCK_STRUCT_T(V,E,A)  yAss_BLOCK_STRUCT_T(&(V),E,A)
#define yEqF_BLOCK_STRUCT_T(Expr1,Expr2)  yEq_BLOCK_STRUCT_T(Expr1,Expr2)
#define yNEqF_BLOCK_STRUCT_T(Expr1,Expr2)  ( ! yEq_BLOCK_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_BLOCK_STRUCT_T
#define ANY_BLOCK_STRUCT_T yMake_BLOCK_STRUCT_T(ANY_z_ctypes_6_ShortInt, \
  ANY_CHANNEL_TYPE_E, ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt, \
  ANY_BLOCK_ARR_T)
#endif
#define z0OG3_copy(P)  P

#define yAssF_BLOCK_STRUCT_PTR_T(V,E,A)  V = E
#define yDef_BLOCK_STRUCT_PTR_T(yVar)  *(yVar) = z0OH0_Null()
#define yEqF_BLOCK_STRUCT_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_BLOCK_STRUCT_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_BLOCK_STRUCT_PTR_T
#define ANY_BLOCK_STRUCT_PTR_T 0
#endif
#define z0OHF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_BLOCK_STRUCT_PTR_T() (BLOCK_STRUCT_PTR_T)XALLOC_REF_VAL(sizeof(BLOCK_STRUCT_T), ySrtN_BLOCK_STRUCT_PTR_T)
#else
#define yAll_BLOCK_STRUCT_PTR_T() (BLOCK_STRUCT_PTR_T)XALLOC(sizeof(BLOCK_STRUCT_T), \
  &ySrtR_BLOCK_STRUCT_PTR_T)
#endif
#define yPlus_BLOCK_STRUCT_PTR_T(P1,P2) (P1+P2)
#define yMinus_BLOCK_STRUCT_PTR_T(P1,P2) (P1-P2)
#define z0OH0_Null() 0
#define z0OH1_Alloc() yAll_BLOCK_STRUCT_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0OH6_free(P) XFREE_REF_VAL((void **)(P), sizeof(BLOCK_STRUCT_T))
#else
#define z0OH6_free(P) XFREE((void **)(P), sizeof(BLOCK_STRUCT_T))
#endif
#define z0OH9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0OHA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0OHB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

extern void yAss_BLOCK_STRUCT_PTR_ARR_T XPP((BLOCK_STRUCT_PTR_ARR_T,
  BLOCK_STRUCT_PTR_ARR_T, int));
#define yAssF_BLOCK_STRUCT_PTR_ARR_T(V,E,A)  yAss_BLOCK_STRUCT_PTR_ARR_T(V,E,A)
#define yEqF_BLOCK_STRUCT_PTR_ARR_T(Expr1,Expr2)  yEq_BLOCK_STRUCT_PTR_ARR_T(Expr1,Expr2)
#define yNEqF_BLOCK_STRUCT_PTR_ARR_T(Expr1,Expr2)  ( ! yEq_BLOCK_STRUCT_PTR_ARR_T(Expr1,Expr2) )
#define yTstI_BLOCK_STRUCT_PTR_ARR_T(yExpr)  yExpr
#ifndef ANY_BLOCK_STRUCT_PTR_ARR_T
#define ANY_BLOCK_STRUCT_PTR_ARR_T
#endif
#define z0OI5_copy(P)  P

#define yAssF_BLOCK_STRUCT_PTR_ARR_PTR_T(V,E,A)  V = E
#define yDef_BLOCK_STRUCT_PTR_ARR_PTR_T(yVar)  *(yVar) = z0OJ0_Null()
#define yEqF_BLOCK_STRUCT_PTR_ARR_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_BLOCK_STRUCT_PTR_ARR_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_BLOCK_STRUCT_PTR_ARR_PTR_T
#define ANY_BLOCK_STRUCT_PTR_ARR_PTR_T 0
#endif
#define z0OJF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_BLOCK_STRUCT_PTR_ARR_PTR_T() (BLOCK_STRUCT_PTR_ARR_PTR_T)XALLOC_REF_VAL(sizeof(BLOCK_STRUCT_PTR_ARR_T), ySrtN_BLOCK_STRUCT_PTR_ARR_PTR_T)
#else
#define yAll_BLOCK_STRUCT_PTR_ARR_PTR_T() (BLOCK_STRUCT_PTR_ARR_PTR_T)XALLOC(sizeof(BLOCK_STRUCT_PTR_ARR_T), \
  &ySrtR_BLOCK_STRUCT_PTR_ARR_PTR_T)
#endif
#define yPlus_BLOCK_STRUCT_PTR_ARR_PTR_T(P1,P2) (P1+P2)
#define yMinus_BLOCK_STRUCT_PTR_ARR_PTR_T(P1,P2) (P1-P2)
#define z0OJ0_Null() 0
#define z0OJ1_Alloc() yAll_BLOCK_STRUCT_PTR_ARR_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0OJ6_free(P) XFREE_REF_VAL((void **)(P), sizeof(BLOCK_STRUCT_PTR_ARR_T))
#else
#define z0OJ6_free(P) XFREE((void **)(P), sizeof(BLOCK_STRUCT_PTR_ARR_T))
#endif
#define z0OJ9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0OJA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0OJB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_AB_FORMAT_E(V,E,A)  V = E
#define yDef_AB_FORMAT_E(yVar)  *(yVar) = AB_8
#define yEqF_AB_FORMAT_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_AB_FORMAT_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_AB_FORMAT_E
#define ANY_AB_FORMAT_E (AB_FORMAT_E)(0 + GETINTRAND%((int)(AB_11)+1))
#endif
#define z0OK5_copy(P)  P

extern void yAss_EGPRS_RACH_AB_T XPP((EGPRS_RACH_AB_T, EGPRS_RACH_AB_T, int));
#define yAssF_EGPRS_RACH_AB_T(V,E,A)  yAss_EGPRS_RACH_AB_T(V,E,A)
#define yEqF_EGPRS_RACH_AB_T(Expr1,Expr2)  yEq_EGPRS_RACH_AB_T(Expr1,Expr2)
#define yNEqF_EGPRS_RACH_AB_T(Expr1,Expr2)  ( ! yEq_EGPRS_RACH_AB_T(Expr1,Expr2) )
#define yTstI_EGPRS_RACH_AB_T(yExpr)  yExpr
#ifndef ANY_EGPRS_RACH_AB_T
#define ANY_EGPRS_RACH_AB_T
#endif
#define z0OL5_copy(P)  P

extern void yAss_PRACH_AB_T XPP((PRACH_AB_T, PRACH_AB_T, int));
#define yAssF_PRACH_AB_T(V,E,A)  yAss_PRACH_AB_T(V,E,A)
#define yEqF_PRACH_AB_T(Expr1,Expr2)  yEq_PRACH_AB_T(Expr1,Expr2)
#define yNEqF_PRACH_AB_T(Expr1,Expr2)  ( ! yEq_PRACH_AB_T(Expr1,Expr2) )
#define yTstI_PRACH_AB_T(yExpr)  yExpr
#ifndef ANY_PRACH_AB_T
#define ANY_PRACH_AB_T
#endif
#define z0OM5_copy(P)  P

#define yAssF_IS_EGPRS_PRACH_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_EGPRS_PRACH_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_EGPRS_PRACH_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_EGPRS_PRACH_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_EGPRS_PRACH_T
#define ANY_IS_EGPRS_PRACH_T ANY_SDL_Boolean
#endif

#define yAssF_PRACH_AB_PTR_T(V,E,A)  V = E
#define yDef_PRACH_AB_PTR_T(yVar)  *(yVar) = z0ON0_Null()
#define yEqF_PRACH_AB_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_PRACH_AB_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_PRACH_AB_PTR_T
#define ANY_PRACH_AB_PTR_T 0
#endif
#define z0ONF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_PRACH_AB_PTR_T() (PRACH_AB_PTR_T)XALLOC_REF_VAL(sizeof(PRACH_AB_T), ySrtN_PRACH_AB_PTR_T)
#else
#define yAll_PRACH_AB_PTR_T() (PRACH_AB_PTR_T)XALLOC(sizeof(PRACH_AB_T), \
  &ySrtR_PRACH_AB_PTR_T)
#endif
#define yPlus_PRACH_AB_PTR_T(P1,P2) (P1+P2)
#define yMinus_PRACH_AB_PTR_T(P1,P2) (P1-P2)
#define z0ON0_Null() 0
#define z0ON1_Alloc() yAll_PRACH_AB_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0ON6_free(P) XFREE_REF_VAL((void **)(P), sizeof(PRACH_AB_T))
#else
#define z0ON6_free(P) XFREE((void **)(P), sizeof(PRACH_AB_T))
#endif
#define z0ON9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0ONA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0ONB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_EGPRS_RACH_AB_PTR_T(V,E,A)  V = E
#define yDef_EGPRS_RACH_AB_PTR_T(yVar)  *(yVar) = z0OO0_Null()
#define yEqF_EGPRS_RACH_AB_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_EGPRS_RACH_AB_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_EGPRS_RACH_AB_PTR_T
#define ANY_EGPRS_RACH_AB_PTR_T 0
#endif
#define z0OOF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_EGPRS_RACH_AB_PTR_T() (EGPRS_RACH_AB_PTR_T)XALLOC_REF_VAL(sizeof(EGPRS_RACH_AB_T), ySrtN_EGPRS_RACH_AB_PTR_T)
#else
#define yAll_EGPRS_RACH_AB_PTR_T() (EGPRS_RACH_AB_PTR_T)XALLOC(sizeof(EGPRS_RACH_AB_T), \
  &ySrtR_EGPRS_RACH_AB_PTR_T)
#endif
#define yPlus_EGPRS_RACH_AB_PTR_T(P1,P2) (P1+P2)
#define yMinus_EGPRS_RACH_AB_PTR_T(P1,P2) (P1-P2)
#define z0OO0_Null() 0
#define z0OO1_Alloc() yAll_EGPRS_RACH_AB_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0OO6_free(P) XFREE_REF_VAL((void **)(P), sizeof(EGPRS_RACH_AB_T))
#else
#define z0OO6_free(P) XFREE((void **)(P), sizeof(EGPRS_RACH_AB_T))
#endif
#define z0OO9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0OOA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0OOB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

extern void yAss_GAMMA_ARR_T XPP((GAMMA_ARR_T, GAMMA_ARR_T, int));
#define yAssF_GAMMA_ARR_T(V,E,A)  yAss_GAMMA_ARR_T(V,E,A)
#define yEqF_GAMMA_ARR_T(Expr1,Expr2)  yEq_GAMMA_ARR_T(Expr1,Expr2)
#define yNEqF_GAMMA_ARR_T(Expr1,Expr2)  ( ! yEq_GAMMA_ARR_T(Expr1,Expr2) )
#define yTstI_GAMMA_ARR_T(yExpr)  yExpr
#ifndef ANY_GAMMA_ARR_T
#define ANY_GAMMA_ARR_T
#endif
#define z0OP5_copy(P)  P

extern void yAss_SMSCB_SCHEDULE_TABLE_T XPP((SMSCB_SCHEDULE_TABLE_T,
  SMSCB_SCHEDULE_TABLE_T, int));
#define yAssF_SMSCB_SCHEDULE_TABLE_T(V,E,A)  yAss_SMSCB_SCHEDULE_TABLE_T(V,E,A)
#define yEqF_SMSCB_SCHEDULE_TABLE_T(Expr1,Expr2)  yEq_SMSCB_SCHEDULE_TABLE_T(Expr1,Expr2)
#define yNEqF_SMSCB_SCHEDULE_TABLE_T(Expr1,Expr2)  ( ! yEq_SMSCB_SCHEDULE_TABLE_T(Expr1,Expr2) )
#define yTstI_SMSCB_SCHEDULE_TABLE_T(yExpr)  yExpr
#ifndef ANY_SMSCB_SCHEDULE_TABLE_T
#define ANY_SMSCB_SCHEDULE_TABLE_T
#endif
#define z0OQ5_copy(P)  P

extern void yAss_SMSCB_BLOCK_ARR_T XPP((SMSCB_BLOCK_ARR_T, SMSCB_BLOCK_ARR_T,
  int));
#define yAssF_SMSCB_BLOCK_ARR_T(V,E,A)  yAss_SMSCB_BLOCK_ARR_T(V,E,A)
#define yEqF_SMSCB_BLOCK_ARR_T(Expr1,Expr2)  yEq_SMSCB_BLOCK_ARR_T(Expr1,Expr2)
#define yNEqF_SMSCB_BLOCK_ARR_T(Expr1,Expr2)  ( ! yEq_SMSCB_BLOCK_ARR_T(Expr1,Expr2) )
#define yTstI_SMSCB_BLOCK_ARR_T(yExpr)  yExpr
#ifndef ANY_SMSCB_BLOCK_ARR_T
#define ANY_SMSCB_BLOCK_ARR_T
#endif
#define z0OR5_copy(P)  P

extern void yAss_SMSCB_SCHEDULE_T XPP((SMSCB_SCHEDULE_T *, SMSCB_SCHEDULE_T,
  int));
#define yAssF_SMSCB_SCHEDULE_T(V,E,A)  yAss_SMSCB_SCHEDULE_T(&(V),E,A)
#define yEqF_SMSCB_SCHEDULE_T(Expr1,Expr2)  yEq_SMSCB_SCHEDULE_T(Expr1,Expr2)
#define yNEqF_SMSCB_SCHEDULE_T(Expr1,Expr2)  ( ! yEq_SMSCB_SCHEDULE_T(Expr1,Expr2) )
#ifndef ANY_SMSCB_SCHEDULE_T
#define ANY_SMSCB_SCHEDULE_T yMake_SMSCB_SCHEDULE_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SMSCB_SCHEDULE_TABLE_T)
#endif
#define z0OS3_copy(P)  P

#define yAssF_ALPHA_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_ALPHA_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_ALPHA_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_ALPHA_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_ALPHA_T
#define ANY_ALPHA_T ANY_SDL_Octet
#endif

#define yAssF_T_AVG_W_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_T_AVG_W_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_T_AVG_W_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_T_AVG_W_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_T_AVG_W_T
#define ANY_T_AVG_W_T ANY_SDL_Octet
#endif

#define yAssF_BA_VALID_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_BA_VALID_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_BA_VALID_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_BA_VALID_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_BA_VALID_T
#define ANY_BA_VALID_T ANY_SDL_Octet
#endif

#define yAssF_T_AVG_T_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_T_AVG_T_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_T_AVG_T_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_T_AVG_T_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_T_AVG_T_T
#define ANY_T_AVG_T_T ANY_SDL_Octet
#endif

#define yAssF_PB_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_PB_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_PB_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_PB_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_PB_T
#define ANY_PB_T ANY_SDL_Octet
#endif

#define yAssF_USE_BCCH_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_USE_BCCH_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_USE_BCCH_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_USE_BCCH_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_USE_BCCH_T
#define ANY_USE_BCCH_T ANY_SDL_Boolean
#endif

#define yAssF_N_AVG_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_N_AVG_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_N_AVG_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_N_AVG_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_N_AVG_T
#define ANY_N_AVG_T ANY_SDL_Octet
#endif

#define yAssF_CBCH_ACT_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_CBCH_ACT_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_CBCH_ACT_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_CBCH_ACT_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_CBCH_ACT_T
#define ANY_CBCH_ACT_T ANY_SDL_Boolean
#endif

#define yAssF_INPUT_SWITCH_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_INPUT_SWITCH_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_INPUT_SWITCH_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_INPUT_SWITCH_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_INPUT_SWITCH_T
#define ANY_INPUT_SWITCH_T ANY_SDL_Boolean
#endif

#define yAssF_OUTPUT_SWITCH_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_OUTPUT_SWITCH_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_OUTPUT_SWITCH_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_OUTPUT_SWITCH_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_OUTPUT_SWITCH_T
#define ANY_OUTPUT_SWITCH_T ANY_SDL_Boolean
#endif

#define yAssF_LOOP_LIST_E(V,E,A)  V = E
#define yDef_LOOP_LIST_E(yVar)  *(yVar) = LOOP_A
#define yEqF_LOOP_LIST_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_LOOP_LIST_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_LOOP_LIST_E
#define ANY_LOOP_LIST_E (LOOP_LIST_E)(0 + GETINTRAND%((int)(LOOP_MAX)+1))
#endif
#define z0OTC_copy(P)  P

#define yAssF_TONE_SWITCH_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_TONE_SWITCH_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_TONE_SWITCH_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_TONE_SWITCH_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_TONE_SWITCH_T
#define ANY_TONE_SWITCH_T ANY_SDL_Boolean
#endif

#define yAssF_TONE_DURATION_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_TONE_DURATION_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_TONE_DURATION_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_TONE_DURATION_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_TONE_DURATION_T
#define ANY_TONE_DURATION_T ANY_SDL_Integer
#endif

#define yAssF_INPUT_LEVEL_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_INPUT_LEVEL_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_INPUT_LEVEL_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_INPUT_LEVEL_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_INPUT_LEVEL_T
#define ANY_INPUT_LEVEL_T ANY_SDL_Integer
#endif

#define yAssF_OUTPUT_LEVEL_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_OUTPUT_LEVEL_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_OUTPUT_LEVEL_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_OUTPUT_LEVEL_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_OUTPUT_LEVEL_T
#define ANY_OUTPUT_LEVEL_T ANY_SDL_Integer
#endif

#define yAssF_MAC_MODE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_MAC_MODE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_MAC_MODE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_MAC_MODE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_MAC_MODE_T
#define ANY_MAC_MODE_T ANY_SDL_Integer
#endif

#define yAssF_LLC_PDU_TYPE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_LLC_PDU_TYPE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_LLC_PDU_TYPE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_LLC_PDU_TYPE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_LLC_PDU_TYPE_T(yExpr)  yExpr
#define yTstI_LLC_PDU_TYPE_T(yExpr)  yExpr
#ifndef ANY_LLC_PDU_TYPE_T
#define ANY_LLC_PDU_TYPE_T (LLC_PDU_TYPE_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(1)+1))
#endif

#define yAssF_RADIO_PRIORITY_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RADIO_PRIORITY_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RADIO_PRIORITY_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RADIO_PRIORITY_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_RADIO_PRIORITY_T(yExpr)  yExpr
#define yTstI_RADIO_PRIORITY_T(yExpr)  yExpr
#ifndef ANY_RADIO_PRIORITY_T
#define ANY_RADIO_PRIORITY_T (RADIO_PRIORITY_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(3)+1))
#endif

#define yAssF_RLC_MODE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RLC_MODE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RLC_MODE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RLC_MODE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_RLC_MODE_T(yExpr)  yExpr
#define yTstI_RLC_MODE_T(yExpr)  yExpr
#ifndef ANY_RLC_MODE_T
#define ANY_RLC_MODE_T (RLC_MODE_T)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(1)+1))
#endif

#define yAssF_CHAN_DESCR_T(V,E,A)  V = E
#define yEqF_CHAN_DESCR_T(Expr1,Expr2)  yEq_CHAN_DESCR_T(Expr1,Expr2)
#define yNEqF_CHAN_DESCR_T(Expr1,Expr2)  ( ! yEq_CHAN_DESCR_T(Expr1,Expr2) )
#ifndef ANY_CHAN_DESCR_T
#define ANY_CHAN_DESCR_T yMake_CHAN_DESCR_T(ANY_PEAK_THROUGHPUT_CLASS_T, \
  ANY_RADIO_PRIORITY_T, ANY_RLC_MODE_T, ANY_LLC_PDU_TYPE_T, \
  ANY_z_ctypes_6_ShortInt)
#endif
#define z0OU3_copy(P)  P

#define yAssF_TEST_INTERFACE_E(V,E,A)  V = E
#define yDef_TEST_INTERFACE_E(yVar)  *(yVar) = NORMAL_OPERATION
#define yEqF_TEST_INTERFACE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_TEST_INTERFACE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_TEST_INTERFACE_E
#define ANY_TEST_INTERFACE_E (TEST_INTERFACE_E)(0 + \
  GETINTRAND%((int)(ACOUSTIC_DEVICE_AD_DA)+1))
#endif
#define z0OV8_copy(P)  P

#define yAssF_DTX_ALLOWED_E(V,E,A)  V = E
#define yDef_DTX_ALLOWED_E(yVar)  *(yVar) = NEITHER_USE_DTX
#define yEqF_DTX_ALLOWED_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_DTX_ALLOWED_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_DTX_ALLOWED_E
#define ANY_DTX_ALLOWED_E (DTX_ALLOWED_E)(0 + GETINTRAND%((int)(BOTH_USE_DTX) \
  +1))
#endif
#define z0OW7_copy(P)  P

#define yAssF_SINGLE_SI_REQ_T(V,E,A)  V = E
#define yEqF_SINGLE_SI_REQ_T(Expr1,Expr2)  yEq_SINGLE_SI_REQ_T(Expr1,Expr2)
#define yNEqF_SINGLE_SI_REQ_T(Expr1,Expr2)  ( ! yEq_SINGLE_SI_REQ_T(Expr1,Expr2) )
#ifndef ANY_SINGLE_SI_REQ_T
#define ANY_SINGLE_SI_REQ_T yMake_SINGLE_SI_REQ_T(ANY_ARFCN_T, ANY_MS_BAND_E, \
  ANY_SYSINFO_READ_MODE_E, ANY_SYSINFO_IND_E, ANY_SDL_Octet)
#endif
#define z0OX3_copy(P)  P

extern void yAss_SINGLE_BCCH_DECODE_LIST_ARR_T
  XPP((SINGLE_BCCH_DECODE_LIST_ARR_T, SINGLE_BCCH_DECODE_LIST_ARR_T, int));
#define yAssF_SINGLE_BCCH_DECODE_LIST_ARR_T(V,E,A)  yAss_SINGLE_BCCH_DECODE_LIST_ARR_T(V,E,A)
#define yEqF_SINGLE_BCCH_DECODE_LIST_ARR_T(Expr1,Expr2)  yEq_SINGLE_BCCH_DECODE_LIST_ARR_T(Expr1,Expr2)
#define yNEqF_SINGLE_BCCH_DECODE_LIST_ARR_T(Expr1,Expr2)  ( ! yEq_SINGLE_BCCH_DECODE_LIST_ARR_T(Expr1,Expr2) )
#define yTstI_SINGLE_BCCH_DECODE_LIST_ARR_T(yExpr)  yExpr
#ifndef ANY_SINGLE_BCCH_DECODE_LIST_ARR_T
#define ANY_SINGLE_BCCH_DECODE_LIST_ARR_T
#endif
#define z0OY5_copy(P)  P

extern void yAss_MULTIPLE_SINGLE_BCCH_DECODE_T
  XPP((MULTIPLE_SINGLE_BCCH_DECODE_T *, MULTIPLE_SINGLE_BCCH_DECODE_T, int));
#define yAssF_MULTIPLE_SINGLE_BCCH_DECODE_T(V,E,A)  yAss_MULTIPLE_SINGLE_BCCH_DECODE_T(&(V),E,A)
#define yEqF_MULTIPLE_SINGLE_BCCH_DECODE_T(Expr1,Expr2)  yEq_MULTIPLE_SINGLE_BCCH_DECODE_T(Expr1,Expr2)
#define yNEqF_MULTIPLE_SINGLE_BCCH_DECODE_T(Expr1,Expr2)  ( ! yEq_MULTIPLE_SINGLE_BCCH_DECODE_T(Expr1,Expr2) )
#ifndef ANY_MULTIPLE_SINGLE_BCCH_DECODE_T
#define ANY_MULTIPLE_SINGLE_BCCH_DECODE_T yMake_MULTIPLE_SINGLE_BCCH_DECODE_T(ANY_z_ctypes_6_ShortInt, \
  ANY_SINGLE_BCCH_DECODE_LIST_ARR_T)
#endif
#define z0OZ3_copy(P)  P

#define yAssF_BCCH_TC_MASK_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_BCCH_TC_MASK_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_BCCH_TC_MASK_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_BCCH_TC_MASK_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_BCCH_TC_MASK_T
#define ANY_BCCH_TC_MASK_T ANY_SDL_Integer
#endif

#define yAssF_BCCH_DECODE_T(V,E,A)  V = E
#define yEqF_BCCH_DECODE_T(Expr1,Expr2)  yEq_BCCH_DECODE_T(Expr1,Expr2)
#define yNEqF_BCCH_DECODE_T(Expr1,Expr2)  ( ! yEq_BCCH_DECODE_T(Expr1,Expr2) )
#ifndef ANY_BCCH_DECODE_T
#define ANY_BCCH_DECODE_T yMake_BCCH_DECODE_T(ANY_ARFCN_T, ANY_BCCH_TC_MASK_T, \
  ANY_MS_BAND_E, ANY_SDL_Boolean, ANY_z_ctypes_6_ShortInt, ANY_SDL_Boolean)
#endif
#define z0P03_copy(P)  P

extern void yAss_BCCH_DECODE_LIST_T XPP((BCCH_DECODE_LIST_T,
  BCCH_DECODE_LIST_T, int));
#define yAssF_BCCH_DECODE_LIST_T(V,E,A)  yAss_BCCH_DECODE_LIST_T(V,E,A)
#define yEqF_BCCH_DECODE_LIST_T(Expr1,Expr2)  yEq_BCCH_DECODE_LIST_T(Expr1,Expr2)
#define yNEqF_BCCH_DECODE_LIST_T(Expr1,Expr2)  ( ! yEq_BCCH_DECODE_LIST_T(Expr1,Expr2) )
#define yTstI_BCCH_DECODE_LIST_T(yExpr)  yExpr
#ifndef ANY_BCCH_DECODE_LIST_T
#define ANY_BCCH_DECODE_LIST_T
#endif
#define z0P15_copy(P)  P

#define yAssF_BSIC_DECODE_T(V,E,A)  V = E
#define yEqF_BSIC_DECODE_T(Expr1,Expr2)  yEq_BSIC_DECODE_T(Expr1,Expr2)
#define yNEqF_BSIC_DECODE_T(Expr1,Expr2)  ( ! yEq_BSIC_DECODE_T(Expr1,Expr2) )
#ifndef ANY_BSIC_DECODE_T
#define ANY_BSIC_DECODE_T yMake_BSIC_DECODE_T(ANY_ARFCN_T, ANY_MS_BAND_E, \
  ANY_z_ctypes_6_ShortInt)
#endif
#define z0P23_copy(P)  P

extern void yAss_BSIC_DECODE_LIST_T XPP((BSIC_DECODE_LIST_T,
  BSIC_DECODE_LIST_T, int));
#define yAssF_BSIC_DECODE_LIST_T(V,E,A)  yAss_BSIC_DECODE_LIST_T(V,E,A)
#define yEqF_BSIC_DECODE_LIST_T(Expr1,Expr2)  yEq_BSIC_DECODE_LIST_T(Expr1,Expr2)
#define yNEqF_BSIC_DECODE_LIST_T(Expr1,Expr2)  ( ! yEq_BSIC_DECODE_LIST_T(Expr1,Expr2) )
#define yTstI_BSIC_DECODE_LIST_T(yExpr)  yExpr
#ifndef ANY_BSIC_DECODE_LIST_T
#define ANY_BSIC_DECODE_LIST_T
#endif
#define z0P35_copy(P)  P

#define yAssF_RF_SCAN_MEAS_T(V,E,A)  V = E
#define yEqF_RF_SCAN_MEAS_T(Expr1,Expr2)  yEq_RF_SCAN_MEAS_T(Expr1,Expr2)
#define yNEqF_RF_SCAN_MEAS_T(Expr1,Expr2)  ( ! yEq_RF_SCAN_MEAS_T(Expr1,Expr2) )
#ifndef ANY_RF_SCAN_MEAS_T
#define ANY_RF_SCAN_MEAS_T yMake_RF_SCAN_MEAS_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_SDL_Octet)
#endif
#define z0P43_copy(P)  P

extern void yAss_RF_SCAN_MEAS_LIST_T XPP((RF_SCAN_MEAS_LIST_T,
  RF_SCAN_MEAS_LIST_T, int));
#define yAssF_RF_SCAN_MEAS_LIST_T(V,E,A)  yAss_RF_SCAN_MEAS_LIST_T(V,E,A)
#define yEqF_RF_SCAN_MEAS_LIST_T(Expr1,Expr2)  yEq_RF_SCAN_MEAS_LIST_T(Expr1,Expr2)
#define yNEqF_RF_SCAN_MEAS_LIST_T(Expr1,Expr2)  ( ! yEq_RF_SCAN_MEAS_LIST_T(Expr1,Expr2) )
#define yTstI_RF_SCAN_MEAS_LIST_T(yExpr)  yExpr
#ifndef ANY_RF_SCAN_MEAS_LIST_T
#define ANY_RF_SCAN_MEAS_LIST_T
#endif
#define z0P55_copy(P)  P

#define yAssF_CELL_PARAM_ID_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_CELL_PARAM_ID_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_CELL_PARAM_ID_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_CELL_PARAM_ID_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_CELL_PARAM_ID_T
#define ANY_CELL_PARAM_ID_T ANY_SDL_Octet
#endif

#define yAssF_RR_CELL_INFO_T(V,E,A)  V = E
#define yEqF_RR_CELL_INFO_T(Expr1,Expr2)  yEq_RR_CELL_INFO_T(Expr1,Expr2)
#define yNEqF_RR_CELL_INFO_T(Expr1,Expr2)  ( ! yEq_RR_CELL_INFO_T(Expr1,Expr2) )
#ifndef ANY_RR_CELL_INFO_T
#define ANY_RR_CELL_INFO_T yMake_RR_CELL_INFO_T(ANY_SDL_Octet, ANY_ARFCN_T, \
  ANY_BSIC_T, ANY_SDL_Octet, ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt, \
  ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt)
#endif
#define z0P63_copy(P)  P

#define yAssF_RR_CELL_INFO_TRAFFIC_T(V,E,A)  V = E
#define yEqF_RR_CELL_INFO_TRAFFIC_T(Expr1,Expr2)  yEq_RR_CELL_INFO_TRAFFIC_T(Expr1,Expr2)
#define yNEqF_RR_CELL_INFO_TRAFFIC_T(Expr1,Expr2)  ( ! yEq_RR_CELL_INFO_TRAFFIC_T(Expr1,Expr2) )
#ifndef ANY_RR_CELL_INFO_TRAFFIC_T
#define ANY_RR_CELL_INFO_TRAFFIC_T yMake_RR_CELL_INFO_TRAFFIC_T(ANY_SDL_Octet, \
  ANY_ARFCN_T, ANY_BSIC_T, ANY_SDL_Octet, ANY_z_ctypes_6_ShortInt, \
  ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt)
#endif
#define z0P73_copy(P)  P

extern void yAss_RR_NCELLS_INFO_T XPP((RR_NCELLS_INFO_T, RR_NCELLS_INFO_T,
  int));
#define yAssF_RR_NCELLS_INFO_T(V,E,A)  yAss_RR_NCELLS_INFO_T(V,E,A)
#define yEqF_RR_NCELLS_INFO_T(Expr1,Expr2)  yEq_RR_NCELLS_INFO_T(Expr1,Expr2)
#define yNEqF_RR_NCELLS_INFO_T(Expr1,Expr2)  ( ! yEq_RR_NCELLS_INFO_T(Expr1,Expr2) )
#define yTstI_RR_NCELLS_INFO_T(yExpr)  yExpr
#ifndef ANY_RR_NCELLS_INFO_T
#define ANY_RR_NCELLS_INFO_T
#endif
#define z0P85_copy(P)  P

extern void yAss_RR_CELLS_INFO_T XPP((RR_CELLS_INFO_T *, RR_CELLS_INFO_T, int));
#define yAssF_RR_CELLS_INFO_T(V,E,A)  yAss_RR_CELLS_INFO_T(&(V),E,A)
#define yEqF_RR_CELLS_INFO_T(Expr1,Expr2)  yEq_RR_CELLS_INFO_T(Expr1,Expr2)
#define yNEqF_RR_CELLS_INFO_T(Expr1,Expr2)  ( ! yEq_RR_CELLS_INFO_T(Expr1,Expr2) )
#ifndef ANY_RR_CELLS_INFO_T
#define ANY_RR_CELLS_INFO_T yMake_RR_CELLS_INFO_T(ANY_SDL_Octet, \
  ANY_RR_CELL_INFO_T, ANY_RR_NCELLS_INFO_T)
#endif
#define z0P93_copy(P)  P

#define yAssF_RR_CELL_INFO_EX_T(V,E,A)  V = E
#define yEqF_RR_CELL_INFO_EX_T(Expr1,Expr2)  yEq_RR_CELL_INFO_EX_T(Expr1,Expr2)
#define yNEqF_RR_CELL_INFO_EX_T(Expr1,Expr2)  ( ! yEq_RR_CELL_INFO_EX_T(Expr1,Expr2) )
#ifndef ANY_RR_CELL_INFO_EX_T
#define ANY_RR_CELL_INFO_EX_T yMake_RR_CELL_INFO_EX_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0PA3_copy(P)  P

extern void yAss_RR_NCELLS_INFO_EX_T XPP((RR_NCELLS_INFO_EX_T,
  RR_NCELLS_INFO_EX_T, int));
#define yAssF_RR_NCELLS_INFO_EX_T(V,E,A)  yAss_RR_NCELLS_INFO_EX_T(V,E,A)
#define yEqF_RR_NCELLS_INFO_EX_T(Expr1,Expr2)  yEq_RR_NCELLS_INFO_EX_T(Expr1,Expr2)
#define yNEqF_RR_NCELLS_INFO_EX_T(Expr1,Expr2)  ( ! yEq_RR_NCELLS_INFO_EX_T(Expr1,Expr2) )
#define yTstI_RR_NCELLS_INFO_EX_T(yExpr)  yExpr
#ifndef ANY_RR_NCELLS_INFO_EX_T
#define ANY_RR_NCELLS_INFO_EX_T
#endif
#define z0PB5_copy(P)  P

extern void yAss_RR_CELLS_INFO_EX_T XPP((RR_CELLS_INFO_EX_T *,
  RR_CELLS_INFO_EX_T, int));
#define yAssF_RR_CELLS_INFO_EX_T(V,E,A)  yAss_RR_CELLS_INFO_EX_T(&(V),E,A)
#define yEqF_RR_CELLS_INFO_EX_T(Expr1,Expr2)  yEq_RR_CELLS_INFO_EX_T(Expr1,Expr2)
#define yNEqF_RR_CELLS_INFO_EX_T(Expr1,Expr2)  ( ! yEq_RR_CELLS_INFO_EX_T(Expr1,Expr2) )
#ifndef ANY_RR_CELLS_INFO_EX_T
#define ANY_RR_CELLS_INFO_EX_T yMake_RR_CELLS_INFO_EX_T(ANY_RR_CELL_INFO_EX_T, \
  ANY_RR_NCELLS_INFO_EX_T)
#endif
#define z0PC3_copy(P)  P

extern void yAss_RR_CELLS_INFO_TRAFFIC_T XPP((RR_CELLS_INFO_TRAFFIC_T *,
  RR_CELLS_INFO_TRAFFIC_T, int));
#define yAssF_RR_CELLS_INFO_TRAFFIC_T(V,E,A)  yAss_RR_CELLS_INFO_TRAFFIC_T(&(V),E,A)
#define yEqF_RR_CELLS_INFO_TRAFFIC_T(Expr1,Expr2)  yEq_RR_CELLS_INFO_TRAFFIC_T(Expr1,Expr2)
#define yNEqF_RR_CELLS_INFO_TRAFFIC_T(Expr1,Expr2)  ( ! yEq_RR_CELLS_INFO_TRAFFIC_T(Expr1,Expr2) )
#ifndef ANY_RR_CELLS_INFO_TRAFFIC_T
#define ANY_RR_CELLS_INFO_TRAFFIC_T yMake_RR_CELLS_INFO_TRAFFIC_T(ANY_SDL_Octet, \
  ANY_RR_CELL_INFO_TRAFFIC_T, ANY_RR_NCELLS_INFO_T)
#endif
#define z0PD3_copy(P)  P

#define yAssF_CARD_MASK_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_CARD_MASK_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_CARD_MASK_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_CARD_MASK_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_CARD_MASK_T
#define ANY_CARD_MASK_T ANY_SDL_Integer
#endif

#define yAssF_IS_MEAS_VALID_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_MEAS_VALID_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_MEAS_VALID_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_MEAS_VALID_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_MEAS_VALID_T
#define ANY_IS_MEAS_VALID_T ANY_SDL_Boolean
#endif

#define yAssF_RELEASE_MODE_E(V,E,A)  V = E
#define yDef_RELEASE_MODE_E(yVar)  *(yVar) = RELEASE_NORMAL
#define yEqF_RELEASE_MODE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_RELEASE_MODE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_RELEASE_MODE_E
#define ANY_RELEASE_MODE_E (RELEASE_MODE_E)(0 + \
  GETINTRAND%((int)(RELEASE_LOCAL_END)+1))
#endif
#define z0PE5_copy(P)  P

#define yAssF_ESTABLISH_MODE_E(V,E,A)  V = E
#define yDef_ESTABLISH_MODE_E(yVar)  *(yVar) = ESTABLISH_NORMAL
#define yEqF_ESTABLISH_MODE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_ESTABLISH_MODE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_ESTABLISH_MODE_E
#define ANY_ESTABLISH_MODE_E (ESTABLISH_MODE_E)(0 + \
  GETINTRAND%((int)(ESTABLISH_CONTENSION_RESOLUTION)+1))
#endif
#define z0PF5_copy(P)  P

#define yAssF_OUT_STANDING_ACKS_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_OUT_STANDING_ACKS_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_OUT_STANDING_ACKS_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_OUT_STANDING_ACKS_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_OUT_STANDING_ACKS_T
#define ANY_OUT_STANDING_ACKS_T ANY_SDL_Boolean
#endif

#define yAssF_DO_CONFIRM_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_DO_CONFIRM_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_DO_CONFIRM_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_DO_CONFIRM_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_DO_CONFIRM_T
#define ANY_DO_CONFIRM_T ANY_SDL_Boolean
#endif

#define yAssF_UNSERVED_DATA_REQS_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_UNSERVED_DATA_REQS_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_UNSERVED_DATA_REQS_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_UNSERVED_DATA_REQS_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_UNSERVED_DATA_REQS_T
#define ANY_UNSERVED_DATA_REQS_T ANY_SDL_Boolean
#endif

#define yAssF_DL_ERR_IND_E(V,E,A)  V = E
#define yDef_DL_ERR_IND_E(yVar)  *(yVar) = z0PG0_DL_ERR_T200_EXPIRED
#define yEqF_DL_ERR_IND_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_DL_ERR_IND_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_DL_ERR_IND_E
#define ANY_DL_ERR_IND_E (DL_ERR_IND_E)(0 + \
  GETINTRAND%((int)(z0PGD_DL_ERR_FRAME_NOT_IMPLEMENTED)+1))
#endif
#define z0PGH_copy(P)  P

#define yAssF_RR_DM_STATE_E(V,E,A)  V = E
#define yDef_RR_DM_STATE_E(yVar)  *(yVar) = DM_INVALID
#define yEqF_RR_DM_STATE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_RR_DM_STATE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_RR_DM_STATE_E
#define ANY_RR_DM_STATE_E (RR_DM_STATE_E)(0 + \
  GETINTRAND%((int)(DM_PS_HO_CCOTU_REVERT_WAIT_CAMP_CNF)+1))
#endif
#define z0PHV_copy(P)  P

extern void yAss_BA_LIST_ARR_T XPP((BA_LIST_ARR_T, BA_LIST_ARR_T, int));
#define yAssF_BA_LIST_ARR_T(V,E,A)  yAss_BA_LIST_ARR_T(V,E,A)
#define yEqF_BA_LIST_ARR_T(Expr1,Expr2)  yEq_BA_LIST_ARR_T(Expr1,Expr2)
#define yNEqF_BA_LIST_ARR_T(Expr1,Expr2)  ( ! yEq_BA_LIST_ARR_T(Expr1,Expr2) )
#define yTstI_BA_LIST_ARR_T(yExpr)  yExpr
#ifndef ANY_BA_LIST_ARR_T
#define ANY_BA_LIST_ARR_T
#endif
#define z0PI5_copy(P)  P

extern void yAss_SEL_PARAM_T XPP((SEL_PARAM_T *, SEL_PARAM_T, int));
#define yAssF_SEL_PARAM_T(V,E,A)  yAss_SEL_PARAM_T(&(V),E,A)
#define yEqF_SEL_PARAM_T(Expr1,Expr2)  yEq_SEL_PARAM_T(Expr1,Expr2)
#define yNEqF_SEL_PARAM_T(Expr1,Expr2)  ( ! yEq_SEL_PARAM_T(Expr1,Expr2) )
#ifndef ANY_SEL_PARAM_T
#define ANY_SEL_PARAM_T yMake_SEL_PARAM_T(ANY_PLMN_T, ANY_SDL_Boolean, \
  ANY_BA_LIST_ARR_T, ANY_BA_LIST_ARR_T, ANY_SDL_Boolean, ANY_MS_BAND_E, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_BAND_FILTER_T, \
  ANY_SDL_Octet)
#endif
#define z0PJ03_copy(P)  P

extern void yAss_BCCH_INFO_T XPP((BCCH_INFO_T *, BCCH_INFO_T, int));
#define yAssF_BCCH_INFO_T(V,E,A)  yAss_BCCH_INFO_T(&(V),E,A)
#define yEqF_BCCH_INFO_T(Expr1,Expr2)  yEq_BCCH_INFO_T(Expr1,Expr2)
#define yNEqF_BCCH_INFO_T(Expr1,Expr2)  ( ! yEq_BCCH_INFO_T(Expr1,Expr2) )
#ifndef ANY_BCCH_INFO_T
#define ANY_BCCH_INFO_T yMake_BCCH_INFO_T(ANY_LAI_T, ANY_CELL_ID_T, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_REEST_ALLOWED_OR_NOT_E, \
  ANY_BA_LIST_ARR_T, ANY_BA_IS_VALID_T, ANY_BA_LIST_ARR_T, ANY_BA_IS_VALID_T, \
  ANY_ARFCN_T, ANY_MS_BAND_E, ANY_SDL_Boolean)
#endif
#define z0PK03_copy(P)  P

#define yAssF_GPRS_INFO_T(V,E,A)  V = E
#define yEqF_GPRS_INFO_T(Expr1,Expr2)  yEq_GPRS_INFO_T(Expr1,Expr2)
#define yNEqF_GPRS_INFO_T(Expr1,Expr2)  ( ! yEq_GPRS_INFO_T(Expr1,Expr2) )
#ifndef ANY_GPRS_INFO_T
#define ANY_GPRS_INFO_T yMake_GPRS_INFO_T(ANY_NETWORK_MODE_E, ANY_RAI_T, \
  ANY_IS_SGSN_R99_T)
#endif
#define z0PL3_copy(P)  P

#define yAssF_RR_ACT_TYPE_E(V,E,A)  V = E
#define yDef_RR_ACT_TYPE_E(yVar)  *(yVar) = RR_ACT_NORMAL
#define yEqF_RR_ACT_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_RR_ACT_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_RR_ACT_TYPE_E
#define ANY_RR_ACT_TYPE_E (RR_ACT_TYPE_E)(0 + \
  GETINTRAND%((int)(RR_ACT_NO_SERVICE)+1))
#endif
#define z0PM6_copy(P)  P

#define yAssF_GPRS_IND_E(V,E,A)  V = E
#define yDef_GPRS_IND_E(yVar)  *(yVar) = GPRS_NOT_SUPPORT
#define yEqF_GPRS_IND_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_GPRS_IND_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_GPRS_IND_E
#define ANY_GPRS_IND_E (GPRS_IND_E)(0 + \
  GETINTRAND%((int)(GPRS_SUPPORT_NOT_DECIDED)+1))
#endif
#define z0PN6_copy(P)  P

#define yAssF_RELEASE_CAUSE_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_RELEASE_CAUSE_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_RELEASE_CAUSE_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_RELEASE_CAUSE_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_RELEASE_CAUSE_T
#define ANY_RELEASE_CAUSE_T ANY_SDL_Integer
#endif

#define yAssF_ACCESS_REJ_TIME_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_ACCESS_REJ_TIME_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_ACCESS_REJ_TIME_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_ACCESS_REJ_TIME_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_ACCESS_REJ_TIME_T
#define ANY_ACCESS_REJ_TIME_T ANY_SDL_Octet
#endif

#define yAssF_MMRR_ABORT_CAUSE_E(V,E,A)  V = E
#define yDef_MMRR_ABORT_CAUSE_E(yVar)  *(yVar) = WATCHDOG_TIMER_EXPIRY
#define yEqF_MMRR_ABORT_CAUSE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MMRR_ABORT_CAUSE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MMRR_ABORT_CAUSE_E
#define ANY_MMRR_ABORT_CAUSE_E (MMRR_ABORT_CAUSE_E)(0 + \
  GETINTRAND%((int)(RR_NO_CELL)+1))
#endif
#define z0POD_copy(P)  P

#define yAssF_MMRR_ABORT_REQ_TYPE_E(V,E,A)  V = E
#define yDef_MMRR_ABORT_REQ_TYPE_E(yVar)  *(yVar) = ABORT_RR_CONNECTION
#define yEqF_MMRR_ABORT_REQ_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MMRR_ABORT_REQ_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MMRR_ABORT_REQ_TYPE_E
#define ANY_MMRR_ABORT_REQ_TYPE_E (MMRR_ABORT_REQ_TYPE_E)(0 + \
  GETINTRAND%((int)(ABORT_PLMN_LIST)+1))
#endif
#define z0PP5_copy(P)  P

#define yAssF_HOLD_AUXILIARY_STATE_E(V,E,A)  V = E
#define yDef_HOLD_AUXILIARY_STATE_E(yVar)  *(yVar) = HOLD_IDLE
#define yEqF_HOLD_AUXILIARY_STATE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_HOLD_AUXILIARY_STATE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_HOLD_AUXILIARY_STATE_E
#define ANY_HOLD_AUXILIARY_STATE_E (HOLD_AUXILIARY_STATE_E)(0 + \
  GETINTRAND%((int)(RETRIEVE_REQUEST)+1))
#endif
#define z0PQ7_copy(P)  P

#define yAssF_MPTY_AUXILIARY_STATE_E(V,E,A)  V = E
#define yDef_MPTY_AUXILIARY_STATE_E(yVar)  *(yVar) = MPTY_IDLE
#define yEqF_MPTY_AUXILIARY_STATE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MPTY_AUXILIARY_STATE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MPTY_AUXILIARY_STATE_E
#define ANY_MPTY_AUXILIARY_STATE_E (MPTY_AUXILIARY_STATE_E)(0 + \
  GETINTRAND%((int)(SPLIT_REQUEST)+1))
#endif
#define z0PR7_copy(P)  P

#define yAssF_NUMBER_TYPE_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_NUMBER_TYPE_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_NUMBER_TYPE_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_NUMBER_TYPE_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_NUMBER_TYPE_E
#define ANY_NUMBER_TYPE_E ANY_SDL_Integer
#endif

#define yAssF_NUMBER_PLAN_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_NUMBER_PLAN_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_NUMBER_PLAN_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_NUMBER_PLAN_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_NUMBER_PLAN_E
#define ANY_NUMBER_PLAN_E ANY_SDL_Integer
#endif

#define yAssF_SUBADDRESS_TYPE_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_SUBADDRESS_TYPE_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_SUBADDRESS_TYPE_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_SUBADDRESS_TYPE_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_SUBADDRESS_TYPE_E
#define ANY_SUBADDRESS_TYPE_E ANY_SDL_Integer
#endif

#define yAssF_LENGTH_TYPE_E(V,E,A)  V = E
#define yDef_LENGTH_TYPE_E(yVar)  *(yVar) = LENGTH_EVEN
#define yEqF_LENGTH_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_LENGTH_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_LENGTH_TYPE_E
#define ANY_LENGTH_TYPE_E (LENGTH_TYPE_E)(0 + GETINTRAND%((int)(LENGTH_ODD)+1))
#endif
#define z0PS5_copy(P)  P

#define yAssF_CLIR_E(V,E,A)  V = E
#define yDef_CLIR_E(yVar)  *(yVar) = CLIR_SUPPRESSION
#define yEqF_CLIR_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CLIR_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CLIR_E
#define ANY_CLIR_E (CLIR_E)(0 + GETINTRAND%((int)(CLIR_NETWORK_DECIDE)+1))
#endif
#define z0PT6_copy(P)  P

#define yAssF_USER_USER_PD_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_USER_USER_PD_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_USER_USER_PD_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_USER_USER_PD_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_USER_USER_PD_E
#define ANY_USER_USER_PD_E ANY_SDL_Integer
#endif

#define yAssF_CODE_STD_E(V,E,A)  V = E
#define yDef_CODE_STD_E(yVar)  *(yVar) = CODE_ITU_STD
#define yEqF_CODE_STD_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CODE_STD_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CODE_STD_E
#define ANY_CODE_STD_E (CODE_STD_E)(0 + GETINTRAND%((int)(CODE_GSM_STD)+1))
#endif
#define z0PU7_copy(P)  P

#define yAssF_CALL_STATE_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_CALL_STATE_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_CALL_STATE_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_CALL_STATE_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_CALL_STATE_E
#define ANY_CALL_STATE_E ANY_SDL_Integer
#endif

#define yAssF_LOCATION_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_LOCATION_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_LOCATION_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_LOCATION_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_LOCATION_E
#define ANY_LOCATION_E ANY_SDL_Integer
#endif

#define yAssF_PROG_DES_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_PROG_DES_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_PROG_DES_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_PROG_DES_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_PROG_DES_E
#define ANY_PROG_DES_E ANY_SDL_Integer
#endif

#define yAssF_SIGNAL_VALUE_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_SIGNAL_VALUE_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_SIGNAL_VALUE_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_SIGNAL_VALUE_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_SIGNAL_VALUE_E
#define ANY_SIGNAL_VALUE_E ANY_SDL_Integer
#endif

#define yAssF_PRESENT_IND_E(V,E,A)  V = E
#define yDef_PRESENT_IND_E(yVar)  *(yVar) = PRESENT_ALLOW
#define yEqF_PRESENT_IND_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_PRESENT_IND_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_PRESENT_IND_E
#define ANY_PRESENT_IND_E (PRESENT_IND_E)(0 + \
  GETINTRAND%((int)(PRESENT_NUM_NO_AVAILABLE)+1))
#endif
#define z0PV6_copy(P)  P

#define yAssF_SCREEN_IND_E(V,E,A)  V = E
#define yDef_SCREEN_IND_E(yVar)  *(yVar) = NOT_SCREEN
#define yEqF_SCREEN_IND_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SCREEN_IND_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SCREEN_IND_E
#define ANY_SCREEN_IND_E (SCREEN_IND_E)(0 + \
  GETINTRAND%((int)(SCREEN_NETWORK_PVD)+1))
#endif
#define z0PW7_copy(P)  P

#define yAssF_NOTIFY_E(V,E,A)  V = E
#define yDef_NOTIFY_E(yVar)  *(yVar) = NOTIFY_SUSPEND
#define yEqF_NOTIFY_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_NOTIFY_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_NOTIFY_E
#define ANY_NOTIFY_E (NOTIFY_E)(0 + GETINTRAND%((int)(NOTIFY_BEARER_CHANGE)+1))
#endif
#define z0PX6_copy(P)  P

#define yAssF_ALERT_PATTERN_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_ALERT_PATTERN_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_ALERT_PATTERN_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_ALERT_PATTERN_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_ALERT_PATTERN_E
#define ANY_ALERT_PATTERN_E ANY_SDL_Integer
#endif

#define yAssF_CONGESTION_LEVEL_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_CONGESTION_LEVEL_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_CONGESTION_LEVEL_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_CONGESTION_LEVEL_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_CONGESTION_LEVEL_E
#define ANY_CONGESTION_LEVEL_E ANY_SDL_Integer
#endif

#define yAssF_NO_CLIR_CAUSE_E(V,E,A)  V = E
#define yDef_NO_CLIR_CAUSE_E(yVar)  *(yVar) = CLIR_UNAVAILABLE
#define yEqF_NO_CLIR_CAUSE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_NO_CLIR_CAUSE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_NO_CLIR_CAUSE_E
#define ANY_NO_CLIR_CAUSE_E (NO_CLIR_CAUSE_E)(0 + \
  GETINTRAND%((int)(CLIR_PAYPHONE)+1))
#endif
#define z0PY7_copy(P)  P

extern void yAss_CALL_ADDR_ARR_T XPP((CALL_ADDR_ARR_T, CALL_ADDR_ARR_T, int));
#define yAssF_CALL_ADDR_ARR_T(V,E,A)  yAss_CALL_ADDR_ARR_T(V,E,A)
#define yEqF_CALL_ADDR_ARR_T(Expr1,Expr2)  yEq_CALL_ADDR_ARR_T(Expr1,Expr2)
#define yNEqF_CALL_ADDR_ARR_T(Expr1,Expr2)  ( ! yEq_CALL_ADDR_ARR_T(Expr1,Expr2) )
#define yTstI_CALL_ADDR_ARR_T(yExpr)  yExpr
#ifndef ANY_CALL_ADDR_ARR_T
#define ANY_CALL_ADDR_ARR_T
#endif
#define z0PZ5_copy(P)  P

extern void yAss_CALL_SUB_ADDR_ARR_T XPP((CALL_SUB_ADDR_ARR_T,
  CALL_SUB_ADDR_ARR_T, int));
#define yAssF_CALL_SUB_ADDR_ARR_T(V,E,A)  yAss_CALL_SUB_ADDR_ARR_T(V,E,A)
#define yEqF_CALL_SUB_ADDR_ARR_T(Expr1,Expr2)  yEq_CALL_SUB_ADDR_ARR_T(Expr1,Expr2)
#define yNEqF_CALL_SUB_ADDR_ARR_T(Expr1,Expr2)  ( ! yEq_CALL_SUB_ADDR_ARR_T(Expr1,Expr2) )
#define yTstI_CALL_SUB_ADDR_ARR_T(yExpr)  yExpr
#ifndef ANY_CALL_SUB_ADDR_ARR_T
#define ANY_CALL_SUB_ADDR_ARR_T
#endif
#define z0Q05_copy(P)  P

#define yAssF_AUX_STATE_T(V,E,A)  V = E
#define yEqF_AUX_STATE_T(Expr1,Expr2)  yEq_AUX_STATE_T(Expr1,Expr2)
#define yNEqF_AUX_STATE_T(Expr1,Expr2)  ( ! yEq_AUX_STATE_T(Expr1,Expr2) )
#ifndef ANY_AUX_STATE_T
#define ANY_AUX_STATE_T yMake_AUX_STATE_T(ANY_HOLD_AUXILIARY_STATE_E, \
  ANY_MPTY_AUXILIARY_STATE_E)
#endif
#define z0Q13_copy(P)  P

extern void yAss_CALLED_NUMBER_T XPP((CALLED_NUMBER_T *, CALLED_NUMBER_T, int));
#define yAssF_CALLED_NUMBER_T(V,E,A)  yAss_CALLED_NUMBER_T(&(V),E,A)
#define yEqF_CALLED_NUMBER_T(Expr1,Expr2)  yEq_CALLED_NUMBER_T(Expr1,Expr2)
#define yNEqF_CALLED_NUMBER_T(Expr1,Expr2)  ( ! yEq_CALLED_NUMBER_T(Expr1,Expr2) )
#ifndef ANY_CALLED_NUMBER_T
#define ANY_CALLED_NUMBER_T yMake_CALLED_NUMBER_T(ANY_NUMBER_TYPE_E, \
  ANY_NUMBER_PLAN_E, ANY_z_ctypes_8_UnsignedShortInt, ANY_CALL_ADDR_ARR_T)
#endif
#define z0Q23_copy(P)  P

extern void yAss_CALLING_NUMBER_T XPP((CALLING_NUMBER_T *, CALLING_NUMBER_T,
  int));
#define yAssF_CALLING_NUMBER_T(V,E,A)  yAss_CALLING_NUMBER_T(&(V),E,A)
#define yEqF_CALLING_NUMBER_T(Expr1,Expr2)  yEq_CALLING_NUMBER_T(Expr1,Expr2)
#define yNEqF_CALLING_NUMBER_T(Expr1,Expr2)  ( ! yEq_CALLING_NUMBER_T(Expr1,Expr2) )
#ifndef ANY_CALLING_NUMBER_T
#define ANY_CALLING_NUMBER_T yMake_CALLING_NUMBER_T(ANY_NUMBER_TYPE_E, \
  ANY_NUMBER_PLAN_E, ANY_PRESENT_IND_E, ANY_SCREEN_IND_E, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_CALL_ADDR_ARR_T)
#endif
#define z0Q33_copy(P)  P

extern void yAss_CC_CAPABILITY_BUF_T XPP((CC_CAPABILITY_BUF_T,
  CC_CAPABILITY_BUF_T, int));
#define yAssF_CC_CAPABILITY_BUF_T(V,E,A)  yAss_CC_CAPABILITY_BUF_T(V,E,A)
#define yEqF_CC_CAPABILITY_BUF_T(Expr1,Expr2)  yEq_CC_CAPABILITY_BUF_T(Expr1,Expr2)
#define yNEqF_CC_CAPABILITY_BUF_T(Expr1,Expr2)  ( ! yEq_CC_CAPABILITY_BUF_T(Expr1,Expr2) )
#define yTstI_CC_CAPABILITY_BUF_T(yExpr)  yExpr
#ifndef ANY_CC_CAPABILITY_BUF_T
#define ANY_CC_CAPABILITY_BUF_T
#endif
#define z0Q45_copy(P)  P

extern void yAss_CC_CAPABILITY_T XPP((CC_CAPABILITY_T *, CC_CAPABILITY_T, int));
#define yAssF_CC_CAPABILITY_T(V,E,A)  yAss_CC_CAPABILITY_T(&(V),E,A)
#define yEqF_CC_CAPABILITY_T(Expr1,Expr2)  yEq_CC_CAPABILITY_T(Expr1,Expr2)
#define yNEqF_CC_CAPABILITY_T(Expr1,Expr2)  ( ! yEq_CC_CAPABILITY_T(Expr1,Expr2) )
#ifndef ANY_CC_CAPABILITY_T
#define ANY_CC_CAPABILITY_T yMake_CC_CAPABILITY_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_CC_CAPABILITY_BUF_T)
#endif
#define z0Q53_copy(P)  P

extern void yAss_BEARER_CAPABILITY_BUF_T XPP((BEARER_CAPABILITY_BUF_T,
  BEARER_CAPABILITY_BUF_T, int));
#define yAssF_BEARER_CAPABILITY_BUF_T(V,E,A)  yAss_BEARER_CAPABILITY_BUF_T(V,E,A)
#define yEqF_BEARER_CAPABILITY_BUF_T(Expr1,Expr2)  yEq_BEARER_CAPABILITY_BUF_T(Expr1,Expr2)
#define yNEqF_BEARER_CAPABILITY_BUF_T(Expr1,Expr2)  ( ! yEq_BEARER_CAPABILITY_BUF_T(Expr1,Expr2) )
#define yTstI_BEARER_CAPABILITY_BUF_T(yExpr)  yExpr
#ifndef ANY_BEARER_CAPABILITY_BUF_T
#define ANY_BEARER_CAPABILITY_BUF_T
#endif
#define z0Q65_copy(P)  P

extern void yAss_BEARER_CAPABILITY_T XPP((BEARER_CAPABILITY_T *,
  BEARER_CAPABILITY_T, int));
#define yAssF_BEARER_CAPABILITY_T(V,E,A)  yAss_BEARER_CAPABILITY_T(&(V),E,A)
#define yEqF_BEARER_CAPABILITY_T(Expr1,Expr2)  yEq_BEARER_CAPABILITY_T(Expr1,Expr2)
#define yNEqF_BEARER_CAPABILITY_T(Expr1,Expr2)  ( ! yEq_BEARER_CAPABILITY_T(Expr1,Expr2) )
#ifndef ANY_BEARER_CAPABILITY_T
#define ANY_BEARER_CAPABILITY_T yMake_BEARER_CAPABILITY_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_BEARER_CAPABILITY_BUF_T)
#endif
#define z0Q73_copy(P)  P

#define yAssF_BEARER_CAPABILITY_TYPE_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_BEARER_CAPABILITY_TYPE_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_BEARER_CAPABILITY_TYPE_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_BEARER_CAPABILITY_TYPE_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_BEARER_CAPABILITY_TYPE_E
#define ANY_BEARER_CAPABILITY_TYPE_E ANY_SDL_Integer
#endif

#define yAssF_BEARER_CAPABILITY_PTR_T(V,E,A)  V = E
#define yEqF_BEARER_CAPABILITY_PTR_T(Expr1,Expr2)  yEq_BEARER_CAPABILITY_PTR_T(Expr1,Expr2)
#define yNEqF_BEARER_CAPABILITY_PTR_T(Expr1,Expr2)  ( ! yEq_BEARER_CAPABILITY_PTR_T(Expr1,Expr2) )
#ifndef ANY_BEARER_CAPABILITY_PTR_T
#define ANY_BEARER_CAPABILITY_PTR_T yMake_BEARER_CAPABILITY_PTR_T(ANY_BEARER_CAPABILITY_TYPE_E, \
  ANY_BLOCK_PTR_T)
#endif
#define z0Q83_copy(P)  P

#define yAssF_RE_INDICATION_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_RE_INDICATION_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_RE_INDICATION_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_RE_INDICATION_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_RE_INDICATION_E
#define ANY_RE_INDICATION_E ANY_SDL_Integer
#endif

#define yAssF_FACILITY_T(V,E,A)  yAssF_L3_MSG_UNIT_T(V,E,A)
#define yDef_FACILITY_T(yVar)  yDef_L3_MSG_UNIT_T((L3_MSG_UNIT_T *)yVar)
#define yEqF_FACILITY_T(Expr1,Expr2)  yEqF_L3_MSG_UNIT_T(Expr1,Expr2)
#define yNEqF_FACILITY_T(Expr1,Expr2)  yNEqF_L3_MSG_UNIT_T(Expr1,Expr2)
#ifndef ANY_FACILITY_T
#define ANY_FACILITY_T ANY_L3_MSG_UNIT_T
#endif

#define yAssF_RE_INDICATION_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_RE_INDICATION_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_RE_INDICATION_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_RE_INDICATION_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_RE_INDICATION_E
#define ANY_RE_INDICATION_E ANY_SDL_Integer
#endif

extern void yAss_SUBADDR_T XPP((SUBADDR_T *, SUBADDR_T, int));
#define yAssF_SUBADDR_T(V,E,A)  yAss_SUBADDR_T(&(V),E,A)
#define yEqF_SUBADDR_T(Expr1,Expr2)  yEq_SUBADDR_T(Expr1,Expr2)
#define yNEqF_SUBADDR_T(Expr1,Expr2)  ( ! yEq_SUBADDR_T(Expr1,Expr2) )
#ifndef ANY_SUBADDR_T
#define ANY_SUBADDR_T yMake_SUBADDR_T(ANY_SUBADDRESS_TYPE_E, ANY_LENGTH_TYPE_E, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_CALL_SUB_ADDR_ARR_T)
#endif
#define z0Q93_copy(P)  P

extern void yAss_LLC_MSG_ARR_T XPP((LLC_MSG_ARR_T, LLC_MSG_ARR_T, int));
#define yAssF_LLC_MSG_ARR_T(V,E,A)  yAss_LLC_MSG_ARR_T(V,E,A)
#define yEqF_LLC_MSG_ARR_T(Expr1,Expr2)  yEq_LLC_MSG_ARR_T(Expr1,Expr2)
#define yNEqF_LLC_MSG_ARR_T(Expr1,Expr2)  ( ! yEq_LLC_MSG_ARR_T(Expr1,Expr2) )
#define yTstI_LLC_MSG_ARR_T(yExpr)  yExpr
#ifndef ANY_LLC_MSG_ARR_T
#define ANY_LLC_MSG_ARR_T
#endif
#define z0QA5_copy(P)  P

extern void yAss_LLC_MSG_T XPP((LLC_MSG_T *, LLC_MSG_T, int));
#define yAssF_LLC_MSG_T(V,E,A)  yAss_LLC_MSG_T(&(V),E,A)
#define yEqF_LLC_MSG_T(Expr1,Expr2)  yEq_LLC_MSG_T(Expr1,Expr2)
#define yNEqF_LLC_MSG_T(Expr1,Expr2)  ( ! yEq_LLC_MSG_T(Expr1,Expr2) )
#ifndef ANY_LLC_MSG_T
#define ANY_LLC_MSG_T yMake_LLC_MSG_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_LLC_MSG_ARR_T)
#endif
#define z0QB3_copy(P)  P

extern void yAss_HLC_MSG_ARR_T XPP((HLC_MSG_ARR_T, HLC_MSG_ARR_T, int));
#define yAssF_HLC_MSG_ARR_T(V,E,A)  yAss_HLC_MSG_ARR_T(V,E,A)
#define yEqF_HLC_MSG_ARR_T(Expr1,Expr2)  yEq_HLC_MSG_ARR_T(Expr1,Expr2)
#define yNEqF_HLC_MSG_ARR_T(Expr1,Expr2)  ( ! yEq_HLC_MSG_ARR_T(Expr1,Expr2) )
#define yTstI_HLC_MSG_ARR_T(yExpr)  yExpr
#ifndef ANY_HLC_MSG_ARR_T
#define ANY_HLC_MSG_ARR_T
#endif
#define z0QC5_copy(P)  P

extern void yAss_HLC_MSG_T XPP((HLC_MSG_T *, HLC_MSG_T, int));
#define yAssF_HLC_MSG_T(V,E,A)  yAss_HLC_MSG_T(&(V),E,A)
#define yEqF_HLC_MSG_T(Expr1,Expr2)  yEq_HLC_MSG_T(Expr1,Expr2)
#define yNEqF_HLC_MSG_T(Expr1,Expr2)  ( ! yEq_HLC_MSG_T(Expr1,Expr2) )
#ifndef ANY_HLC_MSG_T
#define ANY_HLC_MSG_T yMake_HLC_MSG_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_HLC_MSG_ARR_T)
#endif
#define z0QD3_copy(P)  P

extern void yAss_SMALL_USER_ARR_T XPP((SMALL_USER_ARR_T, SMALL_USER_ARR_T,
  int));
#define yAssF_SMALL_USER_ARR_T(V,E,A)  yAss_SMALL_USER_ARR_T(V,E,A)
#define yEqF_SMALL_USER_ARR_T(Expr1,Expr2)  yEq_SMALL_USER_ARR_T(Expr1,Expr2)
#define yNEqF_SMALL_USER_ARR_T(Expr1,Expr2)  ( ! yEq_SMALL_USER_ARR_T(Expr1,Expr2) )
#define yTstI_SMALL_USER_ARR_T(yExpr)  yExpr
#ifndef ANY_SMALL_USER_ARR_T
#define ANY_SMALL_USER_ARR_T
#endif
#define z0QE5_copy(P)  P

extern void yAss_SMALL_USER_USER_T XPP((SMALL_USER_USER_T *, SMALL_USER_USER_T,
  int));
#define yAssF_SMALL_USER_USER_T(V,E,A)  yAss_SMALL_USER_USER_T(&(V),E,A)
#define yEqF_SMALL_USER_USER_T(Expr1,Expr2)  yEq_SMALL_USER_USER_T(Expr1,Expr2)
#define yNEqF_SMALL_USER_USER_T(Expr1,Expr2)  ( ! yEq_SMALL_USER_USER_T(Expr1,Expr2) )
#ifndef ANY_SMALL_USER_USER_T
#define ANY_SMALL_USER_USER_T yMake_SMALL_USER_USER_T(ANY_USER_USER_PD_E, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SMALL_USER_ARR_T)
#endif
#define z0QF3_copy(P)  P

extern void yAss_USER_ARR_T XPP((USER_ARR_T, USER_ARR_T, int));
#define yAssF_USER_ARR_T(V,E,A)  yAss_USER_ARR_T(V,E,A)
#define yEqF_USER_ARR_T(Expr1,Expr2)  yEq_USER_ARR_T(Expr1,Expr2)
#define yNEqF_USER_ARR_T(Expr1,Expr2)  ( ! yEq_USER_ARR_T(Expr1,Expr2) )
#define yTstI_USER_ARR_T(yExpr)  yExpr
#ifndef ANY_USER_ARR_T
#define ANY_USER_ARR_T
#endif
#define z0QG5_copy(P)  P

extern void yAss_USER_USER_T XPP((USER_USER_T *, USER_USER_T, int));
#define yAssF_USER_USER_T(V,E,A)  yAss_USER_USER_T(&(V),E,A)
#define yEqF_USER_USER_T(Expr1,Expr2)  yEq_USER_USER_T(Expr1,Expr2)
#define yNEqF_USER_USER_T(Expr1,Expr2)  ( ! yEq_USER_USER_T(Expr1,Expr2) )
#ifndef ANY_USER_USER_T
#define ANY_USER_USER_T yMake_USER_USER_T(ANY_USER_USER_PD_E, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_USER_ARR_T)
#endif
#define z0QH3_copy(P)  P

#define yAssF_PROGRESS_IND_T(V,E,A)  V = E
#define yEqF_PROGRESS_IND_T(Expr1,Expr2)  yEq_PROGRESS_IND_T(Expr1,Expr2)
#define yNEqF_PROGRESS_IND_T(Expr1,Expr2)  ( ! yEq_PROGRESS_IND_T(Expr1,Expr2) )
#ifndef ANY_PROGRESS_IND_T
#define ANY_PROGRESS_IND_T yMake_PROGRESS_IND_T(ANY_CODE_STD_E, ANY_LOCATION_E, \
  ANY_PROG_DES_E)
#endif
#define z0QI3_copy(P)  P

#define yAssF_SIGNAL_T(V,E,A)  V = E
#define yEqF_SIGNAL_T(Expr1,Expr2)  yEq_SIGNAL_T(Expr1,Expr2)
#define yNEqF_SIGNAL_T(Expr1,Expr2)  ( ! yEq_SIGNAL_T(Expr1,Expr2) )
#ifndef ANY_SIGNAL_T
#define ANY_SIGNAL_T yMake_SIGNAL_T(ANY_SIGNAL_VALUE_E)
#endif
#define z0QJ3_copy(P)  P

#define yAssF_CAUSE_T(V,E,A)  V = E
#define yEqF_CAUSE_T(Expr1,Expr2)  yEq_CAUSE_T(Expr1,Expr2)
#define yNEqF_CAUSE_T(Expr1,Expr2)  ( ! yEq_CAUSE_T(Expr1,Expr2) )
#ifndef ANY_CAUSE_T
#define ANY_CAUSE_T yMake_CAUSE_T(ANY_LOCATION_E, ANY_GSM_CAUSE_T)
#endif
#define z0QK3_copy(P)  P

extern void yAss_SETUP_IND_VALUE_T XPP((SETUP_IND_VALUE_T *, SETUP_IND_VALUE_T,
  int));
#define yAssF_SETUP_IND_VALUE_T(V,E,A)  yAss_SETUP_IND_VALUE_T(&(V),E,A)
#define yEqF_SETUP_IND_VALUE_T(Expr1,Expr2)  yEq_SETUP_IND_VALUE_T(Expr1,Expr2)
#define yNEqF_SETUP_IND_VALUE_T(Expr1,Expr2)  ( ! yEq_SETUP_IND_VALUE_T(Expr1,Expr2) )
#ifndef ANY_SETUP_IND_VALUE_T
#define ANY_SETUP_IND_VALUE_T yMake_SETUP_IND_VALUE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_RE_INDICATION_E, ANY_BEARER_CAPABILITY_T, ANY_BEARER_CAPABILITY_T, \
  ANY_SUBADDR_T, ANY_SUBADDR_T, ANY_CALLING_NUMBER_T, ANY_CALLED_NUMBER_T, \
  ANY_CALLING_NUMBER_T, ANY_SUBADDR_T, ANY_LLC_MSG_T, ANY_HLC_MSG_T, \
  ANY_LLC_MSG_T, ANY_HLC_MSG_T, ANY_SMALL_USER_USER_T, ANY_SDL_Octet, \
  ANY_CLIR_E, ANY_PROGRESS_IND_T, ANY_CALL_PRIOR_E, ANY_ALERT_PATTERN_E, \
  ANY_SIGNAL_T, ANY_NO_CLIR_CAUSE_E, ANY_BACKUP_BEARER_CAPABILITY_T)
#endif
#define z0QL03_copy(P)  P

extern void yAss_CCBS_SETUP_CONTAINER_VALUE_T
  XPP((CCBS_SETUP_CONTAINER_VALUE_T *, CCBS_SETUP_CONTAINER_VALUE_T, int));
#define yAssF_CCBS_SETUP_CONTAINER_VALUE_T(V,E,A)  yAss_CCBS_SETUP_CONTAINER_VALUE_T(&(V),E,A)
#define yEqF_CCBS_SETUP_CONTAINER_VALUE_T(Expr1,Expr2)  yEq_CCBS_SETUP_CONTAINER_VALUE_T(Expr1,Expr2)
#define yNEqF_CCBS_SETUP_CONTAINER_VALUE_T(Expr1,Expr2)  ( ! yEq_CCBS_SETUP_CONTAINER_VALUE_T(Expr1,Expr2) )
#ifndef ANY_CCBS_SETUP_CONTAINER_VALUE_T
#define ANY_CCBS_SETUP_CONTAINER_VALUE_T yMake_CCBS_SETUP_CONTAINER_VALUE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_RE_INDICATION_E, ANY_BEARER_CAPABILITY_T, ANY_BEARER_CAPABILITY_T, \
  ANY_BEARER_CAPABILITY_PTR_T, ANY_BEARER_CAPABILITY_PTR_T, ANY_L3_MSG_UNIT_T, \
  ANY_SUBADDR_T, ANY_CALLED_NUMBER_T, ANY_SUBADDR_T, ANY_LLC_MSG_T, \
  ANY_HLC_MSG_T, ANY_LLC_MSG_T, ANY_HLC_MSG_T, ANY_SMALL_USER_USER_T, \
  ANY_SDL_Octet, ANY_CLIR_E, ANY_CC_CAPABILITY_T, ANY_L3_MSG_UNIT_T, \
  ANY_SDL_Octet)
#endif
#define z0QM03_copy(P)  P

extern void yAss_SETUP_CNF_VALUE_T XPP((SETUP_CNF_VALUE_T *, SETUP_CNF_VALUE_T,
  int));
#define yAssF_SETUP_CNF_VALUE_T(V,E,A)  yAss_SETUP_CNF_VALUE_T(&(V),E,A)
#define yEqF_SETUP_CNF_VALUE_T(Expr1,Expr2)  yEq_SETUP_CNF_VALUE_T(Expr1,Expr2)
#define yNEqF_SETUP_CNF_VALUE_T(Expr1,Expr2)  ( ! yEq_SETUP_CNF_VALUE_T(Expr1,Expr2) )
#ifndef ANY_SETUP_CNF_VALUE_T
#define ANY_SETUP_CNF_VALUE_T yMake_SETUP_CNF_VALUE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_PROGRESS_IND_T, \
  ANY_CALLING_NUMBER_T, ANY_SUBADDR_T, ANY_USER_USER_T)
#endif
#define z0QN3_copy(P)  P

#define yAssF_REJ_IND_VALUE_T(V,E,A)  V = E
#define yEqF_REJ_IND_VALUE_T(Expr1,Expr2)  yEq_REJ_IND_VALUE_T(Expr1,Expr2)
#define yNEqF_REJ_IND_VALUE_T(Expr1,Expr2)  ( ! yEq_REJ_IND_VALUE_T(Expr1,Expr2) )
#ifndef ANY_REJ_IND_VALUE_T
#define ANY_REJ_IND_VALUE_T yMake_REJ_IND_VALUE_T(ANY_CAUSE_T)
#endif
#define z0QO3_copy(P)  P

extern void yAss_CALL_PROCEEDING_IND_VALUE_T
  XPP((CALL_PROCEEDING_IND_VALUE_T *, CALL_PROCEEDING_IND_VALUE_T, int));
#define yAssF_CALL_PROCEEDING_IND_VALUE_T(V,E,A)  yAss_CALL_PROCEEDING_IND_VALUE_T(&(V),E,A)
#define yEqF_CALL_PROCEEDING_IND_VALUE_T(Expr1,Expr2)  yEq_CALL_PROCEEDING_IND_VALUE_T(Expr1,Expr2)
#define yNEqF_CALL_PROCEEDING_IND_VALUE_T(Expr1,Expr2)  ( ! yEq_CALL_PROCEEDING_IND_VALUE_T(Expr1,Expr2) )
#ifndef ANY_CALL_PROCEEDING_IND_VALUE_T
#define ANY_CALL_PROCEEDING_IND_VALUE_T yMake_CALL_PROCEEDING_IND_VALUE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_RE_INDICATION_E, ANY_BEARER_CAPABILITY_T, ANY_BEARER_CAPABILITY_T, \
  ANY_PROGRESS_IND_T, ANY_CALL_PRIOR_E)
#endif
#define z0QP3_copy(P)  P

extern void yAss_CALL_PROGRESS_IND_VALUE_T XPP((CALL_PROGRESS_IND_VALUE_T *,
  CALL_PROGRESS_IND_VALUE_T, int));
#define yAssF_CALL_PROGRESS_IND_VALUE_T(V,E,A)  yAss_CALL_PROGRESS_IND_VALUE_T(&(V),E,A)
#define yEqF_CALL_PROGRESS_IND_VALUE_T(Expr1,Expr2)  yEq_CALL_PROGRESS_IND_VALUE_T(Expr1,Expr2)
#define yNEqF_CALL_PROGRESS_IND_VALUE_T(Expr1,Expr2)  ( ! yEq_CALL_PROGRESS_IND_VALUE_T(Expr1,Expr2) )
#ifndef ANY_CALL_PROGRESS_IND_VALUE_T
#define ANY_CALL_PROGRESS_IND_VALUE_T yMake_CALL_PROGRESS_IND_VALUE_T(ANY_PROGRESS_IND_T, \
  ANY_SDL_Boolean, ANY_USER_USER_T)
#endif
#define z0QQ3_copy(P)  P

extern void yAss_ALERT_IND_VALUE_T XPP((ALERT_IND_VALUE_T *, ALERT_IND_VALUE_T,
  int));
#define yAssF_ALERT_IND_VALUE_T(V,E,A)  yAss_ALERT_IND_VALUE_T(&(V),E,A)
#define yEqF_ALERT_IND_VALUE_T(Expr1,Expr2)  yEq_ALERT_IND_VALUE_T(Expr1,Expr2)
#define yNEqF_ALERT_IND_VALUE_T(Expr1,Expr2)  ( ! yEq_ALERT_IND_VALUE_T(Expr1,Expr2) )
#ifndef ANY_ALERT_IND_VALUE_T
#define ANY_ALERT_IND_VALUE_T yMake_ALERT_IND_VALUE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_PROGRESS_IND_T, ANY_USER_USER_T)
#endif
#define z0QR3_copy(P)  P

#define yAssF_NOTIFY_IND_VALUE_T(V,E,A)  yAssF_NOTIFY_E(V,E,A)
#define yDef_NOTIFY_IND_VALUE_T(yVar)  yDef_NOTIFY_E((NOTIFY_E *)yVar)
#define yEqF_NOTIFY_IND_VALUE_T(Expr1,Expr2)  yEqF_NOTIFY_E(Expr1,Expr2)
#define yNEqF_NOTIFY_IND_VALUE_T(Expr1,Expr2)  yNEqF_NOTIFY_E(Expr1,Expr2)
#ifndef ANY_NOTIFY_IND_VALUE_T
#define ANY_NOTIFY_IND_VALUE_T ANY_NOTIFY_E
#endif

extern void yAss_DISC_IND_VALUE_T XPP((DISC_IND_VALUE_T *, DISC_IND_VALUE_T,
  int));
#define yAssF_DISC_IND_VALUE_T(V,E,A)  yAss_DISC_IND_VALUE_T(&(V),E,A)
#define yEqF_DISC_IND_VALUE_T(Expr1,Expr2)  yEq_DISC_IND_VALUE_T(Expr1,Expr2)
#define yNEqF_DISC_IND_VALUE_T(Expr1,Expr2)  ( ! yEq_DISC_IND_VALUE_T(Expr1,Expr2) )
#ifndef ANY_DISC_IND_VALUE_T
#define ANY_DISC_IND_VALUE_T yMake_DISC_IND_VALUE_T(ANY_CAUSE_T, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_PROGRESS_IND_T, ANY_USER_USER_T, \
  ANY_SDL_Boolean, ANY_SDL_Boolean)
#endif
#define z0QS3_copy(P)  P

extern void yAss_REL_IND_VALUE_T XPP((REL_IND_VALUE_T *, REL_IND_VALUE_T, int));
#define yAssF_REL_IND_VALUE_T(V,E,A)  yAss_REL_IND_VALUE_T(&(V),E,A)
#define yEqF_REL_IND_VALUE_T(Expr1,Expr2)  yEq_REL_IND_VALUE_T(Expr1,Expr2)
#define yNEqF_REL_IND_VALUE_T(Expr1,Expr2)  ( ! yEq_REL_IND_VALUE_T(Expr1,Expr2) )
#ifndef ANY_REL_IND_VALUE_T
#define ANY_REL_IND_VALUE_T yMake_REL_IND_VALUE_T(ANY_SDL_Boolean, ANY_CAUSE_T, \
  ANY_CAUSE_T, ANY_USER_USER_T)
#endif
#define z0QT3_copy(P)  P

#define yAssF_START_DTMF_REQ_VALUE_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_START_DTMF_REQ_VALUE_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_START_DTMF_REQ_VALUE_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_START_DTMF_REQ_VALUE_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_START_DTMF_REQ_VALUE_T
#define ANY_START_DTMF_REQ_VALUE_T ANY_SDL_Octet
#endif

#define yAssF_START_DTMF_CNF_VALUE_T(V,E,A)  V = E
#define yEqF_START_DTMF_CNF_VALUE_T(Expr1,Expr2)  yEq_START_DTMF_CNF_VALUE_T(Expr1,Expr2)
#define yNEqF_START_DTMF_CNF_VALUE_T(Expr1,Expr2)  ( ! yEq_START_DTMF_CNF_VALUE_T(Expr1,Expr2) )
#ifndef ANY_START_DTMF_CNF_VALUE_T
#define ANY_START_DTMF_CNF_VALUE_T yMake_START_DTMF_CNF_VALUE_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_CAUSE_T)
#endif
#define z0QU3_copy(P)  P

extern void yAss_MODIFY_IND_VALUE_T XPP((MODIFY_IND_VALUE_T *,
  MODIFY_IND_VALUE_T, int));
#define yAssF_MODIFY_IND_VALUE_T(V,E,A)  yAss_MODIFY_IND_VALUE_T(&(V),E,A)
#define yEqF_MODIFY_IND_VALUE_T(Expr1,Expr2)  yEq_MODIFY_IND_VALUE_T(Expr1,Expr2)
#define yNEqF_MODIFY_IND_VALUE_T(Expr1,Expr2)  ( ! yEq_MODIFY_IND_VALUE_T(Expr1,Expr2) )
#ifndef ANY_MODIFY_IND_VALUE_T
#define ANY_MODIFY_IND_VALUE_T yMake_MODIFY_IND_VALUE_T(ANY_BEARER_CAPABILITY_T, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_LLC_MSG_T, ANY_HLC_MSG_T, \
  ANY_SDL_Boolean, ANY_SDL_Boolean)
#endif
#define z0QV3_copy(P)  P

extern void yAss_MODIFY_CNF_VALUE_T XPP((MODIFY_CNF_VALUE_T *,
  MODIFY_CNF_VALUE_T, int));
#define yAssF_MODIFY_CNF_VALUE_T(V,E,A)  yAss_MODIFY_CNF_VALUE_T(&(V),E,A)
#define yEqF_MODIFY_CNF_VALUE_T(Expr1,Expr2)  yEq_MODIFY_CNF_VALUE_T(Expr1,Expr2)
#define yNEqF_MODIFY_CNF_VALUE_T(Expr1,Expr2)  ( ! yEq_MODIFY_CNF_VALUE_T(Expr1,Expr2) )
#ifndef ANY_MODIFY_CNF_VALUE_T
#define ANY_MODIFY_CNF_VALUE_T yMake_MODIFY_CNF_VALUE_T(ANY_BEARER_CAPABILITY_T, \
  ANY_SDL_Boolean, ANY_CAUSE_T, ANY_SDL_Boolean, ANY_LLC_MSG_T, \
  ANY_SDL_Boolean, ANY_HLC_MSG_T, ANY_SDL_Boolean, ANY_SDL_Boolean)
#endif
#define z0QW3_copy(P)  P

#define yAssF_HOLD_OR_RETRIEVE_CNF_VALUE_E(V,E,A)  V = E
#define yEqF_HOLD_OR_RETRIEVE_CNF_VALUE_E(Expr1,Expr2)  yEq_HOLD_OR_RETRIEVE_CNF_VALUE_E(Expr1,Expr2)
#define yNEqF_HOLD_OR_RETRIEVE_CNF_VALUE_E(Expr1,Expr2)  ( ! yEq_HOLD_OR_RETRIEVE_CNF_VALUE_E(Expr1,Expr2) )
#ifndef ANY_HOLD_OR_RETRIEVE_CNF_VALUE_E
#define ANY_HOLD_OR_RETRIEVE_CNF_VALUE_E yMake_HOLD_OR_RETRIEVE_CNF_VALUE_E(ANY_SDL_Boolean, \
  ANY_CAUSE_T)
#endif
#define z0QX3_copy(P)  P

#define yAssF_ENQ_STATUS_RSP_VALUE_T(V,E,A)  V = E
#define yEqF_ENQ_STATUS_RSP_VALUE_T(Expr1,Expr2)  yEq_ENQ_STATUS_RSP_VALUE_T(Expr1,Expr2)
#define yNEqF_ENQ_STATUS_RSP_VALUE_T(Expr1,Expr2)  ( ! yEq_ENQ_STATUS_RSP_VALUE_T(Expr1,Expr2) )
#ifndef ANY_ENQ_STATUS_RSP_VALUE_T
#define ANY_ENQ_STATUS_RSP_VALUE_T yMake_ENQ_STATUS_RSP_VALUE_T(ANY_SDL_Boolean, \
  ANY_AUX_STATE_T)
#endif
#define z0QY3_copy(P)  P

extern void yAss_USER_INFO_VALUE_T XPP((USER_INFO_VALUE_T *, USER_INFO_VALUE_T,
  int));
#define yAssF_USER_INFO_VALUE_T(V,E,A)  yAss_USER_INFO_VALUE_T(&(V),E,A)
#define yEqF_USER_INFO_VALUE_T(Expr1,Expr2)  yEq_USER_INFO_VALUE_T(Expr1,Expr2)
#define yNEqF_USER_INFO_VALUE_T(Expr1,Expr2)  ( ! yEq_USER_INFO_VALUE_T(Expr1,Expr2) )
#ifndef ANY_USER_INFO_VALUE_T
#define ANY_USER_INFO_VALUE_T yMake_USER_INFO_VALUE_T(ANY_USER_USER_T, \
  ANY_SDL_Boolean)
#endif
#define z0QZ3_copy(P)  P

#define yAssF_CONGESTION_CONT_VALUE_T(V,E,A)  V = E
#define yEqF_CONGESTION_CONT_VALUE_T(Expr1,Expr2)  yEq_CONGESTION_CONT_VALUE_T(Expr1,Expr2)
#define yNEqF_CONGESTION_CONT_VALUE_T(Expr1,Expr2)  ( ! yEq_CONGESTION_CONT_VALUE_T(Expr1,Expr2) )
#ifndef ANY_CONGESTION_CONT_VALUE_T
#define ANY_CONGESTION_CONT_VALUE_T yMake_CONGESTION_CONT_VALUE_T(ANY_CONGESTION_LEVEL_E, \
  ANY_CAUSE_T)
#endif
#define z0R03_copy(P)  P

extern void yAss_SETUP_REQ_VALUE_T XPP((SETUP_REQ_VALUE_T *, SETUP_REQ_VALUE_T,
  int));
#define yAssF_SETUP_REQ_VALUE_T(V,E,A)  yAss_SETUP_REQ_VALUE_T(&(V),E,A)
#define yEqF_SETUP_REQ_VALUE_T(Expr1,Expr2)  yEq_SETUP_REQ_VALUE_T(Expr1,Expr2)
#define yNEqF_SETUP_REQ_VALUE_T(Expr1,Expr2)  ( ! yEq_SETUP_REQ_VALUE_T(Expr1,Expr2) )
#ifndef ANY_SETUP_REQ_VALUE_T
#define ANY_SETUP_REQ_VALUE_T yMake_SETUP_REQ_VALUE_T(ANY_BEARER_CAPABILITY_T, \
  ANY_SDL_Boolean, ANY_EMG_SERV_CATG_VAL_T, ANY_CALLED_NUMBER_T, \
  ANY_SDL_Boolean, ANY_SUBADDR_T, ANY_SDL_Boolean, ANY_SMALL_USER_USER_T, \
  ANY_CLIR_E)
#endif
#define z0R13_copy(P)  P

extern void yAss_SETUP_RSP_VALUE_T XPP((SETUP_RSP_VALUE_T *, SETUP_RSP_VALUE_T,
  int));
#define yAssF_SETUP_RSP_VALUE_T(V,E,A)  yAss_SETUP_RSP_VALUE_T(&(V),E,A)
#define yEqF_SETUP_RSP_VALUE_T(Expr1,Expr2)  yEq_SETUP_RSP_VALUE_T(Expr1,Expr2)
#define yNEqF_SETUP_RSP_VALUE_T(Expr1,Expr2)  ( ! yEq_SETUP_RSP_VALUE_T(Expr1,Expr2) )
#ifndef ANY_SETUP_RSP_VALUE_T
#define ANY_SETUP_RSP_VALUE_T yMake_SETUP_RSP_VALUE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SUBADDR_T, ANY_USER_USER_T)
#endif
#define z0R23_copy(P)  P

extern void yAss_DISC_REQ_VALUE_T XPP((DISC_REQ_VALUE_T *, DISC_REQ_VALUE_T,
  int));
#define yAssF_DISC_REQ_VALUE_T(V,E,A)  yAss_DISC_REQ_VALUE_T(&(V),E,A)
#define yEqF_DISC_REQ_VALUE_T(Expr1,Expr2)  yEq_DISC_REQ_VALUE_T(Expr1,Expr2)
#define yNEqF_DISC_REQ_VALUE_T(Expr1,Expr2)  ( ! yEq_DISC_REQ_VALUE_T(Expr1,Expr2) )
#ifndef ANY_DISC_REQ_VALUE_T
#define ANY_DISC_REQ_VALUE_T yMake_DISC_REQ_VALUE_T(ANY_SDL_Boolean, \
  ANY_USER_USER_T, ANY_CAUSE_T)
#endif
#define z0R33_copy(P)  P

extern void yAss_REJ_REQ_VALUE_T XPP((REJ_REQ_VALUE_T *, REJ_REQ_VALUE_T, int));
#define yAssF_REJ_REQ_VALUE_T(V,E,A)  yAss_REJ_REQ_VALUE_T(&(V),E,A)
#define yEqF_REJ_REQ_VALUE_T(Expr1,Expr2)  yEq_REJ_REQ_VALUE_T(Expr1,Expr2)
#define yNEqF_REJ_REQ_VALUE_T(Expr1,Expr2)  ( ! yEq_REJ_REQ_VALUE_T(Expr1,Expr2) )
#ifndef ANY_REJ_REQ_VALUE_T
#define ANY_REJ_REQ_VALUE_T yMake_REJ_REQ_VALUE_T(ANY_CAUSE_T, ANY_SDL_Boolean, \
  ANY_USER_USER_T)
#endif
#define z0R43_copy(P)  P

extern void yAss_REL_REQ_VALUE_T XPP((REL_REQ_VALUE_T *, REL_REQ_VALUE_T, int));
#define yAssF_REL_REQ_VALUE_T(V,E,A)  yAss_REL_REQ_VALUE_T(&(V),E,A)
#define yEqF_REL_REQ_VALUE_T(Expr1,Expr2)  yEq_REL_REQ_VALUE_T(Expr1,Expr2)
#define yNEqF_REL_REQ_VALUE_T(Expr1,Expr2)  ( ! yEq_REL_REQ_VALUE_T(Expr1,Expr2) )
#ifndef ANY_REL_REQ_VALUE_T
#define ANY_REL_REQ_VALUE_T yMake_REL_REQ_VALUE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_USER_USER_T, ANY_SDL_Boolean, ANY_L3_MSG_UNIT_T, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_CAUSE_T)
#endif
#define z0R53_copy(P)  P

#define yAssF_CALL_CONF_REQ_VALUE_T(V,E,A)  V = E
#define yEqF_CALL_CONF_REQ_VALUE_T(Expr1,Expr2)  yEq_CALL_CONF_REQ_VALUE_T(Expr1,Expr2)
#define yNEqF_CALL_CONF_REQ_VALUE_T(Expr1,Expr2)  ( ! yEq_CALL_CONF_REQ_VALUE_T(Expr1,Expr2) )
#ifndef ANY_CALL_CONF_REQ_VALUE_T
#define ANY_CALL_CONF_REQ_VALUE_T yMake_CALL_CONF_REQ_VALUE_T(ANY_SDL_Boolean, \
  ANY_BEARER_CAPABILITY_PTR_T, ANY_SDL_Boolean, ANY_BEARER_CAPABILITY_PTR_T, \
  ANY_RE_INDICATION_E, ANY_SDL_Boolean, ANY_CAUSE_T)
#endif
#define z0R63_copy(P)  P

extern void yAss_ALERT_REQ_VALUE_T XPP((ALERT_REQ_VALUE_T *, ALERT_REQ_VALUE_T,
  int));
#define yAssF_ALERT_REQ_VALUE_T(V,E,A)  yAss_ALERT_REQ_VALUE_T(&(V),E,A)
#define yEqF_ALERT_REQ_VALUE_T(Expr1,Expr2)  yEq_ALERT_REQ_VALUE_T(Expr1,Expr2)
#define yNEqF_ALERT_REQ_VALUE_T(Expr1,Expr2)  ( ! yEq_ALERT_REQ_VALUE_T(Expr1,Expr2) )
#ifndef ANY_ALERT_REQ_VALUE_T
#define ANY_ALERT_REQ_VALUE_T yMake_ALERT_REQ_VALUE_T(ANY_SDL_Boolean, \
  ANY_USER_USER_T)
#endif
#define z0R73_copy(P)  P

extern void yAss_FACILITY_REQ_VALUE_T XPP((FACILITY_REQ_VALUE_T *,
  FACILITY_REQ_VALUE_T, int));
#define yAssF_FACILITY_REQ_VALUE_T(V,E,A)  yAss_FACILITY_REQ_VALUE_T(&(V),E,A)
#define yEqF_FACILITY_REQ_VALUE_T(Expr1,Expr2)  yEq_FACILITY_REQ_VALUE_T(Expr1,Expr2)
#define yNEqF_FACILITY_REQ_VALUE_T(Expr1,Expr2)  ( ! yEq_FACILITY_REQ_VALUE_T(Expr1,Expr2) )
#ifndef ANY_FACILITY_REQ_VALUE_T
#define ANY_FACILITY_REQ_VALUE_T yMake_FACILITY_REQ_VALUE_T(ANY_FACILITY_T, \
  ANY_BLOCK_PTR_T, ANY_SDL_Boolean)
#endif
#define z0R83_copy(P)  P

#define yAssF_MODIFY_REQ_VALUE_T(V,E,A)  V = E
#define yEqF_MODIFY_REQ_VALUE_T(Expr1,Expr2)  yEq_MODIFY_REQ_VALUE_T(Expr1,Expr2)
#define yNEqF_MODIFY_REQ_VALUE_T(Expr1,Expr2)  ( ! yEq_MODIFY_REQ_VALUE_T(Expr1,Expr2) )
#ifndef ANY_MODIFY_REQ_VALUE_T
#define ANY_MODIFY_REQ_VALUE_T yMake_MODIFY_REQ_VALUE_T(ANY_BEARER_CAPABILITY_PTR_T)
#endif
#define z0R93_copy(P)  P

#define yAssF_MODIFY_RSP_VALUE_T(V,E,A)  V = E
#define yEqF_MODIFY_RSP_VALUE_T(Expr1,Expr2)  yEq_MODIFY_RSP_VALUE_T(Expr1,Expr2)
#define yNEqF_MODIFY_RSP_VALUE_T(Expr1,Expr2)  ( ! yEq_MODIFY_RSP_VALUE_T(Expr1,Expr2) )
#ifndef ANY_MODIFY_RSP_VALUE_T
#define ANY_MODIFY_RSP_VALUE_T yMake_MODIFY_RSP_VALUE_T(ANY_BEARER_CAPABILITY_PTR_T, \
  ANY_SDL_Boolean, ANY_CAUSE_T)
#endif
#define z0RA3_copy(P)  P

extern void yAss_CC_ESTABLISHMENT_RSP_VALUE_T
  XPP((CC_ESTABLISHMENT_RSP_VALUE_T *, CC_ESTABLISHMENT_RSP_VALUE_T, int));
#define yAssF_CC_ESTABLISHMENT_RSP_VALUE_T(V,E,A)  yAss_CC_ESTABLISHMENT_RSP_VALUE_T(&(V),E,A)
#define yEqF_CC_ESTABLISHMENT_RSP_VALUE_T(Expr1,Expr2)  yEq_CC_ESTABLISHMENT_RSP_VALUE_T(Expr1,Expr2)
#define yNEqF_CC_ESTABLISHMENT_RSP_VALUE_T(Expr1,Expr2)  ( ! yEq_CC_ESTABLISHMENT_RSP_VALUE_T(Expr1,Expr2) )
#ifndef ANY_CC_ESTABLISHMENT_RSP_VALUE_T
#define ANY_CC_ESTABLISHMENT_RSP_VALUE_T yMake_CC_ESTABLISHMENT_RSP_VALUE_T(ANY_IS_REJECT_RECALL_T, \
  ANY_SDL_Boolean, ANY_CAUSE_T, ANY_CCBS_SETUP_CONTAINER_VALUE_T)
#endif
#define z0RB3_copy(P)  P

extern void yAss_SIGNAL_VALUE_UNION_T XPP((SIGNAL_VALUE_UNION_T *,
  SIGNAL_VALUE_UNION_T, int));
#define yAssF_SIGNAL_VALUE_UNION_T(V,E,A)  yAss_SIGNAL_VALUE_UNION_T(&(V),E,A)
#define yEqF_SIGNAL_VALUE_UNION_T(Expr1,Expr2)  yEq_SIGNAL_VALUE_UNION_T(Expr1,Expr2)
#define yNEqF_SIGNAL_VALUE_UNION_T(Expr1,Expr2)  ( ! yEq_SIGNAL_VALUE_UNION_T(Expr1,Expr2) )
#ifndef ANY_SIGNAL_VALUE_UNION_T
#define ANY_SIGNAL_VALUE_UNION_T
#endif
#define z0RC03_copy(P)  P

extern void yAss_BACKUP_BEARER_CAPABILITY_BUF_T
  XPP((BACKUP_BEARER_CAPABILITY_BUF_T, BACKUP_BEARER_CAPABILITY_BUF_T, int));
#define yAssF_BACKUP_BEARER_CAPABILITY_BUF_T(V,E,A)  yAss_BACKUP_BEARER_CAPABILITY_BUF_T(V,E,A)
#define yEqF_BACKUP_BEARER_CAPABILITY_BUF_T(Expr1,Expr2)  yEq_BACKUP_BEARER_CAPABILITY_BUF_T(Expr1,Expr2)
#define yNEqF_BACKUP_BEARER_CAPABILITY_BUF_T(Expr1,Expr2)  ( ! yEq_BACKUP_BEARER_CAPABILITY_BUF_T(Expr1,Expr2) )
#define yTstI_BACKUP_BEARER_CAPABILITY_BUF_T(yExpr)  yExpr
#ifndef ANY_BACKUP_BEARER_CAPABILITY_BUF_T
#define ANY_BACKUP_BEARER_CAPABILITY_BUF_T
#endif
#define z0RD5_copy(P)  P

extern void yAss_BACKUP_BEARER_CAPABILITY_T XPP((BACKUP_BEARER_CAPABILITY_T *,
  BACKUP_BEARER_CAPABILITY_T, int));
#define yAssF_BACKUP_BEARER_CAPABILITY_T(V,E,A)  yAss_BACKUP_BEARER_CAPABILITY_T(&(V),E,A)
#define yEqF_BACKUP_BEARER_CAPABILITY_T(Expr1,Expr2)  yEq_BACKUP_BEARER_CAPABILITY_T(Expr1,Expr2)
#define yNEqF_BACKUP_BEARER_CAPABILITY_T(Expr1,Expr2)  ( ! yEq_BACKUP_BEARER_CAPABILITY_T(Expr1,Expr2) )
#ifndef ANY_BACKUP_BEARER_CAPABILITY_T
#define ANY_BACKUP_BEARER_CAPABILITY_T yMake_BACKUP_BEARER_CAPABILITY_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_BACKUP_BEARER_CAPABILITY_BUF_T)
#endif
#define z0RE3_copy(P)  P

extern void yAss_MN_CMROUTER_UNION_T XPP((MN_CMROUTER_UNION_T *,
  MN_CMROUTER_UNION_T, int));
#define yAssF_MN_CMROUTER_UNION_T(V,E,A)  yAss_MN_CMROUTER_UNION_T(&(V),E,A)
#define yEqF_MN_CMROUTER_UNION_T(Expr1,Expr2)  yEq_MN_CMROUTER_UNION_T(Expr1,Expr2)
#define yNEqF_MN_CMROUTER_UNION_T(Expr1,Expr2)  ( ! yEq_MN_CMROUTER_UNION_T(Expr1,Expr2) )
#ifndef ANY_MN_CMROUTER_UNION_T
#define ANY_MN_CMROUTER_UNION_T
#endif
#define z0RF3_copy(P)  P

#define yAssF_MN_MM_REG_CAUSE_E(V,E,A)  V = E
#define yDef_MN_MM_REG_CAUSE_E(yVar)  *(yVar) = MS_POWER_ON_WITH_SIM
#define yEqF_MN_MM_REG_CAUSE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MN_MM_REG_CAUSE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MN_MM_REG_CAUSE_E
#define ANY_MN_MM_REG_CAUSE_E (MN_MM_REG_CAUSE_E)(0 + \
  GETINTRAND%((int)(MS_USER_REQ_MANUAL_PLMN_SELECTION)+1))
#endif
#define z0RG8_copy(P)  P

#define yAssF_HANDSET_STATE_E(V,E,A)  V = E
#define yDef_HANDSET_STATE_E(yVar)  *(yVar) = MS_NORMAL_SERVICE
#define yEqF_HANDSET_STATE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_HANDSET_STATE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_HANDSET_STATE_E
#define ANY_HANDSET_STATE_E (HANDSET_STATE_E)(0 + GETINTRAND%((int)(MS_NULL)+1))
#endif
#define z0RH7_copy(P)  P

#define yAssF_MN_MM_NREG_CAUSE_E(V,E,A)  V = E
#define yDef_MN_MM_NREG_CAUSE_E(yVar)  *(yVar) = MS_POWER_OFF
#define yEqF_MN_MM_NREG_CAUSE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MN_MM_NREG_CAUSE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MN_MM_NREG_CAUSE_E
#define ANY_MN_MM_NREG_CAUSE_E (MN_MM_NREG_CAUSE_E)(0 + \
  GETINTRAND%((int)(MS_DEACT_TO_CALI)+1))
#endif
#define z0RI8_copy(P)  P

extern void yAss_CURRENT_CELL_INFO_T XPP((CURRENT_CELL_INFO_T *,
  CURRENT_CELL_INFO_T, int));
#define yAssF_CURRENT_CELL_INFO_T(V,E,A)  yAss_CURRENT_CELL_INFO_T(&(V),E,A)
#define yEqF_CURRENT_CELL_INFO_T(Expr1,Expr2)  yEq_CURRENT_CELL_INFO_T(Expr1,Expr2)
#define yNEqF_CURRENT_CELL_INFO_T(Expr1,Expr2)  ( ! yEq_CURRENT_CELL_INFO_T(Expr1,Expr2) )
#ifndef ANY_CURRENT_CELL_INFO_T
#define ANY_CURRENT_CELL_INFO_T yMake_CURRENT_CELL_INFO_T(ANY_NETWORK_MODE_E, \
  ANY_PLMN_T, ANY_SDL_Boolean, ANY_RAI_T, ANY_CELL_ID_T, ANY_BA_LIST_ARR_T, \
  ANY_BA_IS_VALID_T)
#endif
#define z0RJ3_copy(P)  P

extern void yAss_MN_REG_PAR XPP((MN_REG_PAR *, MN_REG_PAR, int));
#define yAssF_MN_REG_PAR(V,E,A)  yAss_MN_REG_PAR(&(V),E,A)
#define yEqF_MN_REG_PAR(Expr1,Expr2)  yEq_MN_REG_PAR(Expr1,Expr2)
#define yNEqF_MN_REG_PAR(Expr1,Expr2)  ( ! yEq_MN_REG_PAR(Expr1,Expr2) )
#ifndef ANY_MN_REG_PAR
#define ANY_MN_REG_PAR yMake_MN_REG_PAR(ANY_PLMN_T, ANY_BA_LIST_ARR_T, \
  ANY_SDL_Boolean, ANY_MS_BAND_E, ANY_BA_LIST_ARR_T, ANY_SDL_Boolean, \
  ANY_BAND_FILTER_T)
#endif
#define z0RK3_copy(P)  P

#define yAssF_MN_MM_NREG_IND_CAUSE_E(V,E,A)  V = E
#define yDef_MN_MM_NREG_IND_CAUSE_E(yVar)  *(yVar) = NREG_IND_ABNORMAL_CELL
#define yEqF_MN_MM_NREG_IND_CAUSE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MN_MM_NREG_IND_CAUSE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MN_MM_NREG_IND_CAUSE_E
#define ANY_MN_MM_NREG_IND_CAUSE_E (MN_MM_NREG_IND_CAUSE_E)(0 + \
  GETINTRAND%((int)(NREG_IND_SIM_AUTH_FAIL)+1))
#endif
#define z0RLD_copy(P)  P

#define yAssF_MS_ATTACH_TYPE_E(V,E,A)  V = E
#define yDef_MS_ATTACH_TYPE_E(yVar)  *(yVar) = GSM_ONLY
#define yEqF_MS_ATTACH_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MS_ATTACH_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MS_ATTACH_TYPE_E
#define ANY_MS_ATTACH_TYPE_E (MS_ATTACH_TYPE_E)(0 + GETINTRAND%((int)(GPRS_ONLY) \
  +1))
#endif
#define z0RM6_copy(P)  P

#define yAssF_IS_MS_SUPPORT_CS_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_MS_SUPPORT_CS_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_MS_SUPPORT_CS_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_MS_SUPPORT_CS_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_MS_SUPPORT_CS_T
#define ANY_IS_MS_SUPPORT_CS_T ANY_SDL_Boolean
#endif

#define yAssF_IS_MS_SUPPORT_PS_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_MS_SUPPORT_PS_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_MS_SUPPORT_PS_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_MS_SUPPORT_PS_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_MS_SUPPORT_PS_T
#define ANY_IS_MS_SUPPORT_PS_T ANY_SDL_Boolean
#endif

#define yAssF_IS_AUTO_PLMN_SEL_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_AUTO_PLMN_SEL_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_AUTO_PLMN_SEL_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_AUTO_PLMN_SEL_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_AUTO_PLMN_SEL_T
#define ANY_IS_AUTO_PLMN_SEL_T ANY_SDL_Boolean
#endif

#define yAssF_IS_FORBID_ROAMING_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_FORBID_ROAMING_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_FORBID_ROAMING_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_FORBID_ROAMING_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_FORBID_ROAMING_T
#define ANY_IS_FORBID_ROAMING_T ANY_SDL_Boolean
#endif

#define yAssF_IS_PHONE_CTRL_PLMN_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_PHONE_CTRL_PLMN_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_PHONE_CTRL_PLMN_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_PHONE_CTRL_PLMN_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_PHONE_CTRL_PLMN_T
#define ANY_IS_PHONE_CTRL_PLMN_T ANY_SDL_Boolean
#endif

#define yAssF_CSN_NODE_T(V,E,A)  V = E
#define yEqF_CSN_NODE_T(Expr1,Expr2)  yEq_CSN_NODE_T(Expr1,Expr2)
#define yNEqF_CSN_NODE_T(Expr1,Expr2)  ( ! yEq_CSN_NODE_T(Expr1,Expr2) )
#ifndef ANY_CSN_NODE_T
#define ANY_CSN_NODE_T yMake_CSN_NODE_T(ANY_z_ctypes_4_Voidstar, \
  ANY_CSN_NODE_PTR_T)
#endif
#define z0RN3_copy(P)  P

#define yAssF_CSN_NODE_PTR_T(V,E,A)  V = E
#define yDef_CSN_NODE_PTR_T(yVar)  *(yVar) = z0RO0_Null()
#define yEqF_CSN_NODE_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CSN_NODE_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CSN_NODE_PTR_T
#define ANY_CSN_NODE_PTR_T 0
#endif
#define z0ROF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_CSN_NODE_PTR_T() (CSN_NODE_PTR_T)XALLOC_REF_VAL(sizeof(CSN_NODE_T), ySrtN_CSN_NODE_PTR_T)
#else
#define yAll_CSN_NODE_PTR_T() (CSN_NODE_PTR_T)XALLOC(sizeof(CSN_NODE_T), \
  &ySrtR_CSN_NODE_PTR_T)
#endif
#define yPlus_CSN_NODE_PTR_T(P1,P2) (P1+P2)
#define yMinus_CSN_NODE_PTR_T(P1,P2) (P1-P2)
#define z0RO0_Null() 0
#define z0RO1_Alloc() yAll_CSN_NODE_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0RO6_free(P) XFREE_REF_VAL((void **)(P), sizeof(CSN_NODE_T))
#else
#define z0RO6_free(P) XFREE((void **)(P), sizeof(CSN_NODE_T))
#endif
#define z0RO9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0ROA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0ROB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_CSN_LIST_T(V,E,A)  V = E
#define yEqF_CSN_LIST_T(Expr1,Expr2)  yEq_CSN_LIST_T(Expr1,Expr2)
#define yNEqF_CSN_LIST_T(Expr1,Expr2)  ( ! yEq_CSN_LIST_T(Expr1,Expr2) )
#ifndef ANY_CSN_LIST_T
#define ANY_CSN_LIST_T yMake_CSN_LIST_T(ANY_CSN_NODE_PTR_T, ANY_CSN_NODE_PTR_T)
#endif
#define z0RP3_copy(P)  P

#define yAssF_CSN_LIST_PTR_T(V,E,A)  V = E
#define yDef_CSN_LIST_PTR_T(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_CSN_LIST_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CSN_LIST_PTR_T
#define ANY_CSN_LIST_PTR_T 0
#endif
#define z0RQF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_CSN_LIST_PTR_T() (CSN_LIST_PTR_T)XALLOC_REF_VAL(sizeof(CSN_LIST_T), ySrtN_CSN_LIST_PTR_T)
#else
#define yAll_CSN_LIST_PTR_T() (CSN_LIST_PTR_T)XALLOC(sizeof(CSN_LIST_T), \
  &ySrtR_CSN_LIST_PTR_T)
#endif
#define yPlus_CSN_LIST_PTR_T(P1,P2) (P1+P2)
#define yMinus_CSN_LIST_PTR_T(P1,P2) (P1-P2)
#define z0RQ0_Null() 0
#define z0RQ1_Alloc() yAll_CSN_LIST_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0RQ6_free(P) XFREE_REF_VAL((void **)(P), sizeof(CSN_LIST_T))
#else
#define z0RQ6_free(P) XFREE((void **)(P), sizeof(CSN_LIST_T))
#endif
#define z0RQ9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0RQA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0RQB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_ADD_FREQ_LIST_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_ADD_FREQ_LIST_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_ADD_FREQ_LIST_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_ADD_FREQ_LIST_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_ADD_FREQ_LIST_PTR
#define ANY_ADD_FREQ_LIST_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_CELL_ALLOCATION_LIST_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_CELL_ALLOCATION_LIST_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_CELL_ALLOCATION_LIST_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_CELL_ALLOCATION_LIST_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_CELL_ALLOCATION_LIST_PTR
#define ANY_CELL_ALLOCATION_LIST_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_CHANNEL_GROUP_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_CHANNEL_GROUP_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_CHANNEL_GROUP_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_CHANNEL_GROUP_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_CHANNEL_GROUP_PTR
#define ANY_CHANNEL_GROUP_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_EXT_FREQ_LIST_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_EXT_FREQ_LIST_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_EXT_FREQ_LIST_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_EXT_FREQ_LIST_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_EXT_FREQ_LIST_PTR
#define ANY_EXT_FREQ_LIST_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_GPRS_MOBILE_ALLOCTIONS_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_GPRS_MOBILE_ALLOCTIONS_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_GPRS_MOBILE_ALLOCTIONS_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_GPRS_MOBILE_ALLOCTIONS_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_GPRS_MOBILE_ALLOCTIONS_PTR
#define ANY_GPRS_MOBILE_ALLOCTIONS_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_NEIGHBOUR_CELL_PARS_2_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_NEIGHBOUR_CELL_PARS_2_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_NEIGHBOUR_CELL_PARS_2_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_NEIGHBOUR_CELL_PARS_2_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_NEIGHBOUR_CELL_PARS_2_PTR
#define ANY_NEIGHBOUR_CELL_PARS_2_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_NEIGHBOUR_CELL_PARS_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_NEIGHBOUR_CELL_PARS_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_NEIGHBOUR_CELL_PARS_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_NEIGHBOUR_CELL_PARS_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_NEIGHBOUR_CELL_PARS_PTR
#define ANY_NEIGHBOUR_CELL_PARS_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_PCCCH_DESCRIPTION_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_PCCCH_DESCRIPTION_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_PCCCH_DESCRIPTION_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_PCCCH_DESCRIPTION_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_PCCCH_DESCRIPTION_PTR
#define ANY_PCCCH_DESCRIPTION_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_REFERENCED_FREQ_LIST_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_REFERENCED_FREQ_LIST_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_REFERENCED_FREQ_LIST_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_REFERENCED_FREQ_LIST_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_REFERENCED_FREQ_LIST_PTR
#define ANY_REFERENCED_FREQ_LIST_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_REJECT_LIST_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_REJECT_LIST_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_REJECT_LIST_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_REJECT_LIST_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_REJECT_LIST_PTR
#define ANY_REJECT_LIST_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_REMOVED_FREQ_PTR(V,E,A)  yAssF_CSN_LIST_PTR_T(V,E,A)
#define yDef_REMOVED_FREQ_PTR(yVar)  *(yVar) = z0RQ0_Null()
#define yEqF_REMOVED_FREQ_PTR(Expr1,Expr2)  yEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#define yNEqF_REMOVED_FREQ_PTR(Expr1,Expr2)  yNEqF_CSN_LIST_PTR_T(Expr1,Expr2)
#ifndef ANY_REMOVED_FREQ_PTR
#define ANY_REMOVED_FREQ_PTR ANY_CSN_LIST_PTR_T
#endif

#define yAssF_START_FRAME_NUMBER_T(V,E,A)  V = E
#define yEqF_START_FRAME_NUMBER_T(Expr1,Expr2)  yEq_START_FRAME_NUMBER_T(Expr1,Expr2)
#define yNEqF_START_FRAME_NUMBER_T(Expr1,Expr2)  ( ! yEq_START_FRAME_NUMBER_T(Expr1,Expr2) )
#ifndef ANY_START_FRAME_NUMBER_T
#define ANY_START_FRAME_NUMBER_T yMake_START_FRAME_NUMBER_T(ANY_SDL_Octet, \
  ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0RR3_copy(P)  P

extern void yAss_PACKET_REQ_REF_T XPP((PACKET_REQ_REF_T *, PACKET_REQ_REF_T,
  int));
#define yAssF_PACKET_REQ_REF_T(V,E,A)  yAss_PACKET_REQ_REF_T(&(V),E,A)
#define yEqF_PACKET_REQ_REF_T(Expr1,Expr2)  yEq_PACKET_REQ_REF_T(Expr1,Expr2)
#define yNEqF_PACKET_REQ_REF_T(Expr1,Expr2)  ( ! yEq_PACKET_REQ_REF_T(Expr1,Expr2) )
#ifndef ANY_PACKET_REQ_REF_T
#define ANY_PACKET_REQ_REF_T yMake_PACKET_REQ_REF_T(ANY_SDL_Boolean, \
  ANY_PRACH_AB_T, ANY_START_FRAME_NUMBER_T)
#endif
#define z0RS3_copy(P)  P

#define yAssF_GLOBAL_TFI_T(V,E,A)  V = E
#define yEqF_GLOBAL_TFI_T(Expr1,Expr2)  yEq_GLOBAL_TFI_T(Expr1,Expr2)
#define yNEqF_GLOBAL_TFI_T(Expr1,Expr2)  ( ! yEq_GLOBAL_TFI_T(Expr1,Expr2) )
#ifndef ANY_GLOBAL_TFI_T
#define ANY_GLOBAL_TFI_T yMake_GLOBAL_TFI_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet)
#endif
#define z0RT3_copy(P)  P

#define yAssF_ASSIGNED_TFI_T(V,E,A)  V = E
#define yEqF_ASSIGNED_TFI_T(Expr1,Expr2)  yEq_ASSIGNED_TFI_T(Expr1,Expr2)
#define yNEqF_ASSIGNED_TFI_T(Expr1,Expr2)  ( ! yEq_ASSIGNED_TFI_T(Expr1,Expr2) )
#ifndef ANY_ASSIGNED_TFI_T
#define ANY_ASSIGNED_TFI_T yMake_ASSIGNED_TFI_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0RU3_copy(P)  P

extern void yAss_REJECT_T XPP((REJECT_T *, REJECT_T, int));
#define yAssF_REJECT_T(V,E,A)  yAss_REJECT_T(&(V),E,A)
#define yEqF_REJECT_T(Expr1,Expr2)  yEq_REJECT_T(Expr1,Expr2)
#define yNEqF_REJECT_T(Expr1,Expr2)  ( ! yEq_REJECT_T(Expr1,Expr2) )
#ifndef ANY_REJECT_T
#define ANY_REJECT_T yMake_REJECT_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_PACKET_REQ_REF_T, ANY_GLOBAL_TFI_T)
#endif
#define z0RV3_copy(P)  P

extern void yAss_REF_ADDR_T XPP((REF_ADDR_T *, REF_ADDR_T, int));
#define yAssF_REF_ADDR_T(V,E,A)  yAss_REF_ADDR_T(&(V),E,A)
#define yEqF_REF_ADDR_T(Expr1,Expr2)  yEq_REF_ADDR_T(Expr1,Expr2)
#define yNEqF_REF_ADDR_T(Expr1,Expr2)  ( ! yEq_REF_ADDR_T(Expr1,Expr2) )
#ifndef ANY_REF_ADDR_T
#define ANY_REF_ADDR_T yMake_REF_ADDR_T(ANY_GLOBAL_TFI_T, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_PACKET_REQ_REF_T)
#endif
#define z0RW3_copy(P)  P

#define yAssF_HCS_PARS_T(V,E,A)  V = E
#define yEqF_HCS_PARS_T(Expr1,Expr2)  yEq_HCS_PARS_T(Expr1,Expr2)
#define yNEqF_HCS_PARS_T(Expr1,Expr2)  ( ! yEq_HCS_PARS_T(Expr1,Expr2) )
#ifndef ANY_HCS_PARS_T
#define ANY_HCS_PARS_T yMake_HCS_PARS_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet)
#endif
#define z0RX3_copy(P)  P

#define yAssF_SI13_PBCCH_LOCATION_T(V,E,A)  V = E
#define yEqF_SI13_PBCCH_LOCATION_T(Expr1,Expr2)  yEq_SI13_PBCCH_LOCATION_T(Expr1,Expr2)
#define yNEqF_SI13_PBCCH_LOCATION_T(Expr1,Expr2)  ( ! yEq_SI13_PBCCH_LOCATION_T(Expr1,Expr2) )
#ifndef ANY_SI13_PBCCH_LOCATION_T
#define ANY_SI13_PBCCH_LOCATION_T yMake_SI13_PBCCH_LOCATION_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0RY3_copy(P)  P

#define yAssF_CELL_SELECTION_T(V,E,A)  V = E
#define yEqF_CELL_SELECTION_T(Expr1,Expr2)  yEq_CELL_SELECTION_T(Expr1,Expr2)
#define yNEqF_CELL_SELECTION_T(Expr1,Expr2)  ( ! yEq_CELL_SELECTION_T(Expr1,Expr2) )
#ifndef ANY_CELL_SELECTION_T
#define ANY_CELL_SELECTION_T yMake_CELL_SELECTION_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_HCS_PARS_T, \
  ANY_SI13_PBCCH_LOCATION_T)
#endif
#define z0RZ03_copy(P)  P

#define yAssF_FREQ_DIFF_LIST_T(V,E,A)  V = E
#define yEqF_FREQ_DIFF_LIST_T(Expr1,Expr2)  yEq_FREQ_DIFF_LIST_T(Expr1,Expr2)
#define yNEqF_FREQ_DIFF_LIST_T(Expr1,Expr2)  ( ! yEq_FREQ_DIFF_LIST_T(Expr1,Expr2) )
#ifndef ANY_FREQ_DIFF_LIST_T
#define ANY_FREQ_DIFF_LIST_T yMake_FREQ_DIFF_LIST_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_CELL_SELECTION_T)
#endif
#define z0S03_copy(P)  P

#define yAssF_NC_FREQ_LIST_T(V,E,A)  V = E
#define yEqF_NC_FREQ_LIST_T(Expr1,Expr2)  yEq_NC_FREQ_LIST_T(Expr1,Expr2)
#define yNEqF_NC_FREQ_LIST_T(Expr1,Expr2)  ( ! yEq_NC_FREQ_LIST_T(Expr1,Expr2) )
#ifndef ANY_NC_FREQ_LIST_T
#define ANY_NC_FREQ_LIST_T yMake_NC_FREQ_LIST_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_REMOVED_FREQ_PTR, ANY_ADD_FREQ_LIST_PTR)
#endif
#define z0S13_copy(P)  P

#define yAssF_NC_MEAS_PARS_T(V,E,A)  V = E
#define yEqF_NC_MEAS_PARS_T(Expr1,Expr2)  yEq_NC_MEAS_PARS_T(Expr1,Expr2)
#define yNEqF_NC_MEAS_PARS_T(Expr1,Expr2)  ( ! yEq_NC_MEAS_PARS_T(Expr1,Expr2) )
#ifndef ANY_NC_MEAS_PARS_T
#define ANY_NC_MEAS_PARS_T yMake_NC_MEAS_PARS_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_NC_FREQ_LIST_T)
#endif
#define z0S23_copy(P)  P

#define yAssF_GLOBAL_PACKET_TIMING_ADVANCE_T(V,E,A)  V = E
#define yEqF_GLOBAL_PACKET_TIMING_ADVANCE_T(Expr1,Expr2)  yEq_GLOBAL_PACKET_TIMING_ADVANCE_T(Expr1,Expr2)
#define yNEqF_GLOBAL_PACKET_TIMING_ADVANCE_T(Expr1,Expr2)  ( ! yEq_GLOBAL_PACKET_TIMING_ADVANCE_T(Expr1,Expr2) )
#ifndef ANY_GLOBAL_PACKET_TIMING_ADVANCE_T
#define ANY_GLOBAL_PACKET_TIMING_ADVANCE_T yMake_GLOBAL_PACKET_TIMING_ADVANCE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0S33_copy(P)  P

#define yAssF_PACKET_TIMING_ADVANCE_T(V,E,A)  V = E
#define yEqF_PACKET_TIMING_ADVANCE_T(Expr1,Expr2)  yEq_PACKET_TIMING_ADVANCE_T(Expr1,Expr2)
#define yNEqF_PACKET_TIMING_ADVANCE_T(Expr1,Expr2)  ( ! yEq_PACKET_TIMING_ADVANCE_T(Expr1,Expr2) )
#ifndef ANY_PACKET_TIMING_ADVANCE_T
#define ANY_PACKET_TIMING_ADVANCE_T yMake_PACKET_TIMING_ADVANCE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0S43_copy(P)  P

#define yAssF_INDIRECT_ENCODING_T(V,E,A)  V = E
#define yEqF_INDIRECT_ENCODING_T(Expr1,Expr2)  yEq_INDIRECT_ENCODING_T(Expr1,Expr2)
#define yNEqF_INDIRECT_ENCODING_T(Expr1,Expr2)  ( ! yEq_INDIRECT_ENCODING_T(Expr1,Expr2) )
#ifndef ANY_INDIRECT_ENCODING_T
#define ANY_INDIRECT_ENCODING_T yMake_INDIRECT_ENCODING_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0S53_copy(P)  P

extern void yAss_RFL_NUMBER_ARRAY_T XPP((RFL_NUMBER_ARRAY_T,
  RFL_NUMBER_ARRAY_T, int));
#define yAssF_RFL_NUMBER_ARRAY_T(V,E,A)  yAss_RFL_NUMBER_ARRAY_T(V,E,A)
#define yEqF_RFL_NUMBER_ARRAY_T(Expr1,Expr2)  yEq_RFL_NUMBER_ARRAY_T(Expr1,Expr2)
#define yNEqF_RFL_NUMBER_ARRAY_T(Expr1,Expr2)  ( ! yEq_RFL_NUMBER_ARRAY_T(Expr1,Expr2) )
#define yTstI_RFL_NUMBER_ARRAY_T(yExpr)  yExpr
#ifndef ANY_RFL_NUMBER_ARRAY_T
#define ANY_RFL_NUMBER_ARRAY_T
#endif
#define z0S65_copy(P)  P

extern void yAss_RFL_NUMBER_LIST_T XPP((RFL_NUMBER_LIST_T *, RFL_NUMBER_LIST_T,
  int));
#define yAssF_RFL_NUMBER_LIST_T(V,E,A)  yAss_RFL_NUMBER_LIST_T(&(V),E,A)
#define yEqF_RFL_NUMBER_LIST_T(Expr1,Expr2)  yEq_RFL_NUMBER_LIST_T(Expr1,Expr2)
#define yNEqF_RFL_NUMBER_LIST_T(Expr1,Expr2)  ( ! yEq_RFL_NUMBER_LIST_T(Expr1,Expr2) )
#ifndef ANY_RFL_NUMBER_LIST_T
#define ANY_RFL_NUMBER_LIST_T yMake_RFL_NUMBER_LIST_T(ANY_SDL_Octet, \
  ANY_RFL_NUMBER_ARRAY_T)
#endif
#define z0S73_copy(P)  P

extern void yAss_ARFCN_INDEX_ARRAY_T XPP((ARFCN_INDEX_ARRAY_T,
  ARFCN_INDEX_ARRAY_T, int));
#define yAssF_ARFCN_INDEX_ARRAY_T(V,E,A)  yAss_ARFCN_INDEX_ARRAY_T(V,E,A)
#define yEqF_ARFCN_INDEX_ARRAY_T(Expr1,Expr2)  yEq_ARFCN_INDEX_ARRAY_T(Expr1,Expr2)
#define yNEqF_ARFCN_INDEX_ARRAY_T(Expr1,Expr2)  ( ! yEq_ARFCN_INDEX_ARRAY_T(Expr1,Expr2) )
#define yTstI_ARFCN_INDEX_ARRAY_T(yExpr)  yExpr
#ifndef ANY_ARFCN_INDEX_ARRAY_T
#define ANY_ARFCN_INDEX_ARRAY_T
#endif
#define z0S85_copy(P)  P

extern void yAss_ARFCN_INDEX_LIST_T XPP((ARFCN_INDEX_LIST_T *,
  ARFCN_INDEX_LIST_T, int));
#define yAssF_ARFCN_INDEX_LIST_T(V,E,A)  yAss_ARFCN_INDEX_LIST_T(&(V),E,A)
#define yEqF_ARFCN_INDEX_LIST_T(Expr1,Expr2)  yEq_ARFCN_INDEX_LIST_T(Expr1,Expr2)
#define yNEqF_ARFCN_INDEX_LIST_T(Expr1,Expr2)  ( ! yEq_ARFCN_INDEX_LIST_T(Expr1,Expr2) )
#ifndef ANY_ARFCN_INDEX_LIST_T
#define ANY_ARFCN_INDEX_LIST_T yMake_ARFCN_INDEX_LIST_T(ANY_SDL_Octet, \
  ANY_ARFCN_INDEX_ARRAY_T)
#endif
#define z0S93_copy(P)  P

extern void yAss_MAC_MS_PAR_IMEI_ARR_T XPP((MAC_MS_PAR_IMEI_ARR_T,
  MAC_MS_PAR_IMEI_ARR_T, int));
#define yAssF_MAC_MS_PAR_IMEI_ARR_T(V,E,A)  yAss_MAC_MS_PAR_IMEI_ARR_T(V,E,A)
#define yEqF_MAC_MS_PAR_IMEI_ARR_T(Expr1,Expr2)  yEq_MAC_MS_PAR_IMEI_ARR_T(Expr1,Expr2)
#define yNEqF_MAC_MS_PAR_IMEI_ARR_T(Expr1,Expr2)  ( ! yEq_MAC_MS_PAR_IMEI_ARR_T(Expr1,Expr2) )
#define yTstI_MAC_MS_PAR_IMEI_ARR_T(yExpr)  yExpr
#ifndef ANY_MAC_MS_PAR_IMEI_ARR_T
#define ANY_MAC_MS_PAR_IMEI_ARR_T
#endif
#define z0SA5_copy(P)  P

extern void yAss_MAC_MA_BITMAP_T XPP((MAC_MA_BITMAP_T, MAC_MA_BITMAP_T, int));
#define yAssF_MAC_MA_BITMAP_T(V,E,A)  yAss_MAC_MA_BITMAP_T(V,E,A)
#define yEqF_MAC_MA_BITMAP_T(Expr1,Expr2)  yEq_MAC_MA_BITMAP_T(Expr1,Expr2)
#define yNEqF_MAC_MA_BITMAP_T(Expr1,Expr2)  ( ! yEq_MAC_MA_BITMAP_T(Expr1,Expr2) )
#define yTstI_MAC_MA_BITMAP_T(yExpr)  yExpr
#ifndef ANY_MAC_MA_BITMAP_T
#define ANY_MAC_MA_BITMAP_T
#endif
#define z0SB5_copy(P)  P

extern void yAss_GPRS_MOBILE_ALLOCATION_T XPP((GPRS_MOBILE_ALLOCATION_T *,
  GPRS_MOBILE_ALLOCATION_T, int));
#define yAssF_GPRS_MOBILE_ALLOCATION_T(V,E,A)  yAss_GPRS_MOBILE_ALLOCATION_T(&(V),E,A)
#define yEqF_GPRS_MOBILE_ALLOCATION_T(Expr1,Expr2)  yEq_GPRS_MOBILE_ALLOCATION_T(Expr1,Expr2)
#define yNEqF_GPRS_MOBILE_ALLOCATION_T(Expr1,Expr2)  ( ! yEq_GPRS_MOBILE_ALLOCATION_T(Expr1,Expr2) )
#ifndef ANY_GPRS_MOBILE_ALLOCATION_T
#define ANY_GPRS_MOBILE_ALLOCATION_T yMake_GPRS_MOBILE_ALLOCATION_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_RFL_NUMBER_LIST_T, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_MAC_MA_BITMAP_T, ANY_ARFCN_INDEX_LIST_T)
#endif
#define z0SC3_copy(P)  P

extern void yAss_DIRECT_ENCODING_1_T XPP((DIRECT_ENCODING_1_T *,
  DIRECT_ENCODING_1_T, int));
#define yAssF_DIRECT_ENCODING_1_T(V,E,A)  yAss_DIRECT_ENCODING_1_T(&(V),E,A)
#define yEqF_DIRECT_ENCODING_1_T(Expr1,Expr2)  yEq_DIRECT_ENCODING_1_T(Expr1,Expr2)
#define yNEqF_DIRECT_ENCODING_1_T(Expr1,Expr2)  ( ! yEq_DIRECT_ENCODING_1_T(Expr1,Expr2) )
#ifndef ANY_DIRECT_ENCODING_1_T
#define ANY_DIRECT_ENCODING_1_T yMake_DIRECT_ENCODING_1_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_GPRS_MOBILE_ALLOCATION_T)
#endif
#define z0SD3_copy(P)  P

extern void yAss_RFL_ARR_T XPP((RFL_ARR_T, RFL_ARR_T, int));
#define yAssF_RFL_ARR_T(V,E,A)  yAss_RFL_ARR_T(V,E,A)
#define yEqF_RFL_ARR_T(Expr1,Expr2)  yEq_RFL_ARR_T(Expr1,Expr2)
#define yNEqF_RFL_ARR_T(Expr1,Expr2)  ( ! yEq_RFL_ARR_T(Expr1,Expr2) )
#define yTstI_RFL_ARR_T(yExpr)  yExpr
#ifndef ANY_RFL_ARR_T
#define ANY_RFL_ARR_T
#endif
#define z0SE5_copy(P)  P

extern void yAss_DIRECT_ENCODING_2_T XPP((DIRECT_ENCODING_2_T *,
  DIRECT_ENCODING_2_T, int));
#define yAssF_DIRECT_ENCODING_2_T(V,E,A)  yAss_DIRECT_ENCODING_2_T(&(V),E,A)
#define yEqF_DIRECT_ENCODING_2_T(Expr1,Expr2)  yEq_DIRECT_ENCODING_2_T(Expr1,Expr2)
#define yNEqF_DIRECT_ENCODING_2_T(Expr1,Expr2)  ( ! yEq_DIRECT_ENCODING_2_T(Expr1,Expr2) )
#ifndef ANY_DIRECT_ENCODING_2_T
#define ANY_DIRECT_ENCODING_2_T yMake_DIRECT_ENCODING_2_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_RFL_ARR_T)
#endif
#define z0SF3_copy(P)  P

extern void yAss_FREQ_PARS_T XPP((FREQ_PARS_T *, FREQ_PARS_T, int));
#define yAssF_FREQ_PARS_T(V,E,A)  yAss_FREQ_PARS_T(&(V),E,A)
#define yEqF_FREQ_PARS_T(Expr1,Expr2)  yEq_FREQ_PARS_T(Expr1,Expr2)
#define yNEqF_FREQ_PARS_T(Expr1,Expr2)  ( ! yEq_FREQ_PARS_T(Expr1,Expr2) )
#ifndef ANY_FREQ_PARS_T
#define ANY_FREQ_PARS_T yMake_FREQ_PARS_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_z_ctypes_8_UnsignedShortInt, ANY_INDIRECT_ENCODING_T, \
  ANY_DIRECT_ENCODING_1_T, ANY_DIRECT_ENCODING_2_T)
#endif
#define z0SG3_copy(P)  P

#define yAssF_GAMMA_VALUE_T(V,E,A)  V = E
#define yEqF_GAMMA_VALUE_T(Expr1,Expr2)  yEq_GAMMA_VALUE_T(Expr1,Expr2)
#define yNEqF_GAMMA_VALUE_T(Expr1,Expr2)  ( ! yEq_GAMMA_VALUE_T(Expr1,Expr2) )
#ifndef ANY_GAMMA_VALUE_T
#define ANY_GAMMA_VALUE_T yMake_GAMMA_VALUE_T(ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0SH3_copy(P)  P

extern void yAss_GAMMA_VALUE_ARR_T XPP((GAMMA_VALUE_ARR_T, GAMMA_VALUE_ARR_T,
  int));
#define yAssF_GAMMA_VALUE_ARR_T(V,E,A)  yAss_GAMMA_VALUE_ARR_T(V,E,A)
#define yEqF_GAMMA_VALUE_ARR_T(Expr1,Expr2)  yEq_GAMMA_VALUE_ARR_T(Expr1,Expr2)
#define yNEqF_GAMMA_VALUE_ARR_T(Expr1,Expr2)  ( ! yEq_GAMMA_VALUE_ARR_T(Expr1,Expr2) )
#define yTstI_GAMMA_VALUE_ARR_T(yExpr)  yExpr
#ifndef ANY_GAMMA_VALUE_ARR_T
#define ANY_GAMMA_VALUE_ARR_T
#endif
#define z0SI5_copy(P)  P

extern void yAss_POWER_CTRL_PARAMS_T XPP((POWER_CTRL_PARAMS_T *,
  POWER_CTRL_PARAMS_T, int));
#define yAssF_POWER_CTRL_PARAMS_T(V,E,A)  yAss_POWER_CTRL_PARAMS_T(&(V),E,A)
#define yEqF_POWER_CTRL_PARAMS_T(Expr1,Expr2)  yEq_POWER_CTRL_PARAMS_T(Expr1,Expr2)
#define yNEqF_POWER_CTRL_PARAMS_T(Expr1,Expr2)  ( ! yEq_POWER_CTRL_PARAMS_T(Expr1,Expr2) )
#ifndef ANY_POWER_CTRL_PARAMS_T
#define ANY_POWER_CTRL_PARAMS_T yMake_POWER_CTRL_PARAMS_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_GAMMA_VALUE_ARR_T)
#endif
#define z0SJ3_copy(P)  P

#define yAssF_MEAS_MAPPING_T(V,E,A)  V = E
#define yEqF_MEAS_MAPPING_T(Expr1,Expr2)  yEq_MEAS_MAPPING_T(Expr1,Expr2)
#define yNEqF_MEAS_MAPPING_T(Expr1,Expr2)  ( ! yEq_MEAS_MAPPING_T(Expr1,Expr2) )
#ifndef ANY_MEAS_MAPPING_T
#define ANY_MEAS_MAPPING_T yMake_MEAS_MAPPING_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_START_FRAME_NUMBER_T)
#endif
#define z0SK3_copy(P)  P

extern void yAss_MAC_MS_PAR_IMEI_T XPP((MAC_MS_PAR_IMEI_T *, MAC_MS_PAR_IMEI_T,
  int));
#define yAssF_MAC_MS_PAR_IMEI_T(V,E,A)  yAss_MAC_MS_PAR_IMEI_T(&(V),E,A)
#define yEqF_MAC_MS_PAR_IMEI_T(Expr1,Expr2)  yEq_MAC_MS_PAR_IMEI_T(Expr1,Expr2)
#define yNEqF_MAC_MS_PAR_IMEI_T(Expr1,Expr2)  ( ! yEq_MAC_MS_PAR_IMEI_T(Expr1,Expr2) )
#ifndef ANY_MAC_MS_PAR_IMEI_T
#define ANY_MAC_MS_PAR_IMEI_T yMake_MAC_MS_PAR_IMEI_T(ANY_SDL_Octet, \
  ANY_MAC_MS_PAR_IMEI_ARR_T)
#endif
#define z0SL3_copy(P)  P

extern void yAss_IMEISV_VALUE_ARR_T XPP((IMEISV_VALUE_ARR_T,
  IMEISV_VALUE_ARR_T, int));
#define yAssF_IMEISV_VALUE_ARR_T(V,E,A)  yAss_IMEISV_VALUE_ARR_T(V,E,A)
#define yEqF_IMEISV_VALUE_ARR_T(Expr1,Expr2)  yEq_IMEISV_VALUE_ARR_T(Expr1,Expr2)
#define yNEqF_IMEISV_VALUE_ARR_T(Expr1,Expr2)  ( ! yEq_IMEISV_VALUE_ARR_T(Expr1,Expr2) )
#define yTstI_IMEISV_VALUE_ARR_T(yExpr)  yExpr
#ifndef ANY_IMEISV_VALUE_ARR_T
#define ANY_IMEISV_VALUE_ARR_T
#endif
#define z0SM5_copy(P)  P

extern void yAss_MS_IDENTITY_IMEISV_T XPP((MS_IDENTITY_IMEISV_T *,
  MS_IDENTITY_IMEISV_T, int));
#define yAssF_MS_IDENTITY_IMEISV_T(V,E,A)  yAss_MS_IDENTITY_IMEISV_T(&(V),E,A)
#define yEqF_MS_IDENTITY_IMEISV_T(Expr1,Expr2)  yEq_MS_IDENTITY_IMEISV_T(Expr1,Expr2)
#define yNEqF_MS_IDENTITY_IMEISV_T(Expr1,Expr2)  ( ! yEq_MS_IDENTITY_IMEISV_T(Expr1,Expr2) )
#ifndef ANY_MS_IDENTITY_IMEISV_T
#define ANY_MS_IDENTITY_IMEISV_T yMake_MS_IDENTITY_IMEISV_T(ANY_IMEISV_VALUE_ARR_T)
#endif
#define z0SN3_copy(P)  P

extern void yAss_MS_IDENTITY_T XPP((MS_IDENTITY_T *, MS_IDENTITY_T, int));
#define yAssF_MS_IDENTITY_T(V,E,A)  yAss_MS_IDENTITY_T(&(V),E,A)
#define yEqF_MS_IDENTITY_T(Expr1,Expr2)  yEq_MS_IDENTITY_T(Expr1,Expr2)
#define yNEqF_MS_IDENTITY_T(Expr1,Expr2)  ( ! yEq_MS_IDENTITY_T(Expr1,Expr2) )
#ifndef ANY_MS_IDENTITY_T
#define ANY_MS_IDENTITY_T yMake_MS_IDENTITY_T(ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_MAC_MS_PAR_IMEI_T, ANY_MS_IDENTITY_IMEISV_T, ANY_IMSI_T, ANY_P_TMSI_T, \
  ANY_TMSI_T)
#endif
#define z0SO3_copy(P)  P

extern void yAss_RR_CON_EST_TYPE_T XPP((RR_CON_EST_TYPE_T *, RR_CON_EST_TYPE_T,
  int));
#define yAssF_RR_CON_EST_TYPE_T(V,E,A)  yAss_RR_CON_EST_TYPE_T(&(V),E,A)
#define yEqF_RR_CON_EST_TYPE_T(Expr1,Expr2)  yEq_RR_CON_EST_TYPE_T(Expr1,Expr2)
#define yNEqF_RR_CON_EST_TYPE_T(Expr1,Expr2)  ( ! yEq_RR_CON_EST_TYPE_T(Expr1,Expr2) )
#ifndef ANY_RR_CON_EST_TYPE_T
#define ANY_RR_CON_EST_TYPE_T yMake_RR_CON_EST_TYPE_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_MS_IDENTITY_T, ANY_TMSI_T, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet)
#endif
#define z0SP3_copy(P)  P

extern void yAss_TBF_CON_EST_TYPE_T XPP((TBF_CON_EST_TYPE_T *,
  TBF_CON_EST_TYPE_T, int));
#define yAssF_TBF_CON_EST_TYPE_T(V,E,A)  yAss_TBF_CON_EST_TYPE_T(&(V),E,A)
#define yEqF_TBF_CON_EST_TYPE_T(Expr1,Expr2)  yEq_TBF_CON_EST_TYPE_T(Expr1,Expr2)
#define yNEqF_TBF_CON_EST_TYPE_T(Expr1,Expr2)  ( ! yEq_TBF_CON_EST_TYPE_T(Expr1,Expr2) )
#ifndef ANY_TBF_CON_EST_TYPE_T
#define ANY_TBF_CON_EST_TYPE_T yMake_TBF_CON_EST_TYPE_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_P_TMSI_T, ANY_MS_IDENTITY_T)
#endif
#define z0SQ3_copy(P)  P

#define yAssF_GLOBAL_POWER_CTRL_PARAMS_T(V,E,A)  V = E
#define yEqF_GLOBAL_POWER_CTRL_PARAMS_T(Expr1,Expr2)  yEq_GLOBAL_POWER_CTRL_PARAMS_T(Expr1,Expr2)
#define yNEqF_GLOBAL_POWER_CTRL_PARAMS_T(Expr1,Expr2)  ( ! yEq_GLOBAL_POWER_CTRL_PARAMS_T(Expr1,Expr2) )
#ifndef ANY_GLOBAL_POWER_CTRL_PARAMS_T
#define ANY_GLOBAL_POWER_CTRL_PARAMS_T yMake_GLOBAL_POWER_CTRL_PARAMS_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0SR3_copy(P)  P

extern void yAss_PERSIST_LEVEL_T XPP((PERSIST_LEVEL_T, PERSIST_LEVEL_T, int));
#define yAssF_PERSIST_LEVEL_T(V,E,A)  yAss_PERSIST_LEVEL_T(V,E,A)
#define yEqF_PERSIST_LEVEL_T(Expr1,Expr2)  yEq_PERSIST_LEVEL_T(Expr1,Expr2)
#define yNEqF_PERSIST_LEVEL_T(Expr1,Expr2)  ( ! yEq_PERSIST_LEVEL_T(Expr1,Expr2) )
#define yTstI_PERSIST_LEVEL_T(yExpr)  yExpr
#ifndef ANY_PERSIST_LEVEL_T
#define ANY_PERSIST_LEVEL_T
#endif
#define z0SS5_copy(P)  P

extern void yAss_MAX_RETRANS_T XPP((MAX_RETRANS_T, MAX_RETRANS_T, int));
#define yAssF_MAX_RETRANS_T(V,E,A)  yAss_MAX_RETRANS_T(V,E,A)
#define yEqF_MAX_RETRANS_T(Expr1,Expr2)  yEq_MAX_RETRANS_T(Expr1,Expr2)
#define yNEqF_MAX_RETRANS_T(Expr1,Expr2)  ( ! yEq_MAX_RETRANS_T(Expr1,Expr2) )
#define yTstI_MAX_RETRANS_T(yExpr)  yExpr
#ifndef ANY_MAX_RETRANS_T
#define ANY_MAX_RETRANS_T
#endif
#define z0ST5_copy(P)  P

extern void yAss_PRACH_CTRL_PARAMETERS_T XPP((PRACH_CTRL_PARAMETERS_T *,
  PRACH_CTRL_PARAMETERS_T, int));
#define yAssF_PRACH_CTRL_PARAMETERS_T(V,E,A)  yAss_PRACH_CTRL_PARAMETERS_T(&(V),E,A)
#define yEqF_PRACH_CTRL_PARAMETERS_T(Expr1,Expr2)  yEq_PRACH_CTRL_PARAMETERS_T(Expr1,Expr2)
#define yNEqF_PRACH_CTRL_PARAMETERS_T(Expr1,Expr2)  ( ! yEq_PRACH_CTRL_PARAMETERS_T(Expr1,Expr2) )
#ifndef ANY_PRACH_CTRL_PARAMETERS_T
#define ANY_PRACH_CTRL_PARAMETERS_T yMake_PRACH_CTRL_PARAMETERS_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_MAX_RETRANS_T, ANY_SDL_Boolean, \
  ANY_PERSIST_LEVEL_T)
#endif
#define z0SU3_copy(P)  P

#define yAssF_SERVING_CELL_PARS_T(V,E,A)  V = E
#define yEqF_SERVING_CELL_PARS_T(Expr1,Expr2)  yEq_SERVING_CELL_PARS_T(Expr1,Expr2)
#define yNEqF_SERVING_CELL_PARS_T(Expr1,Expr2)  ( ! yEq_SERVING_CELL_PARS_T(Expr1,Expr2) )
#ifndef ANY_SERVING_CELL_PARS_T
#define ANY_SERVING_CELL_PARS_T yMake_SERVING_CELL_PARS_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_HCS_PARS_T, ANY_SDL_Octet)
#endif
#define z0SV3_copy(P)  P

#define yAssF_GENERAL_CELL_SEL_PARS_T(V,E,A)  V = E
#define yEqF_GENERAL_CELL_SEL_PARS_T(Expr1,Expr2)  yEq_GENERAL_CELL_SEL_PARS_T(Expr1,Expr2)
#define yNEqF_GENERAL_CELL_SEL_PARS_T(Expr1,Expr2)  ( ! yEq_GENERAL_CELL_SEL_PARS_T(Expr1,Expr2) )
#ifndef ANY_GENERAL_CELL_SEL_PARS_T
#define ANY_GENERAL_CELL_SEL_PARS_T yMake_GENERAL_CELL_SEL_PARS_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0SW3_copy(P)  P

#define yAssF_NEIGHBOUR_LIST_T(V,E,A)  V = E
#define yEqF_NEIGHBOUR_LIST_T(Expr1,Expr2)  yEq_NEIGHBOUR_LIST_T(Expr1,Expr2)
#define yNEqF_NEIGHBOUR_LIST_T(Expr1,Expr2)  ( ! yEq_NEIGHBOUR_LIST_T(Expr1,Expr2) )
#ifndef ANY_NEIGHBOUR_LIST_T
#define ANY_NEIGHBOUR_LIST_T yMake_NEIGHBOUR_LIST_T(ANY_SDL_Octet, \
  ANY_CELL_SELECTION_T)
#endif
#define z0SX3_copy(P)  P

#define yAssF_FREQ_DIFF_SET_T(V,E,A)  V = E
#define yEqF_FREQ_DIFF_SET_T(Expr1,Expr2)  yEq_FREQ_DIFF_SET_T(Expr1,Expr2)
#define yNEqF_FREQ_DIFF_SET_T(Expr1,Expr2)  ( ! yEq_FREQ_DIFF_SET_T(Expr1,Expr2) )
#ifndef ANY_FREQ_DIFF_SET_T
#define ANY_FREQ_DIFF_SET_T yMake_FREQ_DIFF_SET_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0SY3_copy(P)  P

#define yAssF_NEIGHBOUR_PAR_SET_T(V,E,A)  V = E
#define yEqF_NEIGHBOUR_PAR_SET_T(Expr1,Expr2)  yEq_NEIGHBOUR_PAR_SET_T(Expr1,Expr2)
#define yNEqF_NEIGHBOUR_PAR_SET_T(Expr1,Expr2)  ( ! yEq_NEIGHBOUR_PAR_SET_T(Expr1,Expr2) )
#ifndef ANY_NEIGHBOUR_PAR_SET_T
#define ANY_NEIGHBOUR_PAR_SET_T yMake_NEIGHBOUR_PAR_SET_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SI13_PBCCH_LOCATION_T, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0SZ03_copy(P)  P

#define yAssF_CHANNEL_GROUP_T(V,E,A)  V = E
#define yEqF_CHANNEL_GROUP_T(Expr1,Expr2)  yEq_CHANNEL_GROUP_T(Expr1,Expr2)
#define yNEqF_CHANNEL_GROUP_T(Expr1,Expr2)  ( ! yEq_CHANNEL_GROUP_T(Expr1,Expr2) )
#ifndef ANY_CHANNEL_GROUP_T
#define ANY_CHANNEL_GROUP_T yMake_CHANNEL_GROUP_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0T03_copy(P)  P

#define yAssF_EXT_MEAS_PARS_T(V,E,A)  V = E
#define yEqF_EXT_MEAS_PARS_T(Expr1,Expr2)  yEq_EXT_MEAS_PARS_T(Expr1,Expr2)
#define yNEqF_EXT_MEAS_PARS_T(Expr1,Expr2)  ( ! yEq_EXT_MEAS_PARS_T(Expr1,Expr2) )
#ifndef ANY_EXT_MEAS_PARS_T
#define ANY_EXT_MEAS_PARS_T yMake_EXT_MEAS_PARS_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_EXT_FREQ_LIST_PTR)
#endif
#define z0T13_copy(P)  P

#define yAssF_GPRS_POWER_CTRL_PARAMS_T(V,E,A)  V = E
#define yEqF_GPRS_POWER_CTRL_PARAMS_T(Expr1,Expr2)  yEq_GPRS_POWER_CTRL_PARAMS_T(Expr1,Expr2)
#define yNEqF_GPRS_POWER_CTRL_PARAMS_T(Expr1,Expr2)  ( ! yEq_GPRS_POWER_CTRL_PARAMS_T(Expr1,Expr2) )
#ifndef ANY_GPRS_POWER_CTRL_PARAMS_T
#define ANY_GPRS_POWER_CTRL_PARAMS_T yMake_GPRS_POWER_CTRL_PARAMS_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0T23_copy(P)  P

#define yAssF_PBCCH_DESCR_T(V,E,A)  V = E
#define yEqF_PBCCH_DESCR_T(Expr1,Expr2)  yEq_PBCCH_DESCR_T(Expr1,Expr2)
#define yNEqF_PBCCH_DESCR_T(Expr1,Expr2)  ( ! yEq_PBCCH_DESCR_T(Expr1,Expr2) )
#ifndef ANY_PBCCH_DESCR_T
#define ANY_PBCCH_DESCR_T yMake_PBCCH_DESCR_T(ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Octet)
#endif
#define z0T33_copy(P)  P

#define yAssF_GPRS_CELL_OPTIONS_T(V,E,A)  V = E
#define yEqF_GPRS_CELL_OPTIONS_T(Expr1,Expr2)  yEq_GPRS_CELL_OPTIONS_T(Expr1,Expr2)
#define yNEqF_GPRS_CELL_OPTIONS_T(Expr1,Expr2)  ( ! yEq_GPRS_CELL_OPTIONS_T(Expr1,Expr2) )
#ifndef ANY_GPRS_CELL_OPTIONS_T
#define ANY_GPRS_CELL_OPTIONS_T yMake_GPRS_CELL_OPTIONS_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0T403_copy(P)  P

#define yAssF_PCCCH_ORAGANIZATION_PARAMETERS_T(V,E,A)  V = E
#define yEqF_PCCCH_ORAGANIZATION_PARAMETERS_T(Expr1,Expr2)  yEq_PCCCH_ORAGANIZATION_PARAMETERS_T(Expr1,Expr2)
#define yNEqF_PCCCH_ORAGANIZATION_PARAMETERS_T(Expr1,Expr2)  ( ! yEq_PCCCH_ORAGANIZATION_PARAMETERS_T(Expr1,Expr2) )
#ifndef ANY_PCCCH_ORAGANIZATION_PARAMETERS_T
#define ANY_PCCCH_ORAGANIZATION_PARAMETERS_T yMake_PCCCH_ORAGANIZATION_PARAMETERS_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0T53_copy(P)  P

extern void yAss_OCTET_2_ARR_T XPP((OCTET_2_ARR_T, OCTET_2_ARR_T, int));
#define yAssF_OCTET_2_ARR_T(V,E,A)  yAss_OCTET_2_ARR_T(V,E,A)
#define yEqF_OCTET_2_ARR_T(Expr1,Expr2)  yEq_OCTET_2_ARR_T(Expr1,Expr2)
#define yNEqF_OCTET_2_ARR_T(Expr1,Expr2)  ( ! yEq_OCTET_2_ARR_T(Expr1,Expr2) )
#define yTstI_OCTET_2_ARR_T(yExpr)  yExpr
#ifndef ANY_OCTET_2_ARR_T
#define ANY_OCTET_2_ARR_T
#endif
#define z0T65_copy(P)  P

extern void yAss_LOCATION_AREA_ID_T XPP((LOCATION_AREA_ID_T *,
  LOCATION_AREA_ID_T, int));
#define yAssF_LOCATION_AREA_ID_T(V,E,A)  yAss_LOCATION_AREA_ID_T(&(V),E,A)
#define yEqF_LOCATION_AREA_ID_T(Expr1,Expr2)  yEq_LOCATION_AREA_ID_T(Expr1,Expr2)
#define yNEqF_LOCATION_AREA_ID_T(Expr1,Expr2)  ( ! yEq_LOCATION_AREA_ID_T(Expr1,Expr2) )
#ifndef ANY_LOCATION_AREA_ID_T
#define ANY_LOCATION_AREA_ID_T yMake_LOCATION_AREA_ID_T(ANY_OCTET_2_ARR_T, \
  ANY_OCTET_2_ARR_T, ANY_SDL_Octet)
#endif
#define z0T73_copy(P)  P

extern void yAss_CELL_IDENTIFICATION_T XPP((CELL_IDENTIFICATION_T *,
  CELL_IDENTIFICATION_T, int));
#define yAssF_CELL_IDENTIFICATION_T(V,E,A)  yAss_CELL_IDENTIFICATION_T(&(V),E,A)
#define yEqF_CELL_IDENTIFICATION_T(Expr1,Expr2)  yEq_CELL_IDENTIFICATION_T(Expr1,Expr2)
#define yNEqF_CELL_IDENTIFICATION_T(Expr1,Expr2)  ( ! yEq_CELL_IDENTIFICATION_T(Expr1,Expr2) )
#ifndef ANY_CELL_IDENTIFICATION_T
#define ANY_CELL_IDENTIFICATION_T yMake_CELL_IDENTIFICATION_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_z_ctypes_8_UnsignedShortInt, ANY_LOCATION_AREA_ID_T)
#endif
#define z0T83_copy(P)  P

#define yAssF_NON_GPRS_CELL_OPT_T(V,E,A)  V = E
#define yEqF_NON_GPRS_CELL_OPT_T(Expr1,Expr2)  yEq_NON_GPRS_CELL_OPT_T(Expr1,Expr2)
#define yNEqF_NON_GPRS_CELL_OPT_T(Expr1,Expr2)  ( ! yEq_NON_GPRS_CELL_OPT_T(Expr1,Expr2) )
#ifndef ANY_NON_GPRS_CELL_OPT_T
#define ANY_NON_GPRS_CELL_OPT_T yMake_NON_GPRS_CELL_OPT_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0T903_copy(P)  P

extern void yAss_REFERENCED_FREQ_LIST_T XPP((REFERENCED_FREQ_LIST_T *,
  REFERENCED_FREQ_LIST_T, int));
#define yAssF_REFERENCED_FREQ_LIST_T(V,E,A)  yAss_REFERENCED_FREQ_LIST_T(&(V),E,A)
#define yEqF_REFERENCED_FREQ_LIST_T(Expr1,Expr2)  yEq_REFERENCED_FREQ_LIST_T(Expr1,Expr2)
#define yNEqF_REFERENCED_FREQ_LIST_T(Expr1,Expr2)  ( ! yEq_REFERENCED_FREQ_LIST_T(Expr1,Expr2) )
#ifndef ANY_REFERENCED_FREQ_LIST_T
#define ANY_REFERENCED_FREQ_LIST_T yMake_REFERENCED_FREQ_LIST_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_RFL_ARR_T)
#endif
#define z0TA3_copy(P)  P

#define yAssF_PCCCH_CARRIERS_T(V,E,A)  V = E
#define yEqF_PCCCH_CARRIERS_T(Expr1,Expr2)  yEq_PCCCH_CARRIERS_T(Expr1,Expr2)
#define yNEqF_PCCCH_CARRIERS_T(Expr1,Expr2)  ( ! yEq_PCCCH_CARRIERS_T(Expr1,Expr2) )
#ifndef ANY_PCCCH_CARRIERS_T
#define ANY_PCCCH_CARRIERS_T yMake_PCCCH_CARRIERS_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_SDL_Octet)
#endif
#define z0TB3_copy(P)  P

extern void yAss_PCCCH_CARRIERS_ARR_T XPP((PCCCH_CARRIERS_ARR_T,
  PCCCH_CARRIERS_ARR_T, int));
#define yAssF_PCCCH_CARRIERS_ARR_T(V,E,A)  yAss_PCCCH_CARRIERS_ARR_T(V,E,A)
#define yEqF_PCCCH_CARRIERS_ARR_T(Expr1,Expr2)  yEq_PCCCH_CARRIERS_ARR_T(Expr1,Expr2)
#define yNEqF_PCCCH_CARRIERS_ARR_T(Expr1,Expr2)  ( ! yEq_PCCCH_CARRIERS_ARR_T(Expr1,Expr2) )
#define yTstI_PCCCH_CARRIERS_ARR_T(yExpr)  yExpr
#ifndef ANY_PCCCH_CARRIERS_ARR_T
#define ANY_PCCCH_CARRIERS_ARR_T
#endif
#define z0TC5_copy(P)  P

extern void yAss_NON_HOPPING_CARRIERS_T XPP((NON_HOPPING_CARRIERS_T *,
  NON_HOPPING_CARRIERS_T, int));
#define yAssF_NON_HOPPING_CARRIERS_T(V,E,A)  yAss_NON_HOPPING_CARRIERS_T(&(V),E,A)
#define yEqF_NON_HOPPING_CARRIERS_T(Expr1,Expr2)  yEq_NON_HOPPING_CARRIERS_T(Expr1,Expr2)
#define yNEqF_NON_HOPPING_CARRIERS_T(Expr1,Expr2)  ( ! yEq_NON_HOPPING_CARRIERS_T(Expr1,Expr2) )
#ifndef ANY_NON_HOPPING_CARRIERS_T
#define ANY_NON_HOPPING_CARRIERS_T yMake_NON_HOPPING_CARRIERS_T(ANY_SDL_Octet, \
  ANY_PCCCH_CARRIERS_ARR_T)
#endif
#define z0TD3_copy(P)  P

extern void yAss_HOPPING_CARRIERS_T XPP((HOPPING_CARRIERS_T *,
  HOPPING_CARRIERS_T, int));
#define yAssF_HOPPING_CARRIERS_T(V,E,A)  yAss_HOPPING_CARRIERS_T(&(V),E,A)
#define yEqF_HOPPING_CARRIERS_T(Expr1,Expr2)  yEq_HOPPING_CARRIERS_T(Expr1,Expr2)
#define yNEqF_HOPPING_CARRIERS_T(Expr1,Expr2)  ( ! yEq_HOPPING_CARRIERS_T(Expr1,Expr2) )
#ifndef ANY_HOPPING_CARRIERS_T
#define ANY_HOPPING_CARRIERS_T yMake_HOPPING_CARRIERS_T(ANY_SDL_Octet, \
  ANY_PCCCH_CARRIERS_ARR_T)
#endif
#define z0TE3_copy(P)  P

extern void yAss_PCCCH_DESCRIPTION_T XPP((PCCCH_DESCRIPTION_T *,
  PCCCH_DESCRIPTION_T, int));
#define yAssF_PCCCH_DESCRIPTION_T(V,E,A)  yAss_PCCCH_DESCRIPTION_T(&(V),E,A)
#define yEqF_PCCCH_DESCRIPTION_T(Expr1,Expr2)  yEq_PCCCH_DESCRIPTION_T(Expr1,Expr2)
#define yNEqF_PCCCH_DESCRIPTION_T(Expr1,Expr2)  ( ! yEq_PCCCH_DESCRIPTION_T(Expr1,Expr2) )
#ifndef ANY_PCCCH_DESCRIPTION_T
#define ANY_PCCCH_DESCRIPTION_T yMake_PCCCH_DESCRIPTION_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_NON_HOPPING_CARRIERS_T, \
  ANY_HOPPING_CARRIERS_T)
#endif
#define z0TF3_copy(P)  P

#define yAssF_SINGLE_BLOCK_ALLOC_T(V,E,A)  V = E
#define yEqF_SINGLE_BLOCK_ALLOC_T(Expr1,Expr2)  yEq_SINGLE_BLOCK_ALLOC_T(Expr1,Expr2)
#define yNEqF_SINGLE_BLOCK_ALLOC_T(Expr1,Expr2)  ( ! yEq_SINGLE_BLOCK_ALLOC_T(Expr1,Expr2) )
#ifndef ANY_SINGLE_BLOCK_ALLOC_T
#define ANY_SINGLE_BLOCK_ALLOC_T yMake_SINGLE_BLOCK_ALLOC_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_START_FRAME_NUMBER_T)
#endif
#define z0TG3_copy(P)  P

#define yAssF_USF_VALUE_T(V,E,A)  V = E
#define yEqF_USF_VALUE_T(Expr1,Expr2)  yEq_USF_VALUE_T(Expr1,Expr2)
#define yNEqF_USF_VALUE_T(Expr1,Expr2)  ( ! yEq_USF_VALUE_T(Expr1,Expr2) )
#ifndef ANY_USF_VALUE_T
#define ANY_USF_VALUE_T yMake_USF_VALUE_T(ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0TH3_copy(P)  P

extern void yAss_USF_VALUE_LIST_T XPP((USF_VALUE_LIST_T, USF_VALUE_LIST_T,
  int));
#define yAssF_USF_VALUE_LIST_T(V,E,A)  yAss_USF_VALUE_LIST_T(V,E,A)
#define yEqF_USF_VALUE_LIST_T(Expr1,Expr2)  yEq_USF_VALUE_LIST_T(Expr1,Expr2)
#define yNEqF_USF_VALUE_LIST_T(Expr1,Expr2)  ( ! yEq_USF_VALUE_LIST_T(Expr1,Expr2) )
#define yTstI_USF_VALUE_LIST_T(yExpr)  yExpr
#ifndef ANY_USF_VALUE_LIST_T
#define ANY_USF_VALUE_LIST_T
#endif
#define z0TI5_copy(P)  P

extern void yAss_DYNAMIC_ALLOC_T XPP((DYNAMIC_ALLOC_T *, DYNAMIC_ALLOC_T, int));
#define yAssF_DYNAMIC_ALLOC_T(V,E,A)  yAss_DYNAMIC_ALLOC_T(&(V),E,A)
#define yEqF_DYNAMIC_ALLOC_T(Expr1,Expr2)  yEq_DYNAMIC_ALLOC_T(Expr1,Expr2)
#define yNEqF_DYNAMIC_ALLOC_T(Expr1,Expr2)  ( ! yEq_DYNAMIC_ALLOC_T(Expr1,Expr2) )
#ifndef ANY_DYNAMIC_ALLOC_T
#define ANY_DYNAMIC_ALLOC_T yMake_DYNAMIC_ALLOC_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Boolean, ANY_START_FRAME_NUMBER_T, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_USF_VALUE_LIST_T, \
  ANY_POWER_CTRL_PARAMS_T)
#endif
#define z0TJ03_copy(P)  P

#define yAssF_TIMESLOT_VALUES_T(V,E,A)  V = E
#define yEqF_TIMESLOT_VALUES_T(Expr1,Expr2)  yEq_TIMESLOT_VALUES_T(Expr1,Expr2)
#define yNEqF_TIMESLOT_VALUES_T(Expr1,Expr2)  ( ! yEq_TIMESLOT_VALUES_T(Expr1,Expr2) )
#ifndef ANY_TIMESLOT_VALUES_T
#define ANY_TIMESLOT_VALUES_T yMake_TIMESLOT_VALUES_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet)
#endif
#define z0TK3_copy(P)  P

extern void yAss_TIMESLOT_VALUES_ARR_T XPP((TIMESLOT_VALUES_ARR_T,
  TIMESLOT_VALUES_ARR_T, int));
#define yAssF_TIMESLOT_VALUES_ARR_T(V,E,A)  yAss_TIMESLOT_VALUES_ARR_T(V,E,A)
#define yEqF_TIMESLOT_VALUES_ARR_T(Expr1,Expr2)  yEq_TIMESLOT_VALUES_ARR_T(Expr1,Expr2)
#define yNEqF_TIMESLOT_VALUES_ARR_T(Expr1,Expr2)  ( ! yEq_TIMESLOT_VALUES_ARR_T(Expr1,Expr2) )
#define yTstI_TIMESLOT_VALUES_ARR_T(yExpr)  yExpr
#ifndef ANY_TIMESLOT_VALUES_ARR_T
#define ANY_TIMESLOT_VALUES_ARR_T
#endif
#define z0TL5_copy(P)  P

extern void yAss_CHANNEL_QUALITY_REP_T XPP((CHANNEL_QUALITY_REP_T *,
  CHANNEL_QUALITY_REP_T, int));
#define yAssF_CHANNEL_QUALITY_REP_T(V,E,A)  yAss_CHANNEL_QUALITY_REP_T(&(V),E,A)
#define yEqF_CHANNEL_QUALITY_REP_T(Expr1,Expr2)  yEq_CHANNEL_QUALITY_REP_T(Expr1,Expr2)
#define yNEqF_CHANNEL_QUALITY_REP_T(Expr1,Expr2)  ( ! yEq_CHANNEL_QUALITY_REP_T(Expr1,Expr2) )
#ifndef ANY_CHANNEL_QUALITY_REP_T
#define ANY_CHANNEL_QUALITY_REP_T yMake_CHANNEL_QUALITY_REP_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_TS_BEP_ARR_T, ANY_TIMESLOT_VALUES_ARR_T)
#endif
#define z0TM3_copy(P)  P

#define yAssF_LLC_PDU_T_T(V,E,A)  V = E
#define yEqF_LLC_PDU_T_T(Expr1,Expr2)  yEq_LLC_PDU_T_T(Expr1,Expr2)
#define yNEqF_LLC_PDU_T_T(Expr1,Expr2)  ( ! yEq_LLC_PDU_T_T(Expr1,Expr2) )
#ifndef ANY_LLC_PDU_T_T
#define ANY_LLC_PDU_T_T yMake_LLC_PDU_T_T(ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_z_ctypes_6_ShortInt)
#endif
#define z0TN3_copy(P)  P

#define yAssF_CHANNEL_REQUEST_DESCR_T(V,E,A)  V = E
#define yEqF_CHANNEL_REQUEST_DESCR_T(Expr1,Expr2)  yEq_CHANNEL_REQUEST_DESCR_T(Expr1,Expr2)
#define yNEqF_CHANNEL_REQUEST_DESCR_T(Expr1,Expr2)  ( ! yEq_CHANNEL_REQUEST_DESCR_T(Expr1,Expr2) )
#ifndef ANY_CHANNEL_REQUEST_DESCR_T
#define ANY_CHANNEL_REQUEST_DESCR_T yMake_CHANNEL_REQUEST_DESCR_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_LLC_PDU_T_T, \
  ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0TO3_copy(P)  P

#define yAssF_NC_MEAS_LIST_T(V,E,A)  V = E
#define yEqF_NC_MEAS_LIST_T(Expr1,Expr2)  yEq_NC_MEAS_LIST_T(Expr1,Expr2)
#define yNEqF_NC_MEAS_LIST_T(Expr1,Expr2)  ( ! yEq_NC_MEAS_LIST_T(Expr1,Expr2) )
#ifndef ANY_NC_MEAS_LIST_T
#define ANY_NC_MEAS_LIST_T yMake_NC_MEAS_LIST_T(ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0TP3_copy(P)  P

extern void yAss_NC_MEAS_LIST_ARR_T XPP((NC_MEAS_LIST_ARR_T,
  NC_MEAS_LIST_ARR_T, int));
#define yAssF_NC_MEAS_LIST_ARR_T(V,E,A)  yAss_NC_MEAS_LIST_ARR_T(V,E,A)
#define yEqF_NC_MEAS_LIST_ARR_T(Expr1,Expr2)  yEq_NC_MEAS_LIST_ARR_T(Expr1,Expr2)
#define yNEqF_NC_MEAS_LIST_ARR_T(Expr1,Expr2)  ( ! yEq_NC_MEAS_LIST_ARR_T(Expr1,Expr2) )
#define yTstI_NC_MEAS_LIST_ARR_T(yExpr)  yExpr
#ifndef ANY_NC_MEAS_LIST_ARR_T
#define ANY_NC_MEAS_LIST_ARR_T
#endif
#define z0TQ5_copy(P)  P

extern void yAss_NC_MEAS_REPORT_T XPP((NC_MEAS_REPORT_T *, NC_MEAS_REPORT_T,
  int));
#define yAssF_NC_MEAS_REPORT_T(V,E,A)  yAss_NC_MEAS_REPORT_T(&(V),E,A)
#define yEqF_NC_MEAS_REPORT_T(Expr1,Expr2)  yEq_NC_MEAS_REPORT_T(Expr1,Expr2)
#define yNEqF_NC_MEAS_REPORT_T(Expr1,Expr2)  ( ! yEq_NC_MEAS_REPORT_T(Expr1,Expr2) )
#ifndef ANY_NC_MEAS_REPORT_T
#define ANY_NC_MEAS_REPORT_T yMake_NC_MEAS_REPORT_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_NC_MEAS_LIST_ARR_T)
#endif
#define z0TR3_copy(P)  P

#define yAssF_EXT_MEAS_LIST_T(V,E,A)  V = E
#define yEqF_EXT_MEAS_LIST_T(Expr1,Expr2)  yEq_EXT_MEAS_LIST_T(Expr1,Expr2)
#define yNEqF_EXT_MEAS_LIST_T(Expr1,Expr2)  ( ! yEq_EXT_MEAS_LIST_T(Expr1,Expr2) )
#ifndef ANY_EXT_MEAS_LIST_T
#define ANY_EXT_MEAS_LIST_T yMake_EXT_MEAS_LIST_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0TS3_copy(P)  P

extern void yAss_EXT_MEAS_LIST_ARR_T XPP((EXT_MEAS_LIST_ARR_T,
  EXT_MEAS_LIST_ARR_T, int));
#define yAssF_EXT_MEAS_LIST_ARR_T(V,E,A)  yAss_EXT_MEAS_LIST_ARR_T(V,E,A)
#define yEqF_EXT_MEAS_LIST_ARR_T(Expr1,Expr2)  yEq_EXT_MEAS_LIST_ARR_T(Expr1,Expr2)
#define yNEqF_EXT_MEAS_LIST_ARR_T(Expr1,Expr2)  ( ! yEq_EXT_MEAS_LIST_ARR_T(Expr1,Expr2) )
#define yTstI_EXT_MEAS_LIST_ARR_T(yExpr)  yExpr
#ifndef ANY_EXT_MEAS_LIST_ARR_T
#define ANY_EXT_MEAS_LIST_ARR_T
#endif
#define z0TT5_copy(P)  P

extern void yAss_EXT_MEAS_REPORT_T XPP((EXT_MEAS_REPORT_T *, EXT_MEAS_REPORT_T,
  int));
#define yAssF_EXT_MEAS_REPORT_T(V,E,A)  yAss_EXT_MEAS_REPORT_T(&(V),E,A)
#define yEqF_EXT_MEAS_REPORT_T(Expr1,Expr2)  yEq_EXT_MEAS_REPORT_T(Expr1,Expr2)
#define yNEqF_EXT_MEAS_REPORT_T(Expr1,Expr2)  ( ! yEq_EXT_MEAS_REPORT_T(Expr1,Expr2) )
#ifndef ANY_EXT_MEAS_REPORT_T
#define ANY_EXT_MEAS_REPORT_T yMake_EXT_MEAS_REPORT_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_TIMESLOT_VALUES_ARR_T, \
  ANY_EXT_MEAS_LIST_ARR_T)
#endif
#define z0TU3_copy(P)  P

#define yAssF_BA_USED_PSI3_CHANGE_MARK_T(V,E,A)  V = E
#define yEqF_BA_USED_PSI3_CHANGE_MARK_T(Expr1,Expr2)  yEq_BA_USED_PSI3_CHANGE_MARK_T(Expr1,Expr2)
#define yNEqF_BA_USED_PSI3_CHANGE_MARK_T(Expr1,Expr2)  ( ! yEq_BA_USED_PSI3_CHANGE_MARK_T(Expr1,Expr2) )
#ifndef ANY_BA_USED_PSI3_CHANGE_MARK_T
#define ANY_BA_USED_PSI3_CHANGE_MARK_T yMake_BA_USED_PSI3_CHANGE_MARK_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean)
#endif
#define z0TV3_copy(P)  P

#define yAssF_PACKET_ACCESS_REJECT_T(V,E,A)  V = E
#define yEqF_PACKET_ACCESS_REJECT_T(Expr1,Expr2)  yEq_PACKET_ACCESS_REJECT_T(Expr1,Expr2)
#define yNEqF_PACKET_ACCESS_REJECT_T(Expr1,Expr2)  ( ! yEq_PACKET_ACCESS_REJECT_T(Expr1,Expr2) )
#ifndef ANY_PACKET_ACCESS_REJECT_T
#define ANY_PACKET_ACCESS_REJECT_T yMake_PACKET_ACCESS_REJECT_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_REJECT_LIST_PTR)
#endif
#define z0TW3_copy(P)  P

extern void yAss_PACKET_CELL_CHANGE_ORDER_T XPP((PACKET_CELL_CHANGE_ORDER_T *,
  PACKET_CELL_CHANGE_ORDER_T, int));
#define yAssF_PACKET_CELL_CHANGE_ORDER_T(V,E,A)  yAss_PACKET_CELL_CHANGE_ORDER_T(&(V),E,A)
#define yEqF_PACKET_CELL_CHANGE_ORDER_T(Expr1,Expr2)  yEq_PACKET_CELL_CHANGE_ORDER_T(Expr1,Expr2)
#define yNEqF_PACKET_CELL_CHANGE_ORDER_T(Expr1,Expr2)  ( ! yEq_PACKET_CELL_CHANGE_ORDER_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CELL_CHANGE_ORDER_T
#define ANY_PACKET_CELL_CHANGE_ORDER_T yMake_PACKET_CELL_CHANGE_ORDER_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_z_ctypes_8_UnsignedShortInt, ANY_REF_ADDR_T, \
  ANY_SDL_Octet, ANY_NC_MEAS_PARS_T)
#endif
#define z0TX3_copy(P)  P

extern void yAss_REDUCED_MA_BITMAP_T XPP((REDUCED_MA_BITMAP_T,
  REDUCED_MA_BITMAP_T, int));
#define yAssF_REDUCED_MA_BITMAP_T(V,E,A)  yAss_REDUCED_MA_BITMAP_T(V,E,A)
#define yEqF_REDUCED_MA_BITMAP_T(Expr1,Expr2)  yEq_REDUCED_MA_BITMAP_T(Expr1,Expr2)
#define yNEqF_REDUCED_MA_BITMAP_T(Expr1,Expr2)  ( ! yEq_REDUCED_MA_BITMAP_T(Expr1,Expr2) )
#define yTstI_REDUCED_MA_BITMAP_T(yExpr)  yExpr
#ifndef ANY_REDUCED_MA_BITMAP_T
#define ANY_REDUCED_MA_BITMAP_T
#endif
#define z0TY5_copy(P)  P

#define yAssF_DL_ASSIGN_EGPRS_INFO_T(V,E,A)  V = E
#define yEqF_DL_ASSIGN_EGPRS_INFO_T(Expr1,Expr2)  yEq_DL_ASSIGN_EGPRS_INFO_T(Expr1,Expr2)
#define yNEqF_DL_ASSIGN_EGPRS_INFO_T(Expr1,Expr2)  ( ! yEq_DL_ASSIGN_EGPRS_INFO_T(Expr1,Expr2) )
#ifndef ANY_DL_ASSIGN_EGPRS_INFO_T
#define ANY_DL_ASSIGN_EGPRS_INFO_T yMake_DL_ASSIGN_EGPRS_INFO_T(ANY_SDL_Boolean, \
  ANY_RLC_WS_T, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0TZ3_copy(P)  P

extern void yAss_COMPACT_REDUCED_MA_T XPP((COMPACT_REDUCED_MA_T *,
  COMPACT_REDUCED_MA_T, int));
#define yAssF_COMPACT_REDUCED_MA_T(V,E,A)  yAss_COMPACT_REDUCED_MA_T(&(V),E,A)
#define yEqF_COMPACT_REDUCED_MA_T(Expr1,Expr2)  yEq_COMPACT_REDUCED_MA_T(Expr1,Expr2)
#define yNEqF_COMPACT_REDUCED_MA_T(Expr1,Expr2)  ( ! yEq_COMPACT_REDUCED_MA_T(Expr1,Expr2) )
#ifndef ANY_COMPACT_REDUCED_MA_T
#define ANY_COMPACT_REDUCED_MA_T yMake_COMPACT_REDUCED_MA_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_REDUCED_MA_BITMAP_T)
#endif
#define z0U03_copy(P)  P

extern void yAss_PACKET_DOWNLINK_ASSIGNMENT_T
  XPP((PACKET_DOWNLINK_ASSIGNMENT_T *, PACKET_DOWNLINK_ASSIGNMENT_T, int));
#define yAssF_PACKET_DOWNLINK_ASSIGNMENT_T(V,E,A)  yAss_PACKET_DOWNLINK_ASSIGNMENT_T(&(V),E,A)
#define yEqF_PACKET_DOWNLINK_ASSIGNMENT_T(Expr1,Expr2)  yEq_PACKET_DOWNLINK_ASSIGNMENT_T(Expr1,Expr2)
#define yNEqF_PACKET_DOWNLINK_ASSIGNMENT_T(Expr1,Expr2)  ( ! yEq_PACKET_DOWNLINK_ASSIGNMENT_T(Expr1,Expr2) )
#ifndef ANY_PACKET_DOWNLINK_ASSIGNMENT_T
#define ANY_PACKET_DOWNLINK_ASSIGNMENT_T yMake_PACKET_DOWNLINK_ASSIGNMENT_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_PERSIST_LEVEL_T, ANY_REF_ADDR_T, \
  ANY_z_ctypes_6_ShortInt, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_PACKET_TIMING_ADVANCE_T, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_FREQ_PARS_T, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_POWER_CTRL_PARAMS_T, ANY_START_FRAME_NUMBER_T, ANY_MEAS_MAPPING_T, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_DL_ASSIGN_EGPRS_INFO_T, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_COMPACT_REDUCED_MA_T)
#endif
#define z0U103_copy(P)  P

extern void yAss_PACKET_DL_DUMMY_CTRL_BLOCK_T
  XPP((PACKET_DL_DUMMY_CTRL_BLOCK_T *, PACKET_DL_DUMMY_CTRL_BLOCK_T, int));
#define yAssF_PACKET_DL_DUMMY_CTRL_BLOCK_T(V,E,A)  yAss_PACKET_DL_DUMMY_CTRL_BLOCK_T(&(V),E,A)
#define yEqF_PACKET_DL_DUMMY_CTRL_BLOCK_T(Expr1,Expr2)  yEq_PACKET_DL_DUMMY_CTRL_BLOCK_T(Expr1,Expr2)
#define yNEqF_PACKET_DL_DUMMY_CTRL_BLOCK_T(Expr1,Expr2)  ( ! yEq_PACKET_DL_DUMMY_CTRL_BLOCK_T(Expr1,Expr2) )
#ifndef ANY_PACKET_DL_DUMMY_CTRL_BLOCK_T
#define ANY_PACKET_DL_DUMMY_CTRL_BLOCK_T yMake_PACKET_DL_DUMMY_CTRL_BLOCK_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_PERSIST_LEVEL_T)
#endif
#define z0U23_copy(P)  P

#define yAssF_PACKET_MEAS_ORDER_T(V,E,A)  V = E
#define yEqF_PACKET_MEAS_ORDER_T(Expr1,Expr2)  yEq_PACKET_MEAS_ORDER_T(Expr1,Expr2)
#define yNEqF_PACKET_MEAS_ORDER_T(Expr1,Expr2)  ( ! yEq_PACKET_MEAS_ORDER_T(Expr1,Expr2) )
#ifndef ANY_PACKET_MEAS_ORDER_T
#define ANY_PACKET_MEAS_ORDER_T yMake_PACKET_MEAS_ORDER_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_z_ctypes_A_UnsignedLongInt, ANY_GLOBAL_TFI_T, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_NC_MEAS_PARS_T, ANY_EXT_MEAS_PARS_T)
#endif
#define z0U33_copy(P)  P

extern void yAss_RR_CON_EST_TYPE_ARR_T XPP((RR_CON_EST_TYPE_ARR_T,
  RR_CON_EST_TYPE_ARR_T, int));
#define yAssF_RR_CON_EST_TYPE_ARR_T(V,E,A)  yAss_RR_CON_EST_TYPE_ARR_T(V,E,A)
#define yEqF_RR_CON_EST_TYPE_ARR_T(Expr1,Expr2)  yEq_RR_CON_EST_TYPE_ARR_T(Expr1,Expr2)
#define yNEqF_RR_CON_EST_TYPE_ARR_T(Expr1,Expr2)  ( ! yEq_RR_CON_EST_TYPE_ARR_T(Expr1,Expr2) )
#define yTstI_RR_CON_EST_TYPE_ARR_T(yExpr)  yExpr
#ifndef ANY_RR_CON_EST_TYPE_ARR_T
#define ANY_RR_CON_EST_TYPE_ARR_T
#endif
#define z0U45_copy(P)  P

extern void yAss_TBF_CON_EST_TYPE_ARR_T XPP((TBF_CON_EST_TYPE_ARR_T,
  TBF_CON_EST_TYPE_ARR_T, int));
#define yAssF_TBF_CON_EST_TYPE_ARR_T(V,E,A)  yAss_TBF_CON_EST_TYPE_ARR_T(V,E,A)
#define yEqF_TBF_CON_EST_TYPE_ARR_T(Expr1,Expr2)  yEq_TBF_CON_EST_TYPE_ARR_T(Expr1,Expr2)
#define yNEqF_TBF_CON_EST_TYPE_ARR_T(Expr1,Expr2)  ( ! yEq_TBF_CON_EST_TYPE_ARR_T(Expr1,Expr2) )
#define yTstI_TBF_CON_EST_TYPE_ARR_T(yExpr)  yExpr
#ifndef ANY_TBF_CON_EST_TYPE_ARR_T
#define ANY_TBF_CON_EST_TYPE_ARR_T
#endif
#define z0U55_copy(P)  P

extern void yAss_PACKET_PAGING_REQUEST_T XPP((PACKET_PAGING_REQUEST_T *,
  PACKET_PAGING_REQUEST_T, int));
#define yAssF_PACKET_PAGING_REQUEST_T(V,E,A)  yAss_PACKET_PAGING_REQUEST_T(&(V),E,A)
#define yEqF_PACKET_PAGING_REQUEST_T(Expr1,Expr2)  yEq_PACKET_PAGING_REQUEST_T(Expr1,Expr2)
#define yNEqF_PACKET_PAGING_REQUEST_T(Expr1,Expr2)  ( ! yEq_PACKET_PAGING_REQUEST_T(Expr1,Expr2) )
#ifndef ANY_PACKET_PAGING_REQUEST_T
#define ANY_PACKET_PAGING_REQUEST_T yMake_PACKET_PAGING_REQUEST_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_PERSIST_LEVEL_T, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_RR_CON_EST_TYPE_ARR_T, \
  ANY_TBF_CON_EST_TYPE_ARR_T)
#endif
#define z0U63_copy(P)  P

#define yAssF_PACKET_PDCH_RELEASE_T(V,E,A)  V = E
#define yEqF_PACKET_PDCH_RELEASE_T(Expr1,Expr2)  yEq_PACKET_PDCH_RELEASE_T(Expr1,Expr2)
#define yNEqF_PACKET_PDCH_RELEASE_T(Expr1,Expr2)  ( ! yEq_PACKET_PDCH_RELEASE_T(Expr1,Expr2) )
#ifndef ANY_PACKET_PDCH_RELEASE_T
#define ANY_PACKET_PDCH_RELEASE_T yMake_PACKET_PDCH_RELEASE_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0U73_copy(P)  P

#define yAssF_PACKET_POLLING_REQUEST_T(V,E,A)  V = E
#define yEqF_PACKET_POLLING_REQUEST_T(Expr1,Expr2)  yEq_PACKET_POLLING_REQUEST_T(Expr1,Expr2)
#define yNEqF_PACKET_POLLING_REQUEST_T(Expr1,Expr2)  ( ! yEq_PACKET_POLLING_REQUEST_T(Expr1,Expr2) )
#ifndef ANY_PACKET_POLLING_REQUEST_T
#define ANY_PACKET_POLLING_REQUEST_T yMake_PACKET_POLLING_REQUEST_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_z_ctypes_A_UnsignedLongInt, ANY_GLOBAL_TFI_T)
#endif
#define z0U83_copy(P)  P

extern void yAss_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T
  XPP((PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T *,
  PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T, int));
#define yAssF_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T(V,E,A)  yAss_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T(&(V),E,A)
#define yEqF_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T(Expr1,Expr2)  yEq_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T(Expr1,Expr2)
#define yNEqF_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T(Expr1,Expr2)  ( ! yEq_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T(Expr1,Expr2) )
#ifndef ANY_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T
#define ANY_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T yMake_PACKET_PWR_CTRL_AND_TIMING_ADVANCE_T(ANY_REF_ADDR_T, \
  ANY_GLOBAL_POWER_CTRL_PARAMS_T, ANY_GLOBAL_PACKET_TIMING_ADVANCE_T, \
  ANY_POWER_CTRL_PARAMS_T, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet)
#endif
#define z0U93_copy(P)  P

extern void yAss_PACKET_PRACH_PARAMETERS_T XPP((PACKET_PRACH_PARAMETERS_T *,
  PACKET_PRACH_PARAMETERS_T, int));
#define yAssF_PACKET_PRACH_PARAMETERS_T(V,E,A)  yAss_PACKET_PRACH_PARAMETERS_T(&(V),E,A)
#define yEqF_PACKET_PRACH_PARAMETERS_T(Expr1,Expr2)  yEq_PACKET_PRACH_PARAMETERS_T(Expr1,Expr2)
#define yNEqF_PACKET_PRACH_PARAMETERS_T(Expr1,Expr2)  ( ! yEq_PACKET_PRACH_PARAMETERS_T(Expr1,Expr2) )
#ifndef ANY_PACKET_PRACH_PARAMETERS_T
#define ANY_PACKET_PRACH_PARAMETERS_T yMake_PACKET_PRACH_PARAMETERS_T(ANY_SDL_Octet, \
  ANY_PRACH_CTRL_PARAMETERS_T)
#endif
#define z0UA3_copy(P)  P

extern void yAss_PACKET_QUEUEING_NOTIFICATION_T
  XPP((PACKET_QUEUEING_NOTIFICATION_T *, PACKET_QUEUEING_NOTIFICATION_T, int));
#define yAssF_PACKET_QUEUEING_NOTIFICATION_T(V,E,A)  yAss_PACKET_QUEUEING_NOTIFICATION_T(&(V),E,A)
#define yEqF_PACKET_QUEUEING_NOTIFICATION_T(Expr1,Expr2)  yEq_PACKET_QUEUEING_NOTIFICATION_T(Expr1,Expr2)
#define yNEqF_PACKET_QUEUEING_NOTIFICATION_T(Expr1,Expr2)  ( ! yEq_PACKET_QUEUEING_NOTIFICATION_T(Expr1,Expr2) )
#ifndef ANY_PACKET_QUEUEING_NOTIFICATION_T
#define ANY_PACKET_QUEUEING_NOTIFICATION_T yMake_PACKET_QUEUEING_NOTIFICATION_T(ANY_SDL_Octet, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_PACKET_REQ_REF_T)
#endif
#define z0UB3_copy(P)  P

extern void yAss_PACKET_SYS_INFO_1_T XPP((PACKET_SYS_INFO_1_T *,
  PACKET_SYS_INFO_1_T, int));
#define yAssF_PACKET_SYS_INFO_1_T(V,E,A)  yAss_PACKET_SYS_INFO_1_T(&(V),E,A)
#define yEqF_PACKET_SYS_INFO_1_T(Expr1,Expr2)  yEq_PACKET_SYS_INFO_1_T(Expr1,Expr2)
#define yNEqF_PACKET_SYS_INFO_1_T(Expr1,Expr2)  ( ! yEq_PACKET_SYS_INFO_1_T(Expr1,Expr2) )
#ifndef ANY_PACKET_SYS_INFO_1_T
#define ANY_PACKET_SYS_INFO_1_T yMake_PACKET_SYS_INFO_1_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_GPRS_CELL_OPTIONS_T, \
  ANY_PRACH_CTRL_PARAMETERS_T, ANY_PCCCH_ORAGANIZATION_PARAMETERS_T, \
  ANY_GLOBAL_POWER_CTRL_PARAMS_T, ANY_SDL_Octet)
#endif
#define z0UC03_copy(P)  P

extern void yAss_PACKET_SYS_INFO_2_T XPP((PACKET_SYS_INFO_2_T *,
  PACKET_SYS_INFO_2_T, int));
#define yAssF_PACKET_SYS_INFO_2_T(V,E,A)  yAss_PACKET_SYS_INFO_2_T(&(V),E,A)
#define yEqF_PACKET_SYS_INFO_2_T(Expr1,Expr2)  yEq_PACKET_SYS_INFO_2_T(Expr1,Expr2)
#define yNEqF_PACKET_SYS_INFO_2_T(Expr1,Expr2)  ( ! yEq_PACKET_SYS_INFO_2_T(Expr1,Expr2) )
#ifndef ANY_PACKET_SYS_INFO_2_T
#define ANY_PACKET_SYS_INFO_2_T yMake_PACKET_SYS_INFO_2_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_CELL_IDENTIFICATION_T, \
  ANY_NON_GPRS_CELL_OPT_T, ANY_REFERENCED_FREQ_LIST_PTR, \
  ANY_CELL_ALLOCATION_LIST_PTR, ANY_GPRS_MOBILE_ALLOCTIONS_PTR, \
  ANY_PCCCH_DESCRIPTION_PTR)
#endif
#define z0UD3_copy(P)  P

#define yAssF_PACKET_SYS_INFO_3_T(V,E,A)  V = E
#define yEqF_PACKET_SYS_INFO_3_T(Expr1,Expr2)  yEq_PACKET_SYS_INFO_3_T(Expr1,Expr2)
#define yNEqF_PACKET_SYS_INFO_3_T(Expr1,Expr2)  ( ! yEq_PACKET_SYS_INFO_3_T(Expr1,Expr2) )
#ifndef ANY_PACKET_SYS_INFO_3_T
#define ANY_PACKET_SYS_INFO_3_T yMake_PACKET_SYS_INFO_3_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SERVING_CELL_PARS_T, \
  ANY_GENERAL_CELL_SEL_PARS_T, ANY_NEIGHBOUR_CELL_PARS_PTR)
#endif
#define z0UE3_copy(P)  P

#define yAssF_PACKET_SYS_INFO_3_BIS_T(V,E,A)  V = E
#define yEqF_PACKET_SYS_INFO_3_BIS_T(Expr1,Expr2)  yEq_PACKET_SYS_INFO_3_BIS_T(Expr1,Expr2)
#define yNEqF_PACKET_SYS_INFO_3_BIS_T(Expr1,Expr2)  ( ! yEq_PACKET_SYS_INFO_3_BIS_T(Expr1,Expr2) )
#ifndef ANY_PACKET_SYS_INFO_3_BIS_T
#define ANY_PACKET_SYS_INFO_3_BIS_T yMake_PACKET_SYS_INFO_3_BIS_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_NEIGHBOUR_CELL_PARS_PTR, \
  ANY_NEIGHBOUR_CELL_PARS_2_PTR)
#endif
#define z0UF3_copy(P)  P

#define yAssF_PACKET_SYS_INFO_4_T(V,E,A)  V = E
#define yEqF_PACKET_SYS_INFO_4_T(Expr1,Expr2)  yEq_PACKET_SYS_INFO_4_T(Expr1,Expr2)
#define yNEqF_PACKET_SYS_INFO_4_T(Expr1,Expr2)  ( ! yEq_PACKET_SYS_INFO_4_T(Expr1,Expr2) )
#ifndef ANY_PACKET_SYS_INFO_4_T
#define ANY_PACKET_SYS_INFO_4_T yMake_PACKET_SYS_INFO_4_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_CHANNEL_GROUP_PTR)
#endif
#define z0UG3_copy(P)  P

#define yAssF_PACKET_SYS_INFO_5_T(V,E,A)  V = E
#define yEqF_PACKET_SYS_INFO_5_T(Expr1,Expr2)  yEq_PACKET_SYS_INFO_5_T(Expr1,Expr2)
#define yNEqF_PACKET_SYS_INFO_5_T(Expr1,Expr2)  ( ! yEq_PACKET_SYS_INFO_5_T(Expr1,Expr2) )
#ifndef ANY_PACKET_SYS_INFO_5_T
#define ANY_PACKET_SYS_INFO_5_T yMake_PACKET_SYS_INFO_5_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_NC_MEAS_PARS_T, \
  ANY_EXT_MEAS_PARS_T)
#endif
#define z0UH3_copy(P)  P

extern void yAss_PACKET_SYS_INFO_13_T XPP((PACKET_SYS_INFO_13_T *,
  PACKET_SYS_INFO_13_T, int));
#define yAssF_PACKET_SYS_INFO_13_T(V,E,A)  yAss_PACKET_SYS_INFO_13_T(&(V),E,A)
#define yEqF_PACKET_SYS_INFO_13_T(Expr1,Expr2)  yEq_PACKET_SYS_INFO_13_T(Expr1,Expr2)
#define yNEqF_PACKET_SYS_INFO_13_T(Expr1,Expr2)  ( ! yEq_PACKET_SYS_INFO_13_T(Expr1,Expr2) )
#ifndef ANY_PACKET_SYS_INFO_13_T
#define ANY_PACKET_SYS_INFO_13_T yMake_PACKET_SYS_INFO_13_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_GPRS_MOBILE_ALLOCATION_T, \
  ANY_GPRS_CELL_OPTIONS_T, ANY_GPRS_POWER_CTRL_PARAMS_T, ANY_PBCCH_DESCR_T)
#endif
#define z0UI03_copy(P)  P

#define yAssF_PACKET_TBF_RELEASE_T(V,E,A)  V = E
#define yEqF_PACKET_TBF_RELEASE_T(Expr1,Expr2)  yEq_PACKET_TBF_RELEASE_T(Expr1,Expr2)
#define yNEqF_PACKET_TBF_RELEASE_T(Expr1,Expr2)  ( ! yEq_PACKET_TBF_RELEASE_T(Expr1,Expr2) )
#ifndef ANY_PACKET_TBF_RELEASE_T
#define ANY_PACKET_TBF_RELEASE_T yMake_PACKET_TBF_RELEASE_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_GLOBAL_TFI_T)
#endif
#define z0UJ3_copy(P)  P

extern void yAss_URBB_ARR_T XPP((URBB_ARR_T, URBB_ARR_T, int));
#define yAssF_URBB_ARR_T(V,E,A)  yAss_URBB_ARR_T(V,E,A)
#define yEqF_URBB_ARR_T(Expr1,Expr2)  yEq_URBB_ARR_T(Expr1,Expr2)
#define yNEqF_URBB_ARR_T(Expr1,Expr2)  ( ! yEq_URBB_ARR_T(Expr1,Expr2) )
#define yTstI_URBB_ARR_T(yExpr)  yExpr
#ifndef ANY_URBB_ARR_T
#define ANY_URBB_ARR_T
#endif
#define z0UK5_copy(P)  P

extern void yAss_CRBB_ARR_T XPP((CRBB_ARR_T, CRBB_ARR_T, int));
#define yAssF_CRBB_ARR_T(V,E,A)  yAss_CRBB_ARR_T(V,E,A)
#define yEqF_CRBB_ARR_T(Expr1,Expr2)  yEq_CRBB_ARR_T(Expr1,Expr2)
#define yNEqF_CRBB_ARR_T(Expr1,Expr2)  ( ! yEq_CRBB_ARR_T(Expr1,Expr2) )
#define yTstI_CRBB_ARR_T(yExpr)  yExpr
#ifndef ANY_CRBB_ARR_T
#define ANY_CRBB_ARR_T
#endif
#define z0UL5_copy(P)  P

extern void yAss_E_ACK_NACK_DESCR_T XPP((E_ACK_NACK_DESCR_T *,
  E_ACK_NACK_DESCR_T, int));
#define yAssF_E_ACK_NACK_DESCR_T(V,E,A)  yAss_E_ACK_NACK_DESCR_T(&(V),E,A)
#define yEqF_E_ACK_NACK_DESCR_T(Expr1,Expr2)  yEq_E_ACK_NACK_DESCR_T(Expr1,Expr2)
#define yNEqF_E_ACK_NACK_DESCR_T(Expr1,Expr2)  ( ! yEq_E_ACK_NACK_DESCR_T(Expr1,Expr2) )
#ifndef ANY_E_ACK_NACK_DESCR_T
#define ANY_E_ACK_NACK_DESCR_T yMake_E_ACK_NACK_DESCR_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_CRBB_ARR_T, ANY_URBB_ARR_T)
#endif
#define z0UM03_copy(P)  P

extern void yAss_PACKET_UPLINK_ACK_NACK_T XPP((PACKET_UPLINK_ACK_NACK_T *,
  PACKET_UPLINK_ACK_NACK_T, int));
#define yAssF_PACKET_UPLINK_ACK_NACK_T(V,E,A)  yAss_PACKET_UPLINK_ACK_NACK_T(&(V),E,A)
#define yEqF_PACKET_UPLINK_ACK_NACK_T(Expr1,Expr2)  yEq_PACKET_UPLINK_ACK_NACK_T(Expr1,Expr2)
#define yNEqF_PACKET_UPLINK_ACK_NACK_T(Expr1,Expr2)  ( ! yEq_PACKET_UPLINK_ACK_NACK_T(Expr1,Expr2) )
#ifndef ANY_PACKET_UPLINK_ACK_NACK_T
#define ANY_PACKET_UPLINK_ACK_NACK_T yMake_PACKET_UPLINK_ACK_NACK_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_ACK_NACK_DESCR_T, ANY_E_ACK_NACK_DESCR_T, \
  ANY_PACKET_TIMING_ADVANCE_T, ANY_POWER_CTRL_PARAMS_T, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0UN03_copy(P)  P

extern void yAss_ACCESS_TECH_TYPE_ARR_T XPP((ACCESS_TECH_TYPE_ARR_T,
  ACCESS_TECH_TYPE_ARR_T, int));
#define yAssF_ACCESS_TECH_TYPE_ARR_T(V,E,A)  yAss_ACCESS_TECH_TYPE_ARR_T(V,E,A)
#define yEqF_ACCESS_TECH_TYPE_ARR_T(Expr1,Expr2)  yEq_ACCESS_TECH_TYPE_ARR_T(Expr1,Expr2)
#define yNEqF_ACCESS_TECH_TYPE_ARR_T(Expr1,Expr2)  ( ! yEq_ACCESS_TECH_TYPE_ARR_T(Expr1,Expr2) )
#define yTstI_ACCESS_TECH_TYPE_ARR_T(yExpr)  yExpr
#ifndef ANY_ACCESS_TECH_TYPE_ARR_T
#define ANY_ACCESS_TECH_TYPE_ARR_T
#endif
#define z0UO5_copy(P)  P

extern void yAss_ACCESS_TECH_REQ_T XPP((ACCESS_TECH_REQ_T *, ACCESS_TECH_REQ_T,
  int));
#define yAssF_ACCESS_TECH_REQ_T(V,E,A)  yAss_ACCESS_TECH_REQ_T(&(V),E,A)
#define yEqF_ACCESS_TECH_REQ_T(Expr1,Expr2)  yEq_ACCESS_TECH_REQ_T(Expr1,Expr2)
#define yNEqF_ACCESS_TECH_REQ_T(Expr1,Expr2)  ( ! yEq_ACCESS_TECH_REQ_T(Expr1,Expr2) )
#ifndef ANY_ACCESS_TECH_REQ_T
#define ANY_ACCESS_TECH_REQ_T yMake_ACCESS_TECH_REQ_T(ANY_SDL_Octet, \
  ANY_ACCESS_TECH_TYPE_ARR_T)
#endif
#define z0UP3_copy(P)  P

#define yAssF_MULTI_BLOCK_ALLOC_T(V,E,A)  V = E
#define yEqF_MULTI_BLOCK_ALLOC_T(Expr1,Expr2)  yEq_MULTI_BLOCK_ALLOC_T(Expr1,Expr2)
#define yNEqF_MULTI_BLOCK_ALLOC_T(Expr1,Expr2)  ( ! yEq_MULTI_BLOCK_ALLOC_T(Expr1,Expr2) )
#ifndef ANY_MULTI_BLOCK_ALLOC_T
#define ANY_MULTI_BLOCK_ALLOC_T yMake_MULTI_BLOCK_ALLOC_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_START_FRAME_NUMBER_T, ANY_SDL_Octet)
#endif
#define z0UQ03_copy(P)  P

extern void yAss_PACKET_UPLINK_ASSIGNMENT_T XPP((PACKET_UPLINK_ASSIGNMENT_T *,
  PACKET_UPLINK_ASSIGNMENT_T, int));
#define yAssF_PACKET_UPLINK_ASSIGNMENT_T(V,E,A)  yAss_PACKET_UPLINK_ASSIGNMENT_T(&(V),E,A)
#define yEqF_PACKET_UPLINK_ASSIGNMENT_T(Expr1,Expr2)  yEq_PACKET_UPLINK_ASSIGNMENT_T(Expr1,Expr2)
#define yNEqF_PACKET_UPLINK_ASSIGNMENT_T(Expr1,Expr2)  ( ! yEq_PACKET_UPLINK_ASSIGNMENT_T(Expr1,Expr2) )
#ifndef ANY_PACKET_UPLINK_ASSIGNMENT_T
#define ANY_PACKET_UPLINK_ASSIGNMENT_T yMake_PACKET_UPLINK_ASSIGNMENT_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_PERSIST_LEVEL_T, ANY_SDL_Boolean, ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_SDL_Boolean, ANY_COMPACT_REDUCED_MA_T, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_RLC_WS_T, ANY_SDL_Boolean, ANY_ACCESS_TECH_REQ_T, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_REF_ADDR_T, ANY_PACKET_TIMING_ADVANCE_T, \
  ANY_FREQ_PARS_T, ANY_DYNAMIC_ALLOC_T, ANY_MULTI_BLOCK_ALLOC_T, \
  ANY_SINGLE_BLOCK_ALLOC_T, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0UR03_copy(P)  P

extern void yAss_PACKET_TIMESLOT_RECONFIGURE_T
  XPP((PACKET_TIMESLOT_RECONFIGURE_T *, PACKET_TIMESLOT_RECONFIGURE_T, int));
#define yAssF_PACKET_TIMESLOT_RECONFIGURE_T(V,E,A)  yAss_PACKET_TIMESLOT_RECONFIGURE_T(&(V),E,A)
#define yEqF_PACKET_TIMESLOT_RECONFIGURE_T(Expr1,Expr2)  yEq_PACKET_TIMESLOT_RECONFIGURE_T(Expr1,Expr2)
#define yNEqF_PACKET_TIMESLOT_RECONFIGURE_T(Expr1,Expr2)  ( ! yEq_PACKET_TIMESLOT_RECONFIGURE_T(Expr1,Expr2) )
#ifndef ANY_PACKET_TIMESLOT_RECONFIGURE_T
#define ANY_PACKET_TIMESLOT_RECONFIGURE_T yMake_PACKET_TIMESLOT_RECONFIGURE_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_RLC_MODE_T, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_COMPACT_REDUCED_MA_T, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_RLC_WS_T, ANY_RLC_WS_T, ANY_SDL_Octet, \
  ANY_GLOBAL_TFI_T, ANY_GLOBAL_PACKET_TIMING_ADVANCE_T, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_FREQ_PARS_T, \
  ANY_DYNAMIC_ALLOC_T, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0US03_copy(P)  P

#define yAssF_PACKET_CTRL_ACK_T(V,E,A)  V = E
#define yEqF_PACKET_CTRL_ACK_T(Expr1,Expr2)  yEq_PACKET_CTRL_ACK_T(Expr1,Expr2)
#define yNEqF_PACKET_CTRL_ACK_T(Expr1,Expr2)  ( ! yEq_PACKET_CTRL_ACK_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CTRL_ACK_T
#define ANY_PACKET_CTRL_ACK_T yMake_PACKET_CTRL_ACK_T(ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_SDL_Octet)
#endif
#define z0UT3_copy(P)  P

#define yAssF_PACKET_CELL_CHANGE_FAILURE_T(V,E,A)  V = E
#define yEqF_PACKET_CELL_CHANGE_FAILURE_T(Expr1,Expr2)  yEq_PACKET_CELL_CHANGE_FAILURE_T(Expr1,Expr2)
#define yNEqF_PACKET_CELL_CHANGE_FAILURE_T(Expr1,Expr2)  ( ! yEq_PACKET_CELL_CHANGE_FAILURE_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CELL_CHANGE_FAILURE_T
#define ANY_PACKET_CELL_CHANGE_FAILURE_T yMake_PACKET_CELL_CHANGE_FAILURE_T(ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean)
#endif
#define z0UU3_copy(P)  P

#define yAssF_PACKET_CHANNEL_REQUEST_T(V,E,A)  V = E
#define yEqF_PACKET_CHANNEL_REQUEST_T(Expr1,Expr2)  yEq_PACKET_CHANNEL_REQUEST_T(Expr1,Expr2)
#define yNEqF_PACKET_CHANNEL_REQUEST_T(Expr1,Expr2)  ( ! yEq_PACKET_CHANNEL_REQUEST_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CHANNEL_REQUEST_T
#define ANY_PACKET_CHANNEL_REQUEST_T yMake_PACKET_CHANNEL_REQUEST_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0UV3_copy(P)  P

#define yAssF_EGPRS_PACKET_CHANNEL_REQUEST_T(V,E,A)  V = E
#define yEqF_EGPRS_PACKET_CHANNEL_REQUEST_T(Expr1,Expr2)  yEq_EGPRS_PACKET_CHANNEL_REQUEST_T(Expr1,Expr2)
#define yNEqF_EGPRS_PACKET_CHANNEL_REQUEST_T(Expr1,Expr2)  ( ! yEq_EGPRS_PACKET_CHANNEL_REQUEST_T(Expr1,Expr2) )
#ifndef ANY_EGPRS_PACKET_CHANNEL_REQUEST_T
#define ANY_EGPRS_PACKET_CHANNEL_REQUEST_T yMake_EGPRS_PACKET_CHANNEL_REQUEST_T(ANY_z_ctypes_6_ShortInt, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0UW3_copy(P)  P

extern void yAss_PACKET_DOWNLINK_ACK_NACK_T XPP((PACKET_DOWNLINK_ACK_NACK_T *,
  PACKET_DOWNLINK_ACK_NACK_T, int));
#define yAssF_PACKET_DOWNLINK_ACK_NACK_T(V,E,A)  yAss_PACKET_DOWNLINK_ACK_NACK_T(&(V),E,A)
#define yEqF_PACKET_DOWNLINK_ACK_NACK_T(Expr1,Expr2)  yEq_PACKET_DOWNLINK_ACK_NACK_T(Expr1,Expr2)
#define yNEqF_PACKET_DOWNLINK_ACK_NACK_T(Expr1,Expr2)  ( ! yEq_PACKET_DOWNLINK_ACK_NACK_T(Expr1,Expr2) )
#ifndef ANY_PACKET_DOWNLINK_ACK_NACK_T
#define ANY_PACKET_DOWNLINK_ACK_NACK_T yMake_PACKET_DOWNLINK_ACK_NACK_T(ANY_SDL_Octet, \
  ANY_ACK_NACK_DESCR_T, ANY_CHANNEL_REQUEST_DESCR_T, ANY_CHANNEL_QUALITY_REP_T, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0UX3_copy(P)  P

#define yAssF_PACKET_UL_DUMMY_CTRL_BLOCK_T(V,E,A)  V = E
#define yEqF_PACKET_UL_DUMMY_CTRL_BLOCK_T(Expr1,Expr2)  yEq_PACKET_UL_DUMMY_CTRL_BLOCK_T(Expr1,Expr2)
#define yNEqF_PACKET_UL_DUMMY_CTRL_BLOCK_T(Expr1,Expr2)  ( ! yEq_PACKET_UL_DUMMY_CTRL_BLOCK_T(Expr1,Expr2) )
#ifndef ANY_PACKET_UL_DUMMY_CTRL_BLOCK_T
#define ANY_PACKET_UL_DUMMY_CTRL_BLOCK_T yMake_PACKET_UL_DUMMY_CTRL_BLOCK_T(ANY_z_ctypes_A_UnsignedLongInt)
#endif
#define z0UY3_copy(P)  P

extern void yAss_PACKET_MEASUREMENT_REPORT_T
  XPP((PACKET_MEASUREMENT_REPORT_T *, PACKET_MEASUREMENT_REPORT_T, int));
#define yAssF_PACKET_MEASUREMENT_REPORT_T(V,E,A)  yAss_PACKET_MEASUREMENT_REPORT_T(&(V),E,A)
#define yEqF_PACKET_MEASUREMENT_REPORT_T(Expr1,Expr2)  yEq_PACKET_MEASUREMENT_REPORT_T(Expr1,Expr2)
#define yNEqF_PACKET_MEASUREMENT_REPORT_T(Expr1,Expr2)  ( ! yEq_PACKET_MEASUREMENT_REPORT_T(Expr1,Expr2) )
#ifndef ANY_PACKET_MEASUREMENT_REPORT_T
#define ANY_PACKET_MEASUREMENT_REPORT_T yMake_PACKET_MEASUREMENT_REPORT_T(ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_NC_MEAS_REPORT_T, ANY_EXT_MEAS_REPORT_T, \
  ANY_SDL_Boolean, ANY_BA_USED_PSI3_CHANGE_MARK_T, ANY_SDL_Boolean)
#endif
#define z0UZ3_copy(P)  P

extern void yAss_PACKET_ENHANCED_MEASUREMENT_REPORT_T
  XPP((PACKET_ENHANCED_MEASUREMENT_REPORT_T *,
  PACKET_ENHANCED_MEASUREMENT_REPORT_T, int));
#define yAssF_PACKET_ENHANCED_MEASUREMENT_REPORT_T(V,E,A)  yAss_PACKET_ENHANCED_MEASUREMENT_REPORT_T(&(V),E,A)
#define yEqF_PACKET_ENHANCED_MEASUREMENT_REPORT_T(Expr1,Expr2)  yEq_PACKET_ENHANCED_MEASUREMENT_REPORT_T(Expr1,Expr2)
#define yNEqF_PACKET_ENHANCED_MEASUREMENT_REPORT_T(Expr1,Expr2)  ( ! yEq_PACKET_ENHANCED_MEASUREMENT_REPORT_T(Expr1,Expr2) )
#ifndef ANY_PACKET_ENHANCED_MEASUREMENT_REPORT_T
#define ANY_PACKET_ENHANCED_MEASUREMENT_REPORT_T yMake_PACKET_ENHANCED_MEASUREMENT_REPORT_T(ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_NC_MEAS_REPORT_T)
#endif
#define z0V03_copy(P)  P

#define yAssF_PACKET_MOBILE_TBF_STATUS_T(V,E,A)  V = E
#define yEqF_PACKET_MOBILE_TBF_STATUS_T(Expr1,Expr2)  yEq_PACKET_MOBILE_TBF_STATUS_T(Expr1,Expr2)
#define yNEqF_PACKET_MOBILE_TBF_STATUS_T(Expr1,Expr2)  ( ! yEq_PACKET_MOBILE_TBF_STATUS_T(Expr1,Expr2) )
#ifndef ANY_PACKET_MOBILE_TBF_STATUS_T
#define ANY_PACKET_MOBILE_TBF_STATUS_T yMake_PACKET_MOBILE_TBF_STATUS_T(ANY_GLOBAL_TFI_T, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0V13_copy(P)  P

#define yAssF_TS_BEP_T(V,E,A)  V = E
#define yEqF_TS_BEP_T(Expr1,Expr2)  yEq_TS_BEP_T(Expr1,Expr2)
#define yNEqF_TS_BEP_T(Expr1,Expr2)  ( ! yEq_TS_BEP_T(Expr1,Expr2) )
#ifndef ANY_TS_BEP_T
#define ANY_TS_BEP_T yMake_TS_BEP_T(ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0V23_copy(P)  P

extern void yAss_TS_BEP_ARR_T XPP((TS_BEP_ARR_T, TS_BEP_ARR_T, int));
#define yAssF_TS_BEP_ARR_T(V,E,A)  yAss_TS_BEP_ARR_T(V,E,A)
#define yEqF_TS_BEP_ARR_T(Expr1,Expr2)  yEq_TS_BEP_ARR_T(Expr1,Expr2)
#define yNEqF_TS_BEP_ARR_T(Expr1,Expr2)  ( ! yEq_TS_BEP_ARR_T(Expr1,Expr2) )
#define yTstI_TS_BEP_ARR_T(yExpr)  yExpr
#ifndef ANY_TS_BEP_ARR_T
#define ANY_TS_BEP_ARR_T
#endif
#define z0V35_copy(P)  P

extern void yAss_E_TS_LINK_QUAL_MEAS XPP((E_TS_LINK_QUAL_MEAS *,
  E_TS_LINK_QUAL_MEAS, int));
#define yAssF_E_TS_LINK_QUAL_MEAS(V,E,A)  yAss_E_TS_LINK_QUAL_MEAS(&(V),E,A)
#define yEqF_E_TS_LINK_QUAL_MEAS(Expr1,Expr2)  yEq_E_TS_LINK_QUAL_MEAS(Expr1,Expr2)
#define yNEqF_E_TS_LINK_QUAL_MEAS(Expr1,Expr2)  ( ! yEq_E_TS_LINK_QUAL_MEAS(Expr1,Expr2) )
#ifndef ANY_E_TS_LINK_QUAL_MEAS
#define ANY_E_TS_LINK_QUAL_MEAS yMake_E_TS_LINK_QUAL_MEAS(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_TS_BEP_ARR_T, ANY_TIMESLOT_VALUES_ARR_T)
#endif
#define z0V43_copy(P)  P

#define yAssF_E_BEP_LINK_QUAL_MEAS(V,E,A)  V = E
#define yEqF_E_BEP_LINK_QUAL_MEAS(Expr1,Expr2)  yEq_E_BEP_LINK_QUAL_MEAS(Expr1,Expr2)
#define yNEqF_E_BEP_LINK_QUAL_MEAS(Expr1,Expr2)  ( ! yEq_E_BEP_LINK_QUAL_MEAS(Expr1,Expr2) )
#ifndef ANY_E_BEP_LINK_QUAL_MEAS
#define ANY_E_BEP_LINK_QUAL_MEAS yMake_E_BEP_LINK_QUAL_MEAS(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0V53_copy(P)  P

extern void yAss_PACKET_RESOURCE_REQUEST_T XPP((PACKET_RESOURCE_REQUEST_T *,
  PACKET_RESOURCE_REQUEST_T, int));
#define yAssF_PACKET_RESOURCE_REQUEST_T(V,E,A)  yAss_PACKET_RESOURCE_REQUEST_T(&(V),E,A)
#define yEqF_PACKET_RESOURCE_REQUEST_T(Expr1,Expr2)  yEq_PACKET_RESOURCE_REQUEST_T(Expr1,Expr2)
#define yNEqF_PACKET_RESOURCE_REQUEST_T(Expr1,Expr2)  ( ! yEq_PACKET_RESOURCE_REQUEST_T(Expr1,Expr2) )
#ifndef ANY_PACKET_RESOURCE_REQUEST_T
#define ANY_PACKET_RESOURCE_REQUEST_T yMake_PACKET_RESOURCE_REQUEST_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_GLOBAL_TFI_T, ANY_z_ctypes_A_UnsignedLongInt, ANY_MS_RA_CAPABILITY_T, \
  ANY_CHANNEL_REQUEST_DESCR_T, ANY_TIMESLOT_VALUES_ARR_T, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_E_BEP_LINK_QUAL_MEAS, \
  ANY_E_TS_LINK_QUAL_MEAS, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean)
#endif
#define z0V603_copy(P)  P

extern void yAss_ADD_RADIO_ACC_CAPAB_T XPP((ADD_RADIO_ACC_CAPAB_T *,
  ADD_RADIO_ACC_CAPAB_T, int));
#define yAssF_ADD_RADIO_ACC_CAPAB_T(V,E,A)  yAss_ADD_RADIO_ACC_CAPAB_T(&(V),E,A)
#define yEqF_ADD_RADIO_ACC_CAPAB_T(Expr1,Expr2)  yEq_ADD_RADIO_ACC_CAPAB_T(Expr1,Expr2)
#define yNEqF_ADD_RADIO_ACC_CAPAB_T(Expr1,Expr2)  ( ! yEq_ADD_RADIO_ACC_CAPAB_T(Expr1,Expr2) )
#ifndef ANY_ADD_RADIO_ACC_CAPAB_T
#define ANY_ADD_RADIO_ACC_CAPAB_T yMake_ADD_RADIO_ACC_CAPAB_T(ANY_GLOBAL_TFI_T, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_MS_RA_CAPABILITY_T)
#endif
#define z0V73_copy(P)  P

#define yAssF_PSI_MSG_ELEM_T(V,E,A)  V = E
#define yEqF_PSI_MSG_ELEM_T(Expr1,Expr2)  yEq_PSI_MSG_ELEM_T(Expr1,Expr2)
#define yNEqF_PSI_MSG_ELEM_T(Expr1,Expr2)  ( ! yEq_PSI_MSG_ELEM_T(Expr1,Expr2) )
#ifndef ANY_PSI_MSG_ELEM_T
#define ANY_PSI_MSG_ELEM_T yMake_PSI_MSG_ELEM_T(ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0V83_copy(P)  P

extern void yAss_PSI_MSG_ELEM_ARR_T XPP((PSI_MSG_ELEM_ARR_T,
  PSI_MSG_ELEM_ARR_T, int));
#define yAssF_PSI_MSG_ELEM_ARR_T(V,E,A)  yAss_PSI_MSG_ELEM_ARR_T(V,E,A)
#define yEqF_PSI_MSG_ELEM_ARR_T(Expr1,Expr2)  yEq_PSI_MSG_ELEM_ARR_T(Expr1,Expr2)
#define yNEqF_PSI_MSG_ELEM_ARR_T(Expr1,Expr2)  ( ! yEq_PSI_MSG_ELEM_ARR_T(Expr1,Expr2) )
#define yTstI_PSI_MSG_ELEM_ARR_T(yExpr)  yExpr
#ifndef ANY_PSI_MSG_ELEM_ARR_T
#define ANY_PSI_MSG_ELEM_ARR_T
#endif
#define z0V95_copy(P)  P

extern void yAss_PSI_MSG_LIST_T XPP((PSI_MSG_LIST_T *, PSI_MSG_LIST_T, int));
#define yAssF_PSI_MSG_LIST_T(V,E,A)  yAss_PSI_MSG_LIST_T(&(V),E,A)
#define yEqF_PSI_MSG_LIST_T(Expr1,Expr2)  yEq_PSI_MSG_LIST_T(Expr1,Expr2)
#define yNEqF_PSI_MSG_LIST_T(Expr1,Expr2)  ( ! yEq_PSI_MSG_LIST_T(Expr1,Expr2) )
#ifndef ANY_PSI_MSG_LIST_T
#define ANY_PSI_MSG_LIST_T yMake_PSI_MSG_LIST_T(ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_PSI_MSG_ELEM_ARR_T)
#endif
#define z0VA3_copy(P)  P

extern void yAss_UNKNOWN_PSI_MSG_LIST_T XPP((UNKNOWN_PSI_MSG_LIST_T *,
  UNKNOWN_PSI_MSG_LIST_T, int));
#define yAssF_UNKNOWN_PSI_MSG_LIST_T(V,E,A)  yAss_UNKNOWN_PSI_MSG_LIST_T(&(V),E,A)
#define yEqF_UNKNOWN_PSI_MSG_LIST_T(Expr1,Expr2)  yEq_UNKNOWN_PSI_MSG_LIST_T(Expr1,Expr2)
#define yNEqF_UNKNOWN_PSI_MSG_LIST_T(Expr1,Expr2)  ( ! yEq_UNKNOWN_PSI_MSG_LIST_T(Expr1,Expr2) )
#ifndef ANY_UNKNOWN_PSI_MSG_LIST_T
#define ANY_UNKNOWN_PSI_MSG_LIST_T yMake_UNKNOWN_PSI_MSG_LIST_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_MAC_MSG_BLOCK_ARR_T)
#endif
#define z0VB3_copy(P)  P

extern void yAss_PACKET_PSI_STATUS_T XPP((PACKET_PSI_STATUS_T *,
  PACKET_PSI_STATUS_T, int));
#define yAssF_PACKET_PSI_STATUS_T(V,E,A)  yAss_PACKET_PSI_STATUS_T(&(V),E,A)
#define yEqF_PACKET_PSI_STATUS_T(Expr1,Expr2)  yEq_PACKET_PSI_STATUS_T(Expr1,Expr2)
#define yNEqF_PACKET_PSI_STATUS_T(Expr1,Expr2)  ( ! yEq_PACKET_PSI_STATUS_T(Expr1,Expr2) )
#ifndef ANY_PACKET_PSI_STATUS_T
#define ANY_PACKET_PSI_STATUS_T yMake_PACKET_PSI_STATUS_T(ANY_GLOBAL_TFI_T, \
  ANY_SDL_Octet, ANY_PSI_MSG_LIST_T, ANY_UNKNOWN_PSI_MSG_LIST_T)
#endif
#define z0VC3_copy(P)  P

#define yAssF_PACKET_CTRL_ACK_11_T(V,E,A)  V = E
#define yEqF_PACKET_CTRL_ACK_11_T(Expr1,Expr2)  yEq_PACKET_CTRL_ACK_11_T(Expr1,Expr2)
#define yNEqF_PACKET_CTRL_ACK_11_T(Expr1,Expr2)  ( ! yEq_PACKET_CTRL_ACK_11_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CTRL_ACK_11_T
#define ANY_PACKET_CTRL_ACK_11_T yMake_PACKET_CTRL_ACK_11_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_SDL_Octet)
#endif
#define z0VD3_copy(P)  P

#define yAssF_PACKET_CTRL_ACK_8_T(V,E,A)  V = E
#define yEqF_PACKET_CTRL_ACK_8_T(Expr1,Expr2)  yEq_PACKET_CTRL_ACK_8_T(Expr1,Expr2)
#define yNEqF_PACKET_CTRL_ACK_8_T(Expr1,Expr2)  ( ! yEq_PACKET_CTRL_ACK_8_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CTRL_ACK_8_T
#define ANY_PACKET_CTRL_ACK_8_T yMake_PACKET_CTRL_ACK_8_T(ANY_SDL_Octet, \
  ANY_SDL_Octet)
#endif
#define z0VE3_copy(P)  P

#define yAssF_P0_BTS_PR_T(V,E,A)  V = E
#define yEqF_P0_BTS_PR_T(Expr1,Expr2)  yEq_P0_BTS_PR_T(Expr1,Expr2)
#define yNEqF_P0_BTS_PR_T(Expr1,Expr2)  ( ! yEq_P0_BTS_PR_T(Expr1,Expr2) )
#ifndef ANY_P0_BTS_PR_T
#define ANY_P0_BTS_PR_T yMake_P0_BTS_PR_T(ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0VF3_copy(P)  P

#define yAssF_SECOND_PART_PACKET_ASSIGNMENT_T(V,E,A)  V = E
#define yEqF_SECOND_PART_PACKET_ASSIGNMENT_T(Expr1,Expr2)  yEq_SECOND_PART_PACKET_ASSIGNMENT_T(Expr1,Expr2)
#define yNEqF_SECOND_PART_PACKET_ASSIGNMENT_T(Expr1,Expr2)  ( ! yEq_SECOND_PART_PACKET_ASSIGNMENT_T(Expr1,Expr2) )
#ifndef ANY_SECOND_PART_PACKET_ASSIGNMENT_T
#define ANY_SECOND_PART_PACKET_ASSIGNMENT_T yMake_SECOND_PART_PACKET_ASSIGNMENT_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0VG3_copy(P)  P

extern void yAss_BITMAP_ARR_T XPP((BITMAP_ARR_T, BITMAP_ARR_T, int));
#define yAssF_BITMAP_ARR_T(V,E,A)  yAss_BITMAP_ARR_T(V,E,A)
#define yEqF_BITMAP_ARR_T(Expr1,Expr2)  yEq_BITMAP_ARR_T(Expr1,Expr2)
#define yNEqF_BITMAP_ARR_T(Expr1,Expr2)  ( ! yEq_BITMAP_ARR_T(Expr1,Expr2) )
#define yTstI_BITMAP_ARR_T(yExpr)  yExpr
#ifndef ANY_BITMAP_ARR_T
#define ANY_BITMAP_ARR_T
#endif
#define z0VH5_copy(P)  P

extern void yAss_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T
  XPP((PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T *,
  PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T, int));
#define yAssF_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(V,E,A)  yAss_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(&(V),E,A)
#define yEqF_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2)  yEq_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2)
#define yNEqF_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2)  ( ! yEq_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2) )
#ifndef ANY_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T
#define ANY_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T yMake_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_BITMAP_ARR_T, ANY_P0_BTS_PR_T, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Boolean, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_P0_BTS_PR_T, \
  ANY_SECOND_PART_PACKET_ASSIGNMENT_T)
#endif
#define z0VI03_copy(P)  P

#define yAssF_PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T(V,E,A)  V = E
#define yEqF_PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2)  yEq_PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2)
#define yNEqF_PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2)  ( ! yEq_PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2) )
#ifndef ANY_PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T
#define ANY_PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T yMake_PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_P0_BTS_PR_T, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0VJ03_copy(P)  P

extern void yAss_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T
  XPP((E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T *,
  E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T, int));
#define yAssF_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(V,E,A)  yAss_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(&(V),E,A)
#define yEqF_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2)  yEq_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2)
#define yNEqF_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2)  ( ! yEq_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(Expr1,Expr2) )
#ifndef ANY_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T
#define ANY_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T yMake_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_ACCESS_TECH_REQ_T, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_BITMAP_ARR_T, ANY_P0_BTS_PR_T, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_SDL_Octet, ANY_P0_BTS_PR_T)
#endif
#define z0VK03_copy(P)  P

extern void yAss_z0VL_CA_62_X_uint8 XPP((z0VL_CA_62_X_uint8,
  z0VL_CA_62_X_uint8, int));
#define yAssF_z0VL_CA_62_X_uint8(V,E,A)  yAss_z0VL_CA_62_X_uint8(V,E,A)
#define yEqF_z0VL_CA_62_X_uint8(Expr1,Expr2)  yEq_z0VL_CA_62_X_uint8(Expr1,Expr2)
#define yNEqF_z0VL_CA_62_X_uint8(Expr1,Expr2)  ( ! yEq_z0VL_CA_62_X_uint8(Expr1,Expr2) )
#define yTstI_z0VL_CA_62_X_uint8(yExpr)  yExpr
#ifndef ANY_z0VL_CA_62_X_uint8
#define ANY_z0VL_CA_62_X_uint8
#endif
#define z0VL5_copy(P)  P

extern void yAss_IA_REST_OCTETS_T XPP((IA_REST_OCTETS_T *, IA_REST_OCTETS_T,
  int));
#define yAssF_IA_REST_OCTETS_T(V,E,A)  yAss_IA_REST_OCTETS_T(&(V),E,A)
#define yEqF_IA_REST_OCTETS_T(Expr1,Expr2)  yEq_IA_REST_OCTETS_T(Expr1,Expr2)
#define yNEqF_IA_REST_OCTETS_T(Expr1,Expr2)  ( ! yEq_IA_REST_OCTETS_T(Expr1,Expr2) )
#ifndef ANY_IA_REST_OCTETS_T
#define ANY_IA_REST_OCTETS_T yMake_IA_REST_OCTETS_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_z0VL_CA_62_X_uint8, ANY_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T, \
  ANY_PACKET_DOWNLINK_ASSIGNMENT_CONSTRUCTION_T, \
  ANY_SECOND_PART_PACKET_ASSIGNMENT_T, \
  ANY_E_PACKET_UPLINK_ASSIGNMENT_CONSTRUCTION_T)
#endif
#define z0VM3_copy(P)  P

#define yAssF_PACKET_CHANNEL_DESCRIPTION_T(V,E,A)  V = E
#define yEqF_PACKET_CHANNEL_DESCRIPTION_T(Expr1,Expr2)  yEq_PACKET_CHANNEL_DESCRIPTION_T(Expr1,Expr2)
#define yNEqF_PACKET_CHANNEL_DESCRIPTION_T(Expr1,Expr2)  ( ! yEq_PACKET_CHANNEL_DESCRIPTION_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CHANNEL_DESCRIPTION_T
#define ANY_PACKET_CHANNEL_DESCRIPTION_T yMake_PACKET_CHANNEL_DESCRIPTION_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0VN03_copy(P)  P

extern void yAss_RR_PACKET_UPLINK_ASSIGNMENT_T
  XPP((RR_PACKET_UPLINK_ASSIGNMENT_T *, RR_PACKET_UPLINK_ASSIGNMENT_T, int));
#define yAssF_RR_PACKET_UPLINK_ASSIGNMENT_T(V,E,A)  yAss_RR_PACKET_UPLINK_ASSIGNMENT_T(&(V),E,A)
#define yEqF_RR_PACKET_UPLINK_ASSIGNMENT_T(Expr1,Expr2)  yEq_RR_PACKET_UPLINK_ASSIGNMENT_T(Expr1,Expr2)
#define yNEqF_RR_PACKET_UPLINK_ASSIGNMENT_T(Expr1,Expr2)  ( ! yEq_RR_PACKET_UPLINK_ASSIGNMENT_T(Expr1,Expr2) )
#ifndef ANY_RR_PACKET_UPLINK_ASSIGNMENT_T
#define ANY_RR_PACKET_UPLINK_ASSIGNMENT_T yMake_RR_PACKET_UPLINK_ASSIGNMENT_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_PACKET_TIMING_ADVANCE_T, \
  ANY_DYNAMIC_ALLOC_T, ANY_SINGLE_BLOCK_ALLOC_T, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0VO03_copy(P)  P

extern void yAss_RR_PACKET_DOWNLINK_ASSIGNMENT_T
  XPP((RR_PACKET_DOWNLINK_ASSIGNMENT_T *, RR_PACKET_DOWNLINK_ASSIGNMENT_T,
  int));
#define yAssF_RR_PACKET_DOWNLINK_ASSIGNMENT_T(V,E,A)  yAss_RR_PACKET_DOWNLINK_ASSIGNMENT_T(&(V),E,A)
#define yEqF_RR_PACKET_DOWNLINK_ASSIGNMENT_T(Expr1,Expr2)  yEq_RR_PACKET_DOWNLINK_ASSIGNMENT_T(Expr1,Expr2)
#define yNEqF_RR_PACKET_DOWNLINK_ASSIGNMENT_T(Expr1,Expr2)  ( ! yEq_RR_PACKET_DOWNLINK_ASSIGNMENT_T(Expr1,Expr2) )
#ifndef ANY_RR_PACKET_DOWNLINK_ASSIGNMENT_T
#define ANY_RR_PACKET_DOWNLINK_ASSIGNMENT_T yMake_RR_PACKET_DOWNLINK_ASSIGNMENT_T(ANY_SDL_Octet, \
  ANY_z_ctypes_6_ShortInt, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_PACKET_TIMING_ADVANCE_T, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_POWER_CTRL_PARAMS_T, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_MEAS_MAPPING_T, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0VP03_copy(P)  P

extern void yAss_MAC_CONTROL_MESSAGE_T XPP((MAC_CONTROL_MESSAGE_T *,
  MAC_CONTROL_MESSAGE_T, int));
#define yAssF_MAC_CONTROL_MESSAGE_T(V,E,A)  yAss_MAC_CONTROL_MESSAGE_T(&(V),E,A)
#define yEqF_MAC_CONTROL_MESSAGE_T(Expr1,Expr2)  yEq_MAC_CONTROL_MESSAGE_T(Expr1,Expr2)
#define yNEqF_MAC_CONTROL_MESSAGE_T(Expr1,Expr2)  ( ! yEq_MAC_CONTROL_MESSAGE_T(Expr1,Expr2) )
#ifndef ANY_MAC_CONTROL_MESSAGE_T
#define ANY_MAC_CONTROL_MESSAGE_T
#endif
#define z0VQ03_copy(P)  P

#define yAssF_MAC_CONTROL_MESSAGE_PTR_T(V,E,A)  V = E
#define yDef_MAC_CONTROL_MESSAGE_PTR_T(yVar)  *(yVar) = z0VR0_Null()
#define yEqF_MAC_CONTROL_MESSAGE_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MAC_CONTROL_MESSAGE_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MAC_CONTROL_MESSAGE_PTR_T
#define ANY_MAC_CONTROL_MESSAGE_PTR_T 0
#endif
#define z0VRF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_MAC_CONTROL_MESSAGE_PTR_T() (MAC_CONTROL_MESSAGE_PTR_T)XALLOC_REF_VAL(sizeof(MAC_CONTROL_MESSAGE_T), ySrtN_MAC_CONTROL_MESSAGE_PTR_T)
#else
#define yAll_MAC_CONTROL_MESSAGE_PTR_T() (MAC_CONTROL_MESSAGE_PTR_T)XALLOC(sizeof(MAC_CONTROL_MESSAGE_T), \
  &ySrtR_MAC_CONTROL_MESSAGE_PTR_T)
#endif
#define yPlus_MAC_CONTROL_MESSAGE_PTR_T(P1,P2) (P1+P2)
#define yMinus_MAC_CONTROL_MESSAGE_PTR_T(P1,P2) (P1-P2)
#define z0VR0_Null() 0
#define z0VR1_Alloc() yAll_MAC_CONTROL_MESSAGE_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0VR6_free(P) XFREE_REF_VAL((void **)(P), sizeof(MAC_CONTROL_MESSAGE_T))
#else
#define z0VR6_free(P) XFREE((void **)(P), sizeof(MAC_CONTROL_MESSAGE_T))
#endif
#define z0VR9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0VRA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0VRB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_MAC_DECODE_INPUT_T(V,E,A)  V = E
#define yEqF_MAC_DECODE_INPUT_T(Expr1,Expr2)  yEq_MAC_DECODE_INPUT_T(Expr1,Expr2)
#define yNEqF_MAC_DECODE_INPUT_T(Expr1,Expr2)  ( ! yEq_MAC_DECODE_INPUT_T(Expr1,Expr2) )
#ifndef ANY_MAC_DECODE_INPUT_T
#define ANY_MAC_DECODE_INPUT_T yMake_MAC_DECODE_INPUT_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_OCTET_PTR_T, ANY_MAC_CONTROL_MESSAGE_PTR_T)
#endif
#define z0VS3_copy(P)  P

#define yAssF_MAC_DECODE_INPUT_PTR_T(V,E,A)  V = E
#define yDef_MAC_DECODE_INPUT_PTR_T(yVar)  *(yVar) = z0VT0_Null()
#define yEqF_MAC_DECODE_INPUT_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MAC_DECODE_INPUT_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MAC_DECODE_INPUT_PTR_T
#define ANY_MAC_DECODE_INPUT_PTR_T 0
#endif
#define z0VTF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_MAC_DECODE_INPUT_PTR_T() (MAC_DECODE_INPUT_PTR_T)XALLOC_REF_VAL(sizeof(MAC_DECODE_INPUT_T), ySrtN_MAC_DECODE_INPUT_PTR_T)
#else
#define yAll_MAC_DECODE_INPUT_PTR_T() (MAC_DECODE_INPUT_PTR_T)XALLOC(sizeof(MAC_DECODE_INPUT_T), \
  &ySrtR_MAC_DECODE_INPUT_PTR_T)
#endif
#define yPlus_MAC_DECODE_INPUT_PTR_T(P1,P2) (P1+P2)
#define yMinus_MAC_DECODE_INPUT_PTR_T(P1,P2) (P1-P2)
#define z0VT0_Null() 0
#define z0VT1_Alloc() yAll_MAC_DECODE_INPUT_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0VT6_free(P) XFREE_REF_VAL((void **)(P), sizeof(MAC_DECODE_INPUT_T))
#else
#define z0VT6_free(P) XFREE((void **)(P), sizeof(MAC_DECODE_INPUT_T))
#endif
#define z0VT9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0VTA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0VTB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_MAC_DECODE_OUTPUT_T(V,E,A)  V = E
#define yEqF_MAC_DECODE_OUTPUT_T(Expr1,Expr2)  yEq_MAC_DECODE_OUTPUT_T(Expr1,Expr2)
#define yNEqF_MAC_DECODE_OUTPUT_T(Expr1,Expr2)  ( ! yEq_MAC_DECODE_OUTPUT_T(Expr1,Expr2) )
#ifndef ANY_MAC_DECODE_OUTPUT_T
#define ANY_MAC_DECODE_OUTPUT_T yMake_MAC_DECODE_OUTPUT_T(ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_SDL_Octet)
#endif
#define z0VU3_copy(P)  P

#define yAssF_MAC_DECODE_OUTPUT_PTR_T(V,E,A)  V = E
#define yDef_MAC_DECODE_OUTPUT_PTR_T(yVar)  *(yVar) = z0VV0_Null()
#define yEqF_MAC_DECODE_OUTPUT_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MAC_DECODE_OUTPUT_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MAC_DECODE_OUTPUT_PTR_T
#define ANY_MAC_DECODE_OUTPUT_PTR_T 0
#endif
#define z0VVF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_MAC_DECODE_OUTPUT_PTR_T() (MAC_DECODE_OUTPUT_PTR_T)XALLOC_REF_VAL(sizeof(MAC_DECODE_OUTPUT_T), ySrtN_MAC_DECODE_OUTPUT_PTR_T)
#else
#define yAll_MAC_DECODE_OUTPUT_PTR_T() (MAC_DECODE_OUTPUT_PTR_T)XALLOC(sizeof(MAC_DECODE_OUTPUT_T), \
  &ySrtR_MAC_DECODE_OUTPUT_PTR_T)
#endif
#define yPlus_MAC_DECODE_OUTPUT_PTR_T(P1,P2) (P1+P2)
#define yMinus_MAC_DECODE_OUTPUT_PTR_T(P1,P2) (P1-P2)
#define z0VV0_Null() 0
#define z0VV1_Alloc() yAll_MAC_DECODE_OUTPUT_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0VV6_free(P) XFREE_REF_VAL((void **)(P), sizeof(MAC_DECODE_OUTPUT_T))
#else
#define z0VV6_free(P) XFREE((void **)(P), sizeof(MAC_DECODE_OUTPUT_T))
#endif
#define z0VV9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0VVA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0VVB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_MAC_ENCODE_INPUT_T(V,E,A)  V = E
#define yEqF_MAC_ENCODE_INPUT_T(Expr1,Expr2)  yEq_MAC_ENCODE_INPUT_T(Expr1,Expr2)
#define yNEqF_MAC_ENCODE_INPUT_T(Expr1,Expr2)  ( ! yEq_MAC_ENCODE_INPUT_T(Expr1,Expr2) )
#ifndef ANY_MAC_ENCODE_INPUT_T
#define ANY_MAC_ENCODE_INPUT_T yMake_MAC_ENCODE_INPUT_T(ANY_SDL_Octet, \
  ANY_z_ctypes_4_Voidstar, ANY_OCTET_PTR_T)
#endif
#define z0VW3_copy(P)  P

#define yAssF_MAC_ENCODE_INPUT_PTR_T(V,E,A)  V = E
#define yDef_MAC_ENCODE_INPUT_PTR_T(yVar)  *(yVar) = z0VX0_Null()
#define yEqF_MAC_ENCODE_INPUT_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MAC_ENCODE_INPUT_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MAC_ENCODE_INPUT_PTR_T
#define ANY_MAC_ENCODE_INPUT_PTR_T 0
#endif
#define z0VXF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_MAC_ENCODE_INPUT_PTR_T() (MAC_ENCODE_INPUT_PTR_T)XALLOC_REF_VAL(sizeof(MAC_ENCODE_INPUT_T), ySrtN_MAC_ENCODE_INPUT_PTR_T)
#else
#define yAll_MAC_ENCODE_INPUT_PTR_T() (MAC_ENCODE_INPUT_PTR_T)XALLOC(sizeof(MAC_ENCODE_INPUT_T), \
  &ySrtR_MAC_ENCODE_INPUT_PTR_T)
#endif
#define yPlus_MAC_ENCODE_INPUT_PTR_T(P1,P2) (P1+P2)
#define yMinus_MAC_ENCODE_INPUT_PTR_T(P1,P2) (P1-P2)
#define z0VX0_Null() 0
#define z0VX1_Alloc() yAll_MAC_ENCODE_INPUT_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0VX6_free(P) XFREE_REF_VAL((void **)(P), sizeof(MAC_ENCODE_INPUT_T))
#else
#define z0VX6_free(P) XFREE((void **)(P), sizeof(MAC_ENCODE_INPUT_T))
#endif
#define z0VX9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0VXA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0VXB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_MAC_ENCODE_OUTPUT_T(V,E,A)  V = E
#define yEqF_MAC_ENCODE_OUTPUT_T(Expr1,Expr2)  yEq_MAC_ENCODE_OUTPUT_T(Expr1,Expr2)
#define yNEqF_MAC_ENCODE_OUTPUT_T(Expr1,Expr2)  ( ! yEq_MAC_ENCODE_OUTPUT_T(Expr1,Expr2) )
#ifndef ANY_MAC_ENCODE_OUTPUT_T
#define ANY_MAC_ENCODE_OUTPUT_T yMake_MAC_ENCODE_OUTPUT_T(ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0VY3_copy(P)  P

#define yAssF_MAC_ENCODE_OUTPUT_PTR_T(V,E,A)  V = E
#define yDef_MAC_ENCODE_OUTPUT_PTR_T(yVar)  *(yVar) = z0VZ0_Null()
#define yEqF_MAC_ENCODE_OUTPUT_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_MAC_ENCODE_OUTPUT_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_MAC_ENCODE_OUTPUT_PTR_T
#define ANY_MAC_ENCODE_OUTPUT_PTR_T 0
#endif
#define z0VZF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_MAC_ENCODE_OUTPUT_PTR_T() (MAC_ENCODE_OUTPUT_PTR_T)XALLOC_REF_VAL(sizeof(MAC_ENCODE_OUTPUT_T), ySrtN_MAC_ENCODE_OUTPUT_PTR_T)
#else
#define yAll_MAC_ENCODE_OUTPUT_PTR_T() (MAC_ENCODE_OUTPUT_PTR_T)XALLOC(sizeof(MAC_ENCODE_OUTPUT_T), \
  &ySrtR_MAC_ENCODE_OUTPUT_PTR_T)
#endif
#define yPlus_MAC_ENCODE_OUTPUT_PTR_T(P1,P2) (P1+P2)
#define yMinus_MAC_ENCODE_OUTPUT_PTR_T(P1,P2) (P1-P2)
#define z0VZ0_Null() 0
#define z0VZ1_Alloc() yAll_MAC_ENCODE_OUTPUT_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0VZ6_free(P) XFREE_REF_VAL((void **)(P), sizeof(MAC_ENCODE_OUTPUT_T))
#else
#define z0VZ6_free(P) XFREE((void **)(P), sizeof(MAC_ENCODE_OUTPUT_T))
#endif
#define z0VZ9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0VZA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0VZB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_PACKET_CELL_CHANGE_CONTINUE_T(V,E,A)  V = E
#define yEqF_PACKET_CELL_CHANGE_CONTINUE_T(Expr1,Expr2)  yEq_PACKET_CELL_CHANGE_CONTINUE_T(Expr1,Expr2)
#define yNEqF_PACKET_CELL_CHANGE_CONTINUE_T(Expr1,Expr2)  ( ! yEq_PACKET_CELL_CHANGE_CONTINUE_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CELL_CHANGE_CONTINUE_T
#define ANY_PACKET_CELL_CHANGE_CONTINUE_T yMake_PACKET_CELL_CHANGE_CONTINUE_T(ANY_SDL_Octet, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0W03_copy(P)  P

#define yAssF_MULTISLOT_CAPABILITY_T(V,E,A)  V = E
#define yEqF_MULTISLOT_CAPABILITY_T(Expr1,Expr2)  yEq_MULTISLOT_CAPABILITY_T(Expr1,Expr2)
#define yNEqF_MULTISLOT_CAPABILITY_T(Expr1,Expr2)  ( ! yEq_MULTISLOT_CAPABILITY_T(Expr1,Expr2) )
#ifndef ANY_MULTISLOT_CAPABILITY_T
#define ANY_MULTISLOT_CAPABILITY_T yMake_MULTISLOT_CAPABILITY_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Octet)
#endif
#define z0W103_copy(P)  P

#define yAssF_A5_BITS_T(V,E,A)  V = E
#define yEqF_A5_BITS_T(Expr1,Expr2)  yEq_A5_BITS_T(Expr1,Expr2)
#define yNEqF_A5_BITS_T(Expr1,Expr2)  ( ! yEq_A5_BITS_T(Expr1,Expr2) )
#ifndef ANY_A5_BITS_T
#define ANY_A5_BITS_T yMake_A5_BITS_T(ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean)
#endif
#define z0W23_copy(P)  P

#define yAssF_ACCESS_CAPABILITIES_CONTENT_T(V,E,A)  V = E
#define yEqF_ACCESS_CAPABILITIES_CONTENT_T(Expr1,Expr2)  yEq_ACCESS_CAPABILITIES_CONTENT_T(Expr1,Expr2)
#define yNEqF_ACCESS_CAPABILITIES_CONTENT_T(Expr1,Expr2)  ( ! yEq_ACCESS_CAPABILITIES_CONTENT_T(Expr1,Expr2) )
#ifndef ANY_ACCESS_CAPABILITIES_CONTENT_T
#define ANY_ACCESS_CAPABILITIES_CONTENT_T yMake_ACCESS_CAPABILITIES_CONTENT_T(ANY_SDL_Octet, \
  ANY_SDL_Boolean, ANY_A5_BITS_T, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_MULTISLOT_CAPABILITY_T, ANY_SDL_Boolean, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Boolean)
#endif
#define z0W303_copy(P)  P

#define yAssF_ADD_ACCESS_CAPAB_STRUCT_T(V,E,A)  V = E
#define yEqF_ADD_ACCESS_CAPAB_STRUCT_T(Expr1,Expr2)  yEq_ADD_ACCESS_CAPAB_STRUCT_T(Expr1,Expr2)
#define yNEqF_ADD_ACCESS_CAPAB_STRUCT_T(Expr1,Expr2)  ( ! yEq_ADD_ACCESS_CAPAB_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_ADD_ACCESS_CAPAB_STRUCT_T
#define ANY_ADD_ACCESS_CAPAB_STRUCT_T yMake_ADD_ACCESS_CAPAB_STRUCT_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0W43_copy(P)  P

#define yAssF_ACCESS_TECHNOLOGY_TYPE_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_ACCESS_TECHNOLOGY_TYPE_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_ACCESS_TECHNOLOGY_TYPE_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_ACCESS_TECHNOLOGY_TYPE_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#define yTstA_ACCESS_TECHNOLOGY_TYPE_T(yExpr)  yExpr
#define yTstI_ACCESS_TECHNOLOGY_TYPE_T(yExpr)  yExpr
#ifndef ANY_ACCESS_TECHNOLOGY_TYPE_T
#define ANY_ACCESS_TECHNOLOGY_TYPE_T ANY_for_syntype_ACCESS_TECHNOLOGY_TYPE_T_not_implemented
#endif

#define yAssF_MS_RA_CAPABILITY_VALUE_T(V,E,A)  V = E
#define yEqF_MS_RA_CAPABILITY_VALUE_T(Expr1,Expr2)  yEq_MS_RA_CAPABILITY_VALUE_T(Expr1,Expr2)
#define yNEqF_MS_RA_CAPABILITY_VALUE_T(Expr1,Expr2)  ( ! yEq_MS_RA_CAPABILITY_VALUE_T(Expr1,Expr2) )
#ifndef ANY_MS_RA_CAPABILITY_VALUE_T
#define ANY_MS_RA_CAPABILITY_VALUE_T yMake_MS_RA_CAPABILITY_VALUE_T(ANY_SDL_Boolean, \
  ANY_ACCESS_TECHNOLOGY_TYPE_T, ANY_SDL_Octet, \
  ANY_ACCESS_CAPABILITIES_CONTENT_T, ANY_ADD_ACCESS_CAPAB_STRUCT_T)
#endif
#define z0W53_copy(P)  P

extern void yAss_MS_RA_CAPABILITY_VALUE_ARR_T
  XPP((MS_RA_CAPABILITY_VALUE_ARR_T, MS_RA_CAPABILITY_VALUE_ARR_T, int));
#define yAssF_MS_RA_CAPABILITY_VALUE_ARR_T(V,E,A)  yAss_MS_RA_CAPABILITY_VALUE_ARR_T(V,E,A)
#define yEqF_MS_RA_CAPABILITY_VALUE_ARR_T(Expr1,Expr2)  yEq_MS_RA_CAPABILITY_VALUE_ARR_T(Expr1,Expr2)
#define yNEqF_MS_RA_CAPABILITY_VALUE_ARR_T(Expr1,Expr2)  ( ! yEq_MS_RA_CAPABILITY_VALUE_ARR_T(Expr1,Expr2) )
#define yTstI_MS_RA_CAPABILITY_VALUE_ARR_T(yExpr)  yExpr
#ifndef ANY_MS_RA_CAPABILITY_VALUE_ARR_T
#define ANY_MS_RA_CAPABILITY_VALUE_ARR_T
#endif
#define z0W65_copy(P)  P

extern void yAss_MS_RA_CAPABILITY_T XPP((MS_RA_CAPABILITY_T *,
  MS_RA_CAPABILITY_T, int));
#define yAssF_MS_RA_CAPABILITY_T(V,E,A)  yAss_MS_RA_CAPABILITY_T(&(V),E,A)
#define yEqF_MS_RA_CAPABILITY_T(Expr1,Expr2)  yEq_MS_RA_CAPABILITY_T(Expr1,Expr2)
#define yNEqF_MS_RA_CAPABILITY_T(Expr1,Expr2)  ( ! yEq_MS_RA_CAPABILITY_T(Expr1,Expr2) )
#ifndef ANY_MS_RA_CAPABILITY_T
#define ANY_MS_RA_CAPABILITY_T yMake_MS_RA_CAPABILITY_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_MS_RA_CAPABILITY_VALUE_ARR_T)
#endif
#define z0W73_copy(P)  P

#define yAssF_GMM_CAUSE_T(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_GMM_CAUSE_T(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_GMM_CAUSE_T(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_GMM_CAUSE_T(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_GMM_CAUSE_T
#define ANY_GMM_CAUSE_T ANY_SDL_Integer
#endif

#define yAssF_RECEIVE_NPDU_NUMBER_T(V,E,A)  V = E
#define yEqF_RECEIVE_NPDU_NUMBER_T(Expr1,Expr2)  yEq_RECEIVE_NPDU_NUMBER_T(Expr1,Expr2)
#define yNEqF_RECEIVE_NPDU_NUMBER_T(Expr1,Expr2)  ( ! yEq_RECEIVE_NPDU_NUMBER_T(Expr1,Expr2) )
#ifndef ANY_RECEIVE_NPDU_NUMBER_T
#define ANY_RECEIVE_NPDU_NUMBER_T yMake_RECEIVE_NPDU_NUMBER_T(ANY_NSAPI_NUM_T, \
  ANY_z_ctypes_6_ShortInt)
#endif
#define z0W83_copy(P)  P

extern void yAss_RECEIVE_NPDU_NUMBER_ARR_T XPP((RECEIVE_NPDU_NUMBER_ARR_T,
  RECEIVE_NPDU_NUMBER_ARR_T, int));
#define yAssF_RECEIVE_NPDU_NUMBER_ARR_T(V,E,A)  yAss_RECEIVE_NPDU_NUMBER_ARR_T(V,E,A)
#define yEqF_RECEIVE_NPDU_NUMBER_ARR_T(Expr1,Expr2)  yEq_RECEIVE_NPDU_NUMBER_ARR_T(Expr1,Expr2)
#define yNEqF_RECEIVE_NPDU_NUMBER_ARR_T(Expr1,Expr2)  ( ! yEq_RECEIVE_NPDU_NUMBER_ARR_T(Expr1,Expr2) )
#define yTstI_RECEIVE_NPDU_NUMBER_ARR_T(yExpr)  yExpr
#ifndef ANY_RECEIVE_NPDU_NUMBER_ARR_T
#define ANY_RECEIVE_NPDU_NUMBER_ARR_T
#endif
#define z0W95_copy(P)  P

extern void yAss_RECEIVE_NPDU_NUMBER_LIST_T XPP((RECEIVE_NPDU_NUMBER_LIST_T *,
  RECEIVE_NPDU_NUMBER_LIST_T, int));
#define yAssF_RECEIVE_NPDU_NUMBER_LIST_T(V,E,A)  yAss_RECEIVE_NPDU_NUMBER_LIST_T(&(V),E,A)
#define yEqF_RECEIVE_NPDU_NUMBER_LIST_T(Expr1,Expr2)  yEq_RECEIVE_NPDU_NUMBER_LIST_T(Expr1,Expr2)
#define yNEqF_RECEIVE_NPDU_NUMBER_LIST_T(Expr1,Expr2)  ( ! yEq_RECEIVE_NPDU_NUMBER_LIST_T(Expr1,Expr2) )
#ifndef ANY_RECEIVE_NPDU_NUMBER_LIST_T
#define ANY_RECEIVE_NPDU_NUMBER_LIST_T yMake_RECEIVE_NPDU_NUMBER_LIST_T(ANY_z_ctypes_6_ShortInt, \
  ANY_RECEIVE_NPDU_NUMBER_ARR_T)
#endif
#define z0WA3_copy(P)  P

extern void yAss_PDP_CONTEXT_STATUS_ARR_T XPP((PDP_CONTEXT_STATUS_ARR_T,
  PDP_CONTEXT_STATUS_ARR_T, int));
#define yAssF_PDP_CONTEXT_STATUS_ARR_T(V,E,A)  yAss_PDP_CONTEXT_STATUS_ARR_T(V,E,A)
#define yEqF_PDP_CONTEXT_STATUS_ARR_T(Expr1,Expr2)  yEq_PDP_CONTEXT_STATUS_ARR_T(Expr1,Expr2)
#define yNEqF_PDP_CONTEXT_STATUS_ARR_T(Expr1,Expr2)  ( ! yEq_PDP_CONTEXT_STATUS_ARR_T(Expr1,Expr2) )
#define yTstI_PDP_CONTEXT_STATUS_ARR_T(yExpr)  yExpr
#ifndef ANY_PDP_CONTEXT_STATUS_ARR_T
#define ANY_PDP_CONTEXT_STATUS_ARR_T
#endif
#define z0WB5_copy(P)  P

#define yAssF_SM_CAUSE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_SM_CAUSE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_SM_CAUSE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_SM_CAUSE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_SM_CAUSE_T
#define ANY_SM_CAUSE_T ANY_SDL_Integer
#endif

extern void yAss_NSAPI_ARR_T XPP((NSAPI_ARR_T, NSAPI_ARR_T, int));
#define yAssF_NSAPI_ARR_T(V,E,A)  yAss_NSAPI_ARR_T(V,E,A)
#define yEqF_NSAPI_ARR_T(Expr1,Expr2)  yEq_NSAPI_ARR_T(Expr1,Expr2)
#define yNEqF_NSAPI_ARR_T(Expr1,Expr2)  ( ! yEq_NSAPI_ARR_T(Expr1,Expr2) )
#define yTstI_NSAPI_ARR_T(yExpr)  yExpr
#ifndef ANY_NSAPI_ARR_T
#define ANY_NSAPI_ARR_T
#endif
#define z0WC5_copy(P)  P

extern void yAss_NSAPI_LIST_T XPP((NSAPI_LIST_T *, NSAPI_LIST_T, int));
#define yAssF_NSAPI_LIST_T(V,E,A)  yAss_NSAPI_LIST_T(&(V),E,A)
#define yEqF_NSAPI_LIST_T(Expr1,Expr2)  yEq_NSAPI_LIST_T(Expr1,Expr2)
#define yNEqF_NSAPI_LIST_T(Expr1,Expr2)  ( ! yEq_NSAPI_LIST_T(Expr1,Expr2) )
#ifndef ANY_NSAPI_LIST_T
#define ANY_NSAPI_LIST_T yMake_NSAPI_LIST_T(ANY_z_ctypes_6_ShortInt, \
  ANY_NSAPI_ARR_T)
#endif
#define z0WD3_copy(P)  P

#define yAssF_TEAR_DOWN_ID_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_TEAR_DOWN_ID_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_TEAR_DOWN_ID_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_TEAR_DOWN_ID_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_TEAR_DOWN_ID_T
#define ANY_TEAR_DOWN_ID_T ANY_SDL_Boolean
#endif

#define yAssF_PDU_STRUCT_T(V,E,A)  V = E
#define yEqF_PDU_STRUCT_T(Expr1,Expr2)  yEq_PDU_STRUCT_T(Expr1,Expr2)
#define yNEqF_PDU_STRUCT_T(Expr1,Expr2)  ( ! yEq_PDU_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_PDU_STRUCT_T
#define ANY_PDU_STRUCT_T yMake_PDU_STRUCT_T(ANY_OCTET_PTR_T, \
  ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0WE3_copy(P)  P

extern void yAss_OCTET_ARR_APN_T XPP((OCTET_ARR_APN_T, OCTET_ARR_APN_T, int));
#define yAssF_OCTET_ARR_APN_T(V,E,A)  yAss_OCTET_ARR_APN_T(V,E,A)
#define yEqF_OCTET_ARR_APN_T(Expr1,Expr2)  yEq_OCTET_ARR_APN_T(Expr1,Expr2)
#define yNEqF_OCTET_ARR_APN_T(Expr1,Expr2)  ( ! yEq_OCTET_ARR_APN_T(Expr1,Expr2) )
#define yTstI_OCTET_ARR_APN_T(yExpr)  yExpr
#ifndef ANY_OCTET_ARR_APN_T
#define ANY_OCTET_ARR_APN_T
#endif
#define z0WF5_copy(P)  P

extern void yAss_OCTET_ARR16_T XPP((OCTET_ARR16_T, OCTET_ARR16_T, int));
#define yAssF_OCTET_ARR16_T(V,E,A)  yAss_OCTET_ARR16_T(V,E,A)
#define yEqF_OCTET_ARR16_T(Expr1,Expr2)  yEq_OCTET_ARR16_T(Expr1,Expr2)
#define yNEqF_OCTET_ARR16_T(Expr1,Expr2)  ( ! yEq_OCTET_ARR16_T(Expr1,Expr2) )
#define yTstI_OCTET_ARR16_T(yExpr)  yExpr
#ifndef ANY_OCTET_ARR16_T
#define ANY_OCTET_ARR16_T
#endif
#define z0WG5_copy(P)  P

extern void yAss_OCTET_ARR251_T XPP((OCTET_ARR251_T, OCTET_ARR251_T, int));
#define yAssF_OCTET_ARR251_T(V,E,A)  yAss_OCTET_ARR251_T(V,E,A)
#define yEqF_OCTET_ARR251_T(Expr1,Expr2)  yEq_OCTET_ARR251_T(Expr1,Expr2)
#define yNEqF_OCTET_ARR251_T(Expr1,Expr2)  ( ! yEq_OCTET_ARR251_T(Expr1,Expr2) )
#define yTstI_OCTET_ARR251_T(yExpr)  yExpr
#ifndef ANY_OCTET_ARR251_T
#define ANY_OCTET_ARR251_T
#endif
#define z0WH5_copy(P)  P

extern void yAss_OCTET_ARR254_T XPP((OCTET_ARR254_T, OCTET_ARR254_T, int));
#define yAssF_OCTET_ARR254_T(V,E,A)  yAss_OCTET_ARR254_T(V,E,A)
#define yEqF_OCTET_ARR254_T(Expr1,Expr2)  yEq_OCTET_ARR254_T(Expr1,Expr2)
#define yNEqF_OCTET_ARR254_T(Expr1,Expr2)  ( ! yEq_OCTET_ARR254_T(Expr1,Expr2) )
#define yTstI_OCTET_ARR254_T(yExpr)  yExpr
#ifndef ANY_OCTET_ARR254_T
#define ANY_OCTET_ARR254_T
#endif
#define z0WI5_copy(P)  P

#define yAssF_PDP_ADDR_TYPE_E(V,E,A)  V = E
#define yDef_PDP_ADDR_TYPE_E(yVar)  *(yVar) = SM_PPP
#define yEqF_PDP_ADDR_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_PDP_ADDR_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_PDP_ADDR_TYPE_E
#define ANY_PDP_ADDR_TYPE_E (PDP_ADDR_TYPE_E)(0 + GETINTRAND%((int)(PDP_EMPTY) \
  +1))
#endif
#define z0WJ7_copy(P)  P

extern void yAss_PDP_ADDRESS_T XPP((PDP_ADDRESS_T *, PDP_ADDRESS_T, int));
#define yAssF_PDP_ADDRESS_T(V,E,A)  yAss_PDP_ADDRESS_T(&(V),E,A)
#define yEqF_PDP_ADDRESS_T(Expr1,Expr2)  yEq_PDP_ADDRESS_T(Expr1,Expr2)
#define yNEqF_PDP_ADDRESS_T(Expr1,Expr2)  ( ! yEq_PDP_ADDRESS_T(Expr1,Expr2) )
#ifndef ANY_PDP_ADDRESS_T
#define ANY_PDP_ADDRESS_T yMake_PDP_ADDRESS_T(ANY_PDP_ADDR_TYPE_E, \
  ANY_OCTET_ARR16_T, ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0WK3_copy(P)  P

extern void yAss_APN_T XPP((APN_T *, APN_T, int));
#define yAssF_APN_T(V,E,A)  yAss_APN_T(&(V),E,A)
#define yEqF_APN_T(Expr1,Expr2)  yEq_APN_T(Expr1,Expr2)
#define yNEqF_APN_T(Expr1,Expr2)  ( ! yEq_APN_T(Expr1,Expr2) )
#ifndef ANY_APN_T
#define ANY_APN_T yMake_APN_T(ANY_OCTET_ARR_APN_T, \
  ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0WL3_copy(P)  P

#define yAssF_APN_PTR_T(V,E,A)  V = E
#define yDef_APN_PTR_T(yVar)  *(yVar) = z0WM0_Null()
#define yEqF_APN_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_APN_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_APN_PTR_T
#define ANY_APN_PTR_T 0
#endif
#define z0WMF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_APN_PTR_T() (APN_PTR_T)XALLOC_REF_VAL(sizeof(APN_T), ySrtN_APN_PTR_T)
#else
#define yAll_APN_PTR_T() (APN_PTR_T)XALLOC(sizeof(APN_T), &ySrtR_APN_PTR_T)
#endif
#define yPlus_APN_PTR_T(P1,P2) (P1+P2)
#define yMinus_APN_PTR_T(P1,P2) (P1-P2)
#define z0WM0_Null() 0
#define z0WM1_Alloc() yAll_APN_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0WM6_free(P) XFREE_REF_VAL((void **)(P), sizeof(APN_T))
#else
#define z0WM6_free(P) XFREE((void **)(P), sizeof(APN_T))
#endif
#define z0WM9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0WMA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0WMB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

extern void yAss_PCO_T XPP((PCO_T *, PCO_T, int));
#define yAssF_PCO_T(V,E,A)  yAss_PCO_T(&(V),E,A)
#define yEqF_PCO_T(Expr1,Expr2)  yEq_PCO_T(Expr1,Expr2)
#define yNEqF_PCO_T(Expr1,Expr2)  ( ! yEq_PCO_T(Expr1,Expr2) )
#ifndef ANY_PCO_T
#define ANY_PCO_T yMake_PCO_T(ANY_OCTET_ARR251_T, \
  ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0WN3_copy(P)  P

#define yAssF_TFT_OPCODE_E(V,E,A)  V = E
#define yDef_TFT_OPCODE_E(yVar)  *(yVar) = NO_OP_TFT_2G
#define yEqF_TFT_OPCODE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_TFT_OPCODE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_TFT_OPCODE_E
#define ANY_TFT_OPCODE_E (TFT_OPCODE_E)(0 + \
  GETINTRAND%((int)(DELETE_PKT_FILTER_FROM_TFT_2G)+1))
#endif
#define z0WO9_copy(P)  P

extern void yAss_TRAFFIC_FLOW_TEMPLATE_T XPP((TRAFFIC_FLOW_TEMPLATE_T *,
  TRAFFIC_FLOW_TEMPLATE_T, int));
#define yAssF_TRAFFIC_FLOW_TEMPLATE_T(V,E,A)  yAss_TRAFFIC_FLOW_TEMPLATE_T(&(V),E,A)
#define yEqF_TRAFFIC_FLOW_TEMPLATE_T(Expr1,Expr2)  yEq_TRAFFIC_FLOW_TEMPLATE_T(Expr1,Expr2)
#define yNEqF_TRAFFIC_FLOW_TEMPLATE_T(Expr1,Expr2)  ( ! yEq_TRAFFIC_FLOW_TEMPLATE_T(Expr1,Expr2) )
#ifndef ANY_TRAFFIC_FLOW_TEMPLATE_T
#define ANY_TRAFFIC_FLOW_TEMPLATE_T yMake_TRAFFIC_FLOW_TEMPLATE_T(ANY_OCTET_ARR254_T, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_TFT_OPCODE_E)
#endif
#define z0WP3_copy(P)  P

#define yAssF_RESPONSE_MODE_E(V,E,A)  V = E
#define yDef_RESPONSE_MODE_E(yVar)  *(yVar) = MANUAL
#define yEqF_RESPONSE_MODE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_RESPONSE_MODE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_RESPONSE_MODE_E
#define ANY_RESPONSE_MODE_E (RESPONSE_MODE_E)(0 + GETINTRAND%((int)(AUTO)+1))
#endif
#define z0WQ5_copy(P)  P

#define yAssF_GMM_ATTACH_TYPE_T(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_GMM_ATTACH_TYPE_T(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_GMM_ATTACH_TYPE_T(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_GMM_ATTACH_TYPE_T(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_GMM_ATTACH_TYPE_T
#define ANY_GMM_ATTACH_TYPE_T ANY_SDL_Integer
#endif

#define yAssF_G_ATTACH_RESULT_E(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_G_ATTACH_RESULT_E(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_G_ATTACH_RESULT_E(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_G_ATTACH_RESULT_E(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_G_ATTACH_RESULT_E
#define ANY_G_ATTACH_RESULT_E ANY_SDL_Integer
#endif

#define yAssF_GPRS_TIMER_DURATION_T(V,E,A)  yAssF_SDL_Duration(V,E,A)
#define yDef_GPRS_TIMER_DURATION_T(yVar) \
  xDef_SDL_Duration((SDL_Duration *)yVar)
#define yEqF_GPRS_TIMER_DURATION_T(Expr1,Expr2)  yEqF_SDL_Duration(Expr1,Expr2)
#define yNEqF_GPRS_TIMER_DURATION_T(Expr1,Expr2)  yNEqF_SDL_Duration(Expr1,Expr2)
#ifndef ANY_GPRS_TIMER_DURATION_T
#define ANY_GPRS_TIMER_DURATION_T ANY_SDL_Duration
#endif

#define yAssF_GMM_DETACH_TYPE_E(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_GMM_DETACH_TYPE_E(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_GMM_DETACH_TYPE_E(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_GMM_DETACH_TYPE_E(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_GMM_DETACH_TYPE_E
#define ANY_GMM_DETACH_TYPE_E ANY_SDL_Integer
#endif

#define yAssF_GMM_MN_ATTCH_RESULT_T(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_GMM_MN_ATTCH_RESULT_T(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_GMM_MN_ATTCH_RESULT_T(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_GMM_MN_ATTCH_RESULT_T(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_GMM_MN_ATTCH_RESULT_T
#define ANY_GMM_MN_ATTCH_RESULT_T ANY_SDL_Integer
#endif

#define yAssF_GMM_MN_DETACH_RESULT_T(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_GMM_MN_DETACH_RESULT_T(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_GMM_MN_DETACH_RESULT_T(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_GMM_MN_DETACH_RESULT_T(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_GMM_MN_DETACH_RESULT_T
#define ANY_GMM_MN_DETACH_RESULT_T ANY_SDL_Integer
#endif

#define yAssF_LLC_XID_PARAM_T(V,E,A)  V = E
#define yDef_LLC_XID_PARAM_T(yVar)  *(yVar) = yMake_LLC_XID_PARAM_T(SDL_False, \
  SDL_False, SDL_False, SDL_False, SDL_False, SDL_False, SDL_False, SDL_False, \
  SDL_False, SDL_False, SDL_INTEGER_LIT(0), SDL_INTEGER_LIT(0), \
  SDL_INTEGER_LIT(0), SDL_INTEGER_LIT(0), SDL_INTEGER_LIT(0), \
  SDL_INTEGER_LIT(0), xI2O_SDL_Octet(SDL_INTEGER_LIT(0)), xI2O_SDL_Octet( \
  SDL_INTEGER_LIT(0)), xI2O_SDL_Octet(SDL_INTEGER_LIT(0)), xI2O_SDL_Octet( \
  SDL_INTEGER_LIT(0)))
#define yEqF_LLC_XID_PARAM_T(Expr1,Expr2)  yEq_LLC_XID_PARAM_T(Expr1,Expr2)
#define yNEqF_LLC_XID_PARAM_T(Expr1,Expr2)  ( ! yEq_LLC_XID_PARAM_T(Expr1,Expr2) )
#ifndef ANY_LLC_XID_PARAM_T
#define ANY_LLC_XID_PARAM_T yMake_LLC_XID_PARAM_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_z_ctypes_8_UnsignedShortInt, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, \
  ANY_SDL_Octet)
#endif
#define z0WR03_copy(P)  P

#define yAssF_GMM_REGISTRATION_STATE_T(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_GMM_REGISTRATION_STATE_T(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_GMM_REGISTRATION_STATE_T(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_GMM_REGISTRATION_STATE_T(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_GMM_REGISTRATION_STATE_T
#define ANY_GMM_REGISTRATION_STATE_T ANY_SDL_Integer
#endif

#define yAssF_GMM_CKSN_E(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_GMM_CKSN_E(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_GMM_CKSN_E(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_GMM_CKSN_E(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#define yTstA_GMM_CKSN_E(yExpr)  yExpr
#define yTstI_GMM_CKSN_E(yExpr)  yExpr
#ifndef ANY_GMM_CKSN_E
#define ANY_GMM_CKSN_E (GMM_CKSN_E)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(7)+1))
#endif

#define yAssF_LIST_TYPE_FORBIDDEN_E(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_LIST_TYPE_FORBIDDEN_E(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_LIST_TYPE_FORBIDDEN_E(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_LIST_TYPE_FORBIDDEN_E(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_LIST_TYPE_FORBIDDEN_E
#define ANY_LIST_TYPE_FORBIDDEN_E ANY_SDL_Integer
#endif

extern void yAss_GPRS_KC_ARR_T XPP((GPRS_KC_ARR_T, GPRS_KC_ARR_T, int));
#define yAssF_GPRS_KC_ARR_T(V,E,A)  yAss_GPRS_KC_ARR_T(V,E,A)
#define yEqF_GPRS_KC_ARR_T(Expr1,Expr2)  yEq_GPRS_KC_ARR_T(Expr1,Expr2)
#define yNEqF_GPRS_KC_ARR_T(Expr1,Expr2)  ( ! yEq_GPRS_KC_ARR_T(Expr1,Expr2) )
#define yTstI_GPRS_KC_ARR_T(yExpr)  yExpr
#ifndef ANY_GPRS_KC_ARR_T
#define ANY_GPRS_KC_ARR_T
#endif
#define z0WS5_copy(P)  P

#define yAssF_P_TMSI_SIGNATURE_T(V,E,A)  V = E
#define yEqF_P_TMSI_SIGNATURE_T(Expr1,Expr2)  yEq_P_TMSI_SIGNATURE_T(Expr1,Expr2)
#define yNEqF_P_TMSI_SIGNATURE_T(Expr1,Expr2)  ( ! yEq_P_TMSI_SIGNATURE_T(Expr1,Expr2) )
#ifndef ANY_P_TMSI_SIGNATURE_T
#define ANY_P_TMSI_SIGNATURE_T yMake_P_TMSI_SIGNATURE_T(ANY_SDL_Integer, \
  ANY_SDL_Boolean)
#endif
#define z0WT3_copy(P)  P

#define yAssF_MOBILE_TYPE_ID_E(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_MOBILE_TYPE_ID_E(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_MOBILE_TYPE_ID_E(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_MOBILE_TYPE_ID_E(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#define yTstA_MOBILE_TYPE_ID_E(yExpr)  yExpr
#define yTstI_MOBILE_TYPE_ID_E(yExpr)  yExpr
#ifndef ANY_MOBILE_TYPE_ID_E
#define ANY_MOBILE_TYPE_ID_E (MOBILE_TYPE_ID_E)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(4)+1))
#endif

extern void yAss_MOBILE_IDENTITY_T XPP((MOBILE_IDENTITY_T *, MOBILE_IDENTITY_T,
  int));
#define yAssF_MOBILE_IDENTITY_T(V,E,A)  yAss_MOBILE_IDENTITY_T(&(V),E,A)
#define yEqF_MOBILE_IDENTITY_T(Expr1,Expr2)  yEq_MOBILE_IDENTITY_T(Expr1,Expr2)
#define yNEqF_MOBILE_IDENTITY_T(Expr1,Expr2)  ( ! yEq_MOBILE_IDENTITY_T(Expr1,Expr2) )
#ifndef ANY_MOBILE_IDENTITY_T
#define ANY_MOBILE_IDENTITY_T yMake_MOBILE_IDENTITY_T(ANY_MOBILE_TYPE_ID_E, \
  ANY_MOBILE_ID_UNION)
#endif
#define z0WU3_copy(P)  P

#define yAssF_EMG_SERV_CATG_VAL_T(V,E,A)  V = E
#define yEqF_EMG_SERV_CATG_VAL_T(Expr1,Expr2)  yEq_EMG_SERV_CATG_VAL_T(Expr1,Expr2)
#define yNEqF_EMG_SERV_CATG_VAL_T(Expr1,Expr2)  ( ! yEq_EMG_SERV_CATG_VAL_T(Expr1,Expr2) )
#ifndef ANY_EMG_SERV_CATG_VAL_T
#define ANY_EMG_SERV_CATG_VAL_T yMake_EMG_SERV_CATG_VAL_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean)
#endif
#define z0WV3_copy(P)  P

extern void yAss_EMG_NUM_T XPP((EMG_NUM_T *, EMG_NUM_T, int));
#define yAssF_EMG_NUM_T(V,E,A)  yAss_EMG_NUM_T(&(V),E,A)
#define yEqF_EMG_NUM_T(Expr1,Expr2)  yEq_EMG_NUM_T(Expr1,Expr2)
#define yNEqF_EMG_NUM_T(Expr1,Expr2)  ( ! yEq_EMG_NUM_T(Expr1,Expr2) )
#ifndef ANY_EMG_NUM_T
#define ANY_EMG_NUM_T yMake_EMG_NUM_T(ANY_EMG_SERV_CATG_VAL_T, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_CALL_ADDR_ARR_T)
#endif
#define z0WW3_copy(P)  P

extern void yAss_EMG_NUM_ARR_T XPP((EMG_NUM_ARR_T, EMG_NUM_ARR_T, int));
#define yAssF_EMG_NUM_ARR_T(V,E,A)  yAss_EMG_NUM_ARR_T(V,E,A)
#define yEqF_EMG_NUM_ARR_T(Expr1,Expr2)  yEq_EMG_NUM_ARR_T(Expr1,Expr2)
#define yNEqF_EMG_NUM_ARR_T(Expr1,Expr2)  ( ! yEq_EMG_NUM_ARR_T(Expr1,Expr2) )
#define yTstI_EMG_NUM_ARR_T(yExpr)  yExpr
#ifndef ANY_EMG_NUM_ARR_T
#define ANY_EMG_NUM_ARR_T
#endif
#define z0WX5_copy(P)  P

extern void yAss_EMG_NUM_LIST_T XPP((EMG_NUM_LIST_T *, EMG_NUM_LIST_T, int));
#define yAssF_EMG_NUM_LIST_T(V,E,A)  yAss_EMG_NUM_LIST_T(&(V),E,A)
#define yEqF_EMG_NUM_LIST_T(Expr1,Expr2)  yEq_EMG_NUM_LIST_T(Expr1,Expr2)
#define yNEqF_EMG_NUM_LIST_T(Expr1,Expr2)  ( ! yEq_EMG_NUM_LIST_T(Expr1,Expr2) )
#ifndef ANY_EMG_NUM_LIST_T
#define ANY_EMG_NUM_LIST_T yMake_EMG_NUM_LIST_T(ANY_SDL_Integer, \
  ANY_EMG_NUM_ARR_T)
#endif
#define z0WY3_copy(P)  P

#define yAssF_NTW_FEAT_SUPPORT_T(V,E,A)  V = E
#define yEqF_NTW_FEAT_SUPPORT_T(Expr1,Expr2)  yEq_NTW_FEAT_SUPPORT_T(Expr1,Expr2)
#define yNEqF_NTW_FEAT_SUPPORT_T(Expr1,Expr2)  ( ! yEq_NTW_FEAT_SUPPORT_T(Expr1,Expr2) )
#ifndef ANY_NTW_FEAT_SUPPORT_T
#define ANY_NTW_FEAT_SUPPORT_T yMake_NTW_FEAT_SUPPORT_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean)
#endif
#define z0WZ3_copy(P)  P

extern void yAss_MOBILE_ID_UNION XPP((MOBILE_ID_UNION *, MOBILE_ID_UNION, int));
#define yAssF_MOBILE_ID_UNION(V,E,A)  yAss_MOBILE_ID_UNION(&(V),E,A)
#define yEqF_MOBILE_ID_UNION(Expr1,Expr2)  yEq_MOBILE_ID_UNION(Expr1,Expr2)
#define yNEqF_MOBILE_ID_UNION(Expr1,Expr2)  ( ! yEq_MOBILE_ID_UNION(Expr1,Expr2) )
#ifndef ANY_MOBILE_ID_UNION
#define ANY_MOBILE_ID_UNION
#endif
#define z0X03_copy(P)  P

#define yAssF_CELL_GPRS_STATE_E(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_CELL_GPRS_STATE_E(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_CELL_GPRS_STATE_E(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_CELL_GPRS_STATE_E(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_CELL_GPRS_STATE_E
#define ANY_CELL_GPRS_STATE_E ANY_SDL_Integer
#endif

#define yAssF_GMM_MSG_TYPE_E(V,E,A)  yAssF_MSG_TYPE_E(V,E,A)
#define yDef_GMM_MSG_TYPE_E(yVar)  yDef_MSG_TYPE_E((MSG_TYPE_E *)yVar)
#define yEqF_GMM_MSG_TYPE_E(Expr1,Expr2)  yEqF_MSG_TYPE_E(Expr1,Expr2)
#define yNEqF_GMM_MSG_TYPE_E(Expr1,Expr2)  yNEqF_MSG_TYPE_E(Expr1,Expr2)
#ifndef ANY_GMM_MSG_TYPE_E
#define ANY_GMM_MSG_TYPE_E ANY_SDL_Integer
#endif

#define yAssF_GPRS_CAUSE_E(V,E,A)  yAssF_GMM_CAUSE_T(V,E,A)
#define yDef_GPRS_CAUSE_E(yVar)  yDef_GMM_CAUSE_T((GMM_CAUSE_T *)yVar)
#define yEqF_GPRS_CAUSE_E(Expr1,Expr2)  yEqF_GMM_CAUSE_T(Expr1,Expr2)
#define yNEqF_GPRS_CAUSE_E(Expr1,Expr2)  yNEqF_GMM_CAUSE_T(Expr1,Expr2)
#ifndef ANY_GPRS_CAUSE_E
#define ANY_GPRS_CAUSE_E ANY_SDL_Integer
#endif

#define yAssF_GMM_STATE_UPDATED(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_GMM_STATE_UPDATED(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_GMM_STATE_UPDATED(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_GMM_STATE_UPDATED(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_GMM_STATE_UPDATED
#define ANY_GMM_STATE_UPDATED ANY_SDL_Integer
#endif

#define yAssF_MSG_TYPE_E(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_MSG_TYPE_E(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_MSG_TYPE_E(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_MSG_TYPE_E(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_MSG_TYPE_E
#define ANY_MSG_TYPE_E ANY_SDL_Integer
#endif

#define yAssF_GMM_PROCEDURE_TYPE_E(V,E,A)  V = E
#define yDef_GMM_PROCEDURE_TYPE_E(yVar)  *(yVar) = PROCEDURE_GPRS_ATTACH
#define yEqF_GMM_PROCEDURE_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_GMM_PROCEDURE_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_GMM_PROCEDURE_TYPE_E
#define ANY_GMM_PROCEDURE_TYPE_E (GMM_PROCEDURE_TYPE_E)(0 + \
  GETINTRAND%((int)(PROCEDURE_AUTH_PROCEDURE)+1))
#endif
#define z0X1B_copy(P)  P

#define yAssF_GMM_SGSN_DETACH_TYPE_E(V,E,A)  yAssF_SDL_Integer(V,E,A)
#define yDef_GMM_SGSN_DETACH_TYPE_E(yVar)  xDef_SDL_Integer((SDL_Integer *)yVar)
#define yEqF_GMM_SGSN_DETACH_TYPE_E(Expr1,Expr2)  yEqF_SDL_Integer(Expr1,Expr2)
#define yNEqF_GMM_SGSN_DETACH_TYPE_E(Expr1,Expr2)  yNEqF_SDL_Integer(Expr1,Expr2)
#ifndef ANY_GMM_SGSN_DETACH_TYPE_E
#define ANY_GMM_SGSN_DETACH_TYPE_E ANY_SDL_Integer
#endif

#define yAssF_GMM_STATE_IND_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_GMM_STATE_IND_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_GMM_STATE_IND_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_GMM_STATE_IND_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_GMM_STATE_IND_E
#define ANY_GMM_STATE_IND_E ANY_SDL_Integer
#endif

#define yAssF_PAGE_TYPE_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_PAGE_TYPE_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_PAGE_TYPE_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_PAGE_TYPE_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_PAGE_TYPE_E
#define ANY_PAGE_TYPE_E ANY_SDL_Integer
#endif

#define yAssF_GMM_END_STATE_E(V,E,A)  yAssF_z_ctypes_8_UnsignedShortInt(V,E,A)
#define yDef_GMM_END_STATE_E(yVar) \
  yDef_z_ctypes_8_UnsignedShortInt((z_ctypes_8_UnsignedShortInt *)yVar)
#define yEqF_GMM_END_STATE_E(Expr1,Expr2)  yEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#define yNEqF_GMM_END_STATE_E(Expr1,Expr2)  yNEqF_z_ctypes_8_UnsignedShortInt(Expr1,Expr2)
#ifndef ANY_GMM_END_STATE_E
#define ANY_GMM_END_STATE_E ANY_SDL_Integer
#endif

#define yAssF_GMM_CIPHER_ALGORITHM_E(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_GMM_CIPHER_ALGORITHM_E(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_GMM_CIPHER_ALGORITHM_E(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_GMM_CIPHER_ALGORITHM_E(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yTstA_GMM_CIPHER_ALGORITHM_E(yExpr)  yExpr
#define yTstI_GMM_CIPHER_ALGORITHM_E(yExpr)  yExpr
#ifndef ANY_GMM_CIPHER_ALGORITHM_E
#define ANY_GMM_CIPHER_ALGORITHM_E (GMM_CIPHER_ALGORITHM_E)(SDL_INTEGER_LIT(0) + \
  GETINTRAND%(SDL_INTEGER_LIT(7)+1))
#endif

#define yAssF_SUSPEND_CAUSE_E(V,E,A)  V = E
#define yDef_SUSPEND_CAUSE_E(yVar)  *(yVar) = GSM_CELL_RESELL
#define yEqF_SUSPEND_CAUSE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_SUSPEND_CAUSE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_SUSPEND_CAUSE_E
#define ANY_SUSPEND_CAUSE_E (SUSPEND_CAUSE_E)(0 + \
  GETINTRAND%((int)(GSM_SWITCH_GPRS)+1))
#endif
#define z0X27_copy(P)  P

#define yAssF_REL_CAUSE_E(V,E,A)  V = E
#define yDef_REL_CAUSE_E(yVar)  *(yVar) = DOWNLINK_FAIL
#define yEqF_REL_CAUSE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_REL_CAUSE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_REL_CAUSE_E
#define ANY_REL_CAUSE_E (REL_CAUSE_E)(0 + GETINTRAND%((int)(ABNORM_REL_TO_IDLE) \
  +1))
#endif
#define z0X38_copy(P)  P

#define yAssF_TBF_REL_TYPE_E(V,E,A)  V = E
#define yDef_TBF_REL_TYPE_E(yVar)  *(yVar) = NORM_REL_ATT_OR_RAU
#define yEqF_TBF_REL_TYPE_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_TBF_REL_TYPE_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_TBF_REL_TYPE_E
#define ANY_TBF_REL_TYPE_E (TBF_REL_TYPE_E)(0 + \
  GETINTRAND%((int)(NORM_REL_BY_RRA)+1))
#endif
#define z0X4B_copy(P)  P

#define yAssF_BS_CV_MAX_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_BS_CV_MAX_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_BS_CV_MAX_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_BS_CV_MAX_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_BS_CV_MAX_T
#define ANY_BS_CV_MAX_T ANY_SDL_Octet
#endif

#define yAssF_PAN_DEC_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_PAN_DEC_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_PAN_DEC_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_PAN_DEC_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_PAN_DEC_T
#define ANY_PAN_DEC_T ANY_SDL_Octet
#endif

#define yAssF_PAN_INC_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_PAN_INC_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_PAN_INC_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_PAN_INC_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_PAN_INC_T
#define ANY_PAN_INC_T ANY_SDL_Octet
#endif

#define yAssF_PAN_MAX_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_PAN_MAX_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_PAN_MAX_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_PAN_MAX_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_PAN_MAX_T
#define ANY_PAN_MAX_T ANY_SDL_Octet
#endif

#define yAssF_PRIO_ACCESS_THR_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_PRIO_ACCESS_THR_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_PRIO_ACCESS_THR_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_PRIO_ACCESS_THR_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_PRIO_ACCESS_THR_T
#define ANY_PRIO_ACCESS_THR_T ANY_SDL_Octet
#endif

#define yAssF_GRR_RLC_MSG_TYPE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_GRR_RLC_MSG_TYPE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_GRR_RLC_MSG_TYPE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_GRR_RLC_MSG_TYPE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_GRR_RLC_MSG_TYPE_T
#define ANY_GRR_RLC_MSG_TYPE_T ANY_SDL_Integer
#endif

#define yAssF_RLC_GRR_ACC_ERROR_E(V,E,A)  V = E
#define yDef_RLC_GRR_ACC_ERROR_E(yVar)  *(yVar) = \
  RLC_TBF_ACC_FAIL_WITH_MSG_ERROR
#define yEqF_RLC_GRR_ACC_ERROR_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_RLC_GRR_ACC_ERROR_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_RLC_GRR_ACC_ERROR_E
#define ANY_RLC_GRR_ACC_ERROR_E (RLC_GRR_ACC_ERROR_E)(0 + \
  GETINTRAND%((int)(RLC_TBF_ACC_FAIL_WITH_CELL_RESEL)+1))
#endif
#define z0X58_copy(P)  P

#define yAssF_FREQ_PARAM_TYPE_T(V,E,A)  V = E
#define yDef_FREQ_PARAM_TYPE_T(yVar)  *(yVar) = PSI2
#define yEqF_FREQ_PARAM_TYPE_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_FREQ_PARAM_TYPE_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_FREQ_PARAM_TYPE_T
#define ANY_FREQ_PARAM_TYPE_T (FREQ_PARAM_TYPE_T)(0 + \
  GETINTRAND%((int)(ASSIGN_MSG)+1))
#endif
#define z0X67_copy(P)  P

#define yAssF_CONTROL_ACK_E(V,E,A)  V = E
#define yDef_CONTROL_ACK_E(yVar)  *(yVar) = ACCESS_BURSTS_T
#define yEqF_CONTROL_ACK_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_CONTROL_ACK_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_CONTROL_ACK_E
#define ANY_CONTROL_ACK_E (CONTROL_ACK_E)(0 + GETINTRAND%((int)(CONTROL_BLOCK_T) \
  +1))
#endif
#define z0X75_copy(P)  P

#define yAssF_RACH_REJ_CAUSE_T(V,E,A)  V = E
#define yDef_RACH_REJ_CAUSE_T(yVar)  *(yVar) = ACCESS_REJ
#define yEqF_RACH_REJ_CAUSE_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_RACH_REJ_CAUSE_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_RACH_REJ_CAUSE_T
#define ANY_RACH_REJ_CAUSE_T (RACH_REJ_CAUSE_T)(0 + \
  GETINTRAND%((int)(CELL_RESELECT)+1))
#endif
#define z0X89_copy(P)  P

#define yAssF_RACH_REJ_TIME_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_RACH_REJ_TIME_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_RACH_REJ_TIME_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_RACH_REJ_TIME_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_RACH_REJ_TIME_T
#define ANY_RACH_REJ_TIME_T ANY_SDL_Octet
#endif

#define yAssF_TA_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_TA_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_TA_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_TA_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_TA_T
#define ANY_TA_T ANY_SDL_Octet
#endif

#define yAssF_CHANNEL_CODING_REQUESTED_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_CHANNEL_CODING_REQUESTED_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_CHANNEL_CODING_REQUESTED_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_CHANNEL_CODING_REQUESTED_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_CHANNEL_CODING_REQUESTED_T
#define ANY_CHANNEL_CODING_REQUESTED_T ANY_SDL_Octet
#endif

extern void yAss_CHANNEL_REQUEST_DESCRIPTION_T
  XPP((CHANNEL_REQUEST_DESCRIPTION_T, CHANNEL_REQUEST_DESCRIPTION_T, int));
#define yAssF_CHANNEL_REQUEST_DESCRIPTION_T(V,E,A)  yAss_CHANNEL_REQUEST_DESCRIPTION_T(V,E,A)
#define yEqF_CHANNEL_REQUEST_DESCRIPTION_T(Expr1,Expr2)  yEq_CHANNEL_REQUEST_DESCRIPTION_T(Expr1,Expr2)
#define yNEqF_CHANNEL_REQUEST_DESCRIPTION_T(Expr1,Expr2)  ( ! yEq_CHANNEL_REQUEST_DESCRIPTION_T(Expr1,Expr2) )
#define yTstI_CHANNEL_REQUEST_DESCRIPTION_T(yExpr)  yExpr
#ifndef ANY_CHANNEL_REQUEST_DESCRIPTION_T
#define ANY_CHANNEL_REQUEST_DESCRIPTION_T
#endif
#define z0X95_copy(P)  P

extern void yAss_PACKET_CHANNEL_DESC_IE_T XPP((PACKET_CHANNEL_DESC_IE_T,
  PACKET_CHANNEL_DESC_IE_T, int));
#define yAssF_PACKET_CHANNEL_DESC_IE_T(V,E,A)  yAss_PACKET_CHANNEL_DESC_IE_T(V,E,A)
#define yEqF_PACKET_CHANNEL_DESC_IE_T(Expr1,Expr2)  yEq_PACKET_CHANNEL_DESC_IE_T(Expr1,Expr2)
#define yNEqF_PACKET_CHANNEL_DESC_IE_T(Expr1,Expr2)  ( ! yEq_PACKET_CHANNEL_DESC_IE_T(Expr1,Expr2) )
#define yTstI_PACKET_CHANNEL_DESC_IE_T(yExpr)  yExpr
#ifndef ANY_PACKET_CHANNEL_DESC_IE_T
#define ANY_PACKET_CHANNEL_DESC_IE_T
#endif
#define z0XA5_copy(P)  P

extern void yAss_MA_BITMAP_ARR_T XPP((MA_BITMAP_ARR_T, MA_BITMAP_ARR_T, int));
#define yAssF_MA_BITMAP_ARR_T(V,E,A)  yAss_MA_BITMAP_ARR_T(V,E,A)
#define yEqF_MA_BITMAP_ARR_T(Expr1,Expr2)  yEq_MA_BITMAP_ARR_T(Expr1,Expr2)
#define yNEqF_MA_BITMAP_ARR_T(Expr1,Expr2)  ( ! yEq_MA_BITMAP_ARR_T(Expr1,Expr2) )
#define yTstI_MA_BITMAP_ARR_T(yExpr)  yExpr
#ifndef ANY_MA_BITMAP_ARR_T
#define ANY_MA_BITMAP_ARR_T
#endif
#define z0XB5_copy(P)  P

extern void yAss_MA_BITMAP_T XPP((MA_BITMAP_T *, MA_BITMAP_T, int));
#define yAssF_MA_BITMAP_T(V,E,A)  yAss_MA_BITMAP_T(&(V),E,A)
#define yEqF_MA_BITMAP_T(Expr1,Expr2)  yEq_MA_BITMAP_T(Expr1,Expr2)
#define yNEqF_MA_BITMAP_T(Expr1,Expr2)  ( ! yEq_MA_BITMAP_T(Expr1,Expr2) )
#ifndef ANY_MA_BITMAP_T
#define ANY_MA_BITMAP_T yMake_MA_BITMAP_T(ANY_SDL_Octet, ANY_MA_BITMAP_ARR_T)
#endif
#define z0XC3_copy(P)  P

extern void yAss_PACKET_CONSTRUCT_ARR_T XPP((PACKET_CONSTRUCT_ARR_T,
  PACKET_CONSTRUCT_ARR_T, int));
#define yAssF_PACKET_CONSTRUCT_ARR_T(V,E,A)  yAss_PACKET_CONSTRUCT_ARR_T(V,E,A)
#define yEqF_PACKET_CONSTRUCT_ARR_T(Expr1,Expr2)  yEq_PACKET_CONSTRUCT_ARR_T(Expr1,Expr2)
#define yNEqF_PACKET_CONSTRUCT_ARR_T(Expr1,Expr2)  ( ! yEq_PACKET_CONSTRUCT_ARR_T(Expr1,Expr2) )
#define yTstI_PACKET_CONSTRUCT_ARR_T(yExpr)  yExpr
#ifndef ANY_PACKET_CONSTRUCT_ARR_T
#define ANY_PACKET_CONSTRUCT_ARR_T
#endif
#define z0XD5_copy(P)  P

extern void yAss_PACKET_CONSTRUCT_T XPP((PACKET_CONSTRUCT_T *,
  PACKET_CONSTRUCT_T, int));
#define yAssF_PACKET_CONSTRUCT_T(V,E,A)  yAss_PACKET_CONSTRUCT_T(&(V),E,A)
#define yEqF_PACKET_CONSTRUCT_T(Expr1,Expr2)  yEq_PACKET_CONSTRUCT_T(Expr1,Expr2)
#define yNEqF_PACKET_CONSTRUCT_T(Expr1,Expr2)  ( ! yEq_PACKET_CONSTRUCT_T(Expr1,Expr2) )
#ifndef ANY_PACKET_CONSTRUCT_T
#define ANY_PACKET_CONSTRUCT_T yMake_PACKET_CONSTRUCT_T(ANY_SDL_Octet, \
  ANY_PACKET_CONSTRUCT_ARR_T)
#endif
#define z0XE3_copy(P)  P

extern void yAss_REF_FREQ_LIST_T XPP((REF_FREQ_LIST_T *, REF_FREQ_LIST_T, int));
#define yAssF_REF_FREQ_LIST_T(V,E,A)  yAss_REF_FREQ_LIST_T(&(V),E,A)
#define yEqF_REF_FREQ_LIST_T(Expr1,Expr2)  yEq_REF_FREQ_LIST_T(Expr1,Expr2)
#define yNEqF_REF_FREQ_LIST_T(Expr1,Expr2)  ( ! yEq_REF_FREQ_LIST_T(Expr1,Expr2) )
#ifndef ANY_REF_FREQ_LIST_T
#define ANY_REF_FREQ_LIST_T yMake_REF_FREQ_LIST_T(ANY_ARFCN_LIST_T, \
  ANY_SDL_Octet)
#endif
#define z0XF3_copy(P)  P

extern void yAss_REF_FREQ_LIST_ARR_T XPP((REF_FREQ_LIST_ARR_T,
  REF_FREQ_LIST_ARR_T, int));
#define yAssF_REF_FREQ_LIST_ARR_T(V,E,A)  yAss_REF_FREQ_LIST_ARR_T(V,E,A)
#define yEqF_REF_FREQ_LIST_ARR_T(Expr1,Expr2)  yEq_REF_FREQ_LIST_ARR_T(Expr1,Expr2)
#define yNEqF_REF_FREQ_LIST_ARR_T(Expr1,Expr2)  ( ! yEq_REF_FREQ_LIST_ARR_T(Expr1,Expr2) )
#define yTstI_REF_FREQ_LIST_ARR_T(yExpr)  yExpr
#ifndef ANY_REF_FREQ_LIST_ARR_T
#define ANY_REF_FREQ_LIST_ARR_T
#endif
#define z0XG5_copy(P)  P

extern void yAss_RR_GPRS_MA_T XPP((RR_GPRS_MA_T *, RR_GPRS_MA_T, int));
#define yAssF_RR_GPRS_MA_T(V,E,A)  yAss_RR_GPRS_MA_T(&(V),E,A)
#define yEqF_RR_GPRS_MA_T(Expr1,Expr2)  yEq_RR_GPRS_MA_T(Expr1,Expr2)
#define yNEqF_RR_GPRS_MA_T(Expr1,Expr2)  ( ! yEq_RR_GPRS_MA_T(Expr1,Expr2) )
#ifndef ANY_RR_GPRS_MA_T
#define ANY_RR_GPRS_MA_T yMake_RR_GPRS_MA_T(ANY_SDL_Octet, \
  ANY_GPRS_MOBILE_ALLOCATION_T)
#endif
#define z0XH3_copy(P)  P

extern void yAss_GPRS_MOBILE_ALLOC_ARR_T XPP((GPRS_MOBILE_ALLOC_ARR_T,
  GPRS_MOBILE_ALLOC_ARR_T, int));
#define yAssF_GPRS_MOBILE_ALLOC_ARR_T(V,E,A)  yAss_GPRS_MOBILE_ALLOC_ARR_T(V,E,A)
#define yEqF_GPRS_MOBILE_ALLOC_ARR_T(Expr1,Expr2)  yEq_GPRS_MOBILE_ALLOC_ARR_T(Expr1,Expr2)
#define yNEqF_GPRS_MOBILE_ALLOC_ARR_T(Expr1,Expr2)  ( ! yEq_GPRS_MOBILE_ALLOC_ARR_T(Expr1,Expr2) )
#define yTstI_GPRS_MOBILE_ALLOC_ARR_T(yExpr)  yExpr
#ifndef ANY_GPRS_MOBILE_ALLOC_ARR_T
#define ANY_GPRS_MOBILE_ALLOC_ARR_T
#endif
#define z0XI5_copy(P)  P

extern void yAss_PSI2_FREQ_PARAM_T XPP((PSI2_FREQ_PARAM_T *, PSI2_FREQ_PARAM_T,
  int));
#define yAssF_PSI2_FREQ_PARAM_T(V,E,A)  yAss_PSI2_FREQ_PARAM_T(&(V),E,A)
#define yEqF_PSI2_FREQ_PARAM_T(Expr1,Expr2)  yEq_PSI2_FREQ_PARAM_T(Expr1,Expr2)
#define yNEqF_PSI2_FREQ_PARAM_T(Expr1,Expr2)  ( ! yEq_PSI2_FREQ_PARAM_T(Expr1,Expr2) )
#ifndef ANY_PSI2_FREQ_PARAM_T
#define ANY_PSI2_FREQ_PARAM_T yMake_PSI2_FREQ_PARAM_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_REF_FREQ_LIST_ARR_T, ANY_ARFCN_LIST_T, ANY_SDL_Octet, \
  ANY_GPRS_MOBILE_ALLOC_ARR_T)
#endif
#define z0XJ3_copy(P)  P

#define yAssF_PSI2_FREQ_PARAM_PTR_T(V,E,A)  V = E
#define yDef_PSI2_FREQ_PARAM_PTR_T(yVar)  *(yVar) = z0XK0_Null()
#define yEqF_PSI2_FREQ_PARAM_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_PSI2_FREQ_PARAM_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_PSI2_FREQ_PARAM_PTR_T
#define ANY_PSI2_FREQ_PARAM_PTR_T 0
#endif
#define z0XKF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_PSI2_FREQ_PARAM_PTR_T() (PSI2_FREQ_PARAM_PTR_T)XALLOC_REF_VAL(sizeof(PSI2_FREQ_PARAM_T), ySrtN_PSI2_FREQ_PARAM_PTR_T)
#else
#define yAll_PSI2_FREQ_PARAM_PTR_T() (PSI2_FREQ_PARAM_PTR_T)XALLOC(sizeof(PSI2_FREQ_PARAM_T), \
  &ySrtR_PSI2_FREQ_PARAM_PTR_T)
#endif
#define yPlus_PSI2_FREQ_PARAM_PTR_T(P1,P2) (P1+P2)
#define yMinus_PSI2_FREQ_PARAM_PTR_T(P1,P2) (P1-P2)
#define z0XK0_Null() 0
#define z0XK1_Alloc() yAll_PSI2_FREQ_PARAM_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0XK6_free(P) XFREE_REF_VAL((void **)(P), sizeof(PSI2_FREQ_PARAM_T))
#else
#define z0XK6_free(P) XFREE((void **)(P), sizeof(PSI2_FREQ_PARAM_T))
#endif
#define z0XK9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0XKA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0XKB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

extern void yAss_SI13_FREQ_PARAM_T XPP((SI13_FREQ_PARAM_T *, SI13_FREQ_PARAM_T,
  int));
#define yAssF_SI13_FREQ_PARAM_T(V,E,A)  yAss_SI13_FREQ_PARAM_T(&(V),E,A)
#define yEqF_SI13_FREQ_PARAM_T(Expr1,Expr2)  yEq_SI13_FREQ_PARAM_T(Expr1,Expr2)
#define yNEqF_SI13_FREQ_PARAM_T(Expr1,Expr2)  ( ! yEq_SI13_FREQ_PARAM_T(Expr1,Expr2) )
#ifndef ANY_SI13_FREQ_PARAM_T
#define ANY_SI13_FREQ_PARAM_T yMake_SI13_FREQ_PARAM_T(ANY_SDL_Octet, \
  ANY_GPRS_MOBILE_ALLOCATION_T)
#endif
#define z0XL3_copy(P)  P

extern void yAss_SI1_FREQ_PARAM_T XPP((SI1_FREQ_PARAM_T *, SI1_FREQ_PARAM_T,
  int));
#define yAssF_SI1_FREQ_PARAM_T(V,E,A)  yAss_SI1_FREQ_PARAM_T(&(V),E,A)
#define yEqF_SI1_FREQ_PARAM_T(Expr1,Expr2)  yEq_SI1_FREQ_PARAM_T(Expr1,Expr2)
#define yNEqF_SI1_FREQ_PARAM_T(Expr1,Expr2)  ( ! yEq_SI1_FREQ_PARAM_T(Expr1,Expr2) )
#ifndef ANY_SI1_FREQ_PARAM_T
#define ANY_SI1_FREQ_PARAM_T yMake_SI1_FREQ_PARAM_T(ANY_ARFCN_LIST_T)
#endif
#define z0XM3_copy(P)  P

extern void yAss_FREQ_PARAM_T XPP((FREQ_PARAM_T *, FREQ_PARAM_T, int));
#define yAssF_FREQ_PARAM_T(V,E,A)  yAss_FREQ_PARAM_T(&(V),E,A)
#define yEqF_FREQ_PARAM_T(Expr1,Expr2)  yEq_FREQ_PARAM_T(Expr1,Expr2)
#define yNEqF_FREQ_PARAM_T(Expr1,Expr2)  ( ! yEq_FREQ_PARAM_T(Expr1,Expr2) )
#ifndef ANY_FREQ_PARAM_T
#define ANY_FREQ_PARAM_T
#endif
#define z0XN3_copy(P)  P

extern void yAss_FREQ_UPDATE_T XPP((FREQ_UPDATE_T *, FREQ_UPDATE_T, int));
#define yAssF_FREQ_UPDATE_T(V,E,A)  yAss_FREQ_UPDATE_T(&(V),E,A)
#define yEqF_FREQ_UPDATE_T(Expr1,Expr2)  yEq_FREQ_UPDATE_T(Expr1,Expr2)
#define yNEqF_FREQ_UPDATE_T(Expr1,Expr2)  ( ! yEq_FREQ_UPDATE_T(Expr1,Expr2) )
#ifndef ANY_FREQ_UPDATE_T
#define ANY_FREQ_UPDATE_T yMake_FREQ_UPDATE_T(ANY_FREQ_PARAM_TYPE_T, \
  ANY_FREQ_PARAM_T)
#endif
#define z0XO3_copy(P)  P

#define yAssF_GPRS_MEAS_RESULT_T(V,E,A)  V = E
#define yEqF_GPRS_MEAS_RESULT_T(Expr1,Expr2)  yEq_GPRS_MEAS_RESULT_T(Expr1,Expr2)
#define yNEqF_GPRS_MEAS_RESULT_T(Expr1,Expr2)  ( ! yEq_GPRS_MEAS_RESULT_T(Expr1,Expr2) )
#ifndef ANY_GPRS_MEAS_RESULT_T
#define ANY_GPRS_MEAS_RESULT_T yMake_GPRS_MEAS_RESULT_T(ANY_SDL_Octet, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0XP3_copy(P)  P

#define yAssF_MAC_GRR_MSG_TYPE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_MAC_GRR_MSG_TYPE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_MAC_GRR_MSG_TYPE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_MAC_GRR_MSG_TYPE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_MAC_GRR_MSG_TYPE_T
#define ANY_MAC_GRR_MSG_TYPE_T ANY_SDL_Integer
#endif

extern void yAss_PACCH_DATA_T XPP((PACCH_DATA_T *, PACCH_DATA_T, int));
#define yAssF_PACCH_DATA_T(V,E,A)  yAss_PACCH_DATA_T(&(V),E,A)
#define yEqF_PACCH_DATA_T(Expr1,Expr2)  yEq_PACCH_DATA_T(Expr1,Expr2)
#define yNEqF_PACCH_DATA_T(Expr1,Expr2)  ( ! yEq_PACCH_DATA_T(Expr1,Expr2) )
#ifndef ANY_PACCH_DATA_T
#define ANY_PACCH_DATA_T yMake_PACCH_DATA_T(ANY_MAC_GRR_MSG_TYPE_T, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_MAC_MSG_BLOCK_ARR_T, \
  ANY_ABSOLUTE_FRAME_NUMBER_T)
#endif
#define z0XQ3_copy(P)  P

#define yAssF_IS_PCCCH_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_PCCCH_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_PCCCH_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_PCCCH_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_PCCCH_T
#define ANY_IS_PCCCH_T ANY_SDL_Boolean
#endif

#define yAssF_T3168_VALUE_T(V,E,A)  yAssF_z_ctypes_A_UnsignedLongInt(V,E,A)
#define yDef_T3168_VALUE_T(yVar) \
  yDef_z_ctypes_A_UnsignedLongInt((z_ctypes_A_UnsignedLongInt *)yVar)
#define yEqF_T3168_VALUE_T(Expr1,Expr2)  yEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#define yNEqF_T3168_VALUE_T(Expr1,Expr2)  yNEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#ifndef ANY_T3168_VALUE_T
#define ANY_T3168_VALUE_T ANY_SDL_Integer
#endif

#define yAssF_T3192_VALUE_T(V,E,A)  yAssF_z_ctypes_A_UnsignedLongInt(V,E,A)
#define yDef_T3192_VALUE_T(yVar) \
  yDef_z_ctypes_A_UnsignedLongInt((z_ctypes_A_UnsignedLongInt *)yVar)
#define yEqF_T3192_VALUE_T(Expr1,Expr2)  yEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#define yNEqF_T3192_VALUE_T(Expr1,Expr2)  yNEqF_z_ctypes_A_UnsignedLongInt(Expr1,Expr2)
#ifndef ANY_T3192_VALUE_T
#define ANY_T3192_VALUE_T ANY_SDL_Integer
#endif

#define yAssF_NECI_VALUE_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_NECI_VALUE_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_NECI_VALUE_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_NECI_VALUE_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_NECI_VALUE_T
#define ANY_NECI_VALUE_T ANY_SDL_Boolean
#endif

#define yAssF_IS_CELL_SUPPORT_EGPRS_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_CELL_SUPPORT_EGPRS_T(yVar) \
  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_CELL_SUPPORT_EGPRS_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_CELL_SUPPORT_EGPRS_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_CELL_SUPPORT_EGPRS_T
#define ANY_IS_CELL_SUPPORT_EGPRS_T ANY_SDL_Boolean
#endif

#define yAssF_IS_CELL_SUPPORT_ERACH_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_CELL_SUPPORT_ERACH_T(yVar) \
  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_CELL_SUPPORT_ERACH_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_CELL_SUPPORT_ERACH_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_CELL_SUPPORT_ERACH_T
#define ANY_IS_CELL_SUPPORT_ERACH_T ANY_SDL_Boolean
#endif

#define yAssF_RECEIVE_N_PDU_NUMBER_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RECEIVE_N_PDU_NUMBER_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RECEIVE_N_PDU_NUMBER_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RECEIVE_N_PDU_NUMBER_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_RECEIVE_N_PDU_NUMBER_T
#define ANY_RECEIVE_N_PDU_NUMBER_T ANY_SDL_Integer
#endif

#define yAssF_RLC_TBF_STATUS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RLC_TBF_STATUS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RLC_TBF_STATUS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RLC_TBF_STATUS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_RLC_TBF_STATUS_T
#define ANY_RLC_TBF_STATUS_T ANY_SDL_Integer
#endif

#define yAssF_RLC_BSN_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RLC_BSN_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RLC_BSN_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RLC_BSN_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_RLC_BSN_T
#define ANY_RLC_BSN_T ANY_SDL_Integer
#endif

#define yAssF_TFI_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_TFI_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_TFI_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_TFI_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_TFI_T
#define ANY_TFI_T ANY_SDL_Octet
#endif

#define yAssF_RLC_WS_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_RLC_WS_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_RLC_WS_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_RLC_WS_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_RLC_WS_T
#define ANY_RLC_WS_T ANY_SDL_Octet
#endif

#define yAssF_TIMESLOT_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_TIMESLOT_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_TIMESLOT_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_TIMESLOT_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_TIMESLOT_T
#define ANY_TIMESLOT_T ANY_SDL_Integer
#endif

#define yAssF_CODING_SCHEME_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_CODING_SCHEME_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_CODING_SCHEME_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_CODING_SCHEME_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_CODING_SCHEME_T
#define ANY_CODING_SCHEME_T ANY_SDL_Integer
#endif

#define yAssF_RACH_REJ_VAL_T(V,E,A)  yAssF_WAIT_INDICATION_T(V,E,A)
#define yDef_RACH_REJ_VAL_T(yVar) \
  yDef_WAIT_INDICATION_T((WAIT_INDICATION_T *)yVar)
#define yEqF_RACH_REJ_VAL_T(Expr1,Expr2)  yEqF_WAIT_INDICATION_T(Expr1,Expr2)
#define yNEqF_RACH_REJ_VAL_T(Expr1,Expr2)  yNEqF_WAIT_INDICATION_T(Expr1,Expr2)
#ifndef ANY_RACH_REJ_VAL_T
#define ANY_RACH_REJ_VAL_T ANY_WAIT_INDICATION_T
#endif

#define yAssF_WAIT_INDICATION_T(V,E,A)  V = E
#define yEqF_WAIT_INDICATION_T(Expr1,Expr2)  yEq_WAIT_INDICATION_T(Expr1,Expr2)
#define yNEqF_WAIT_INDICATION_T(Expr1,Expr2)  ( ! yEq_WAIT_INDICATION_T(Expr1,Expr2) )
#ifndef ANY_WAIT_INDICATION_T
#define ANY_WAIT_INDICATION_T yMake_WAIT_INDICATION_T(ANY_z_ctypes_7_LongInt, \
  ANY_SDL_Boolean)
#endif
#define z0XR3_copy(P)  P

#define yAssF_ACCESS_STATUS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_ACCESS_STATUS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_ACCESS_STATUS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_ACCESS_STATUS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_ACCESS_STATUS_T
#define ANY_ACCESS_STATUS_T ANY_SDL_Integer
#endif

#define yAssF_ENUM_TLLI_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_ENUM_TLLI_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_ENUM_TLLI_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_ENUM_TLLI_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_ENUM_TLLI_T
#define ANY_ENUM_TLLI_T ANY_SDL_Integer
#endif

#define yAssF_CONTENTION_STATUS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_CONTENTION_STATUS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_CONTENTION_STATUS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_CONTENTION_STATUS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_CONTENTION_STATUS_T
#define ANY_CONTENTION_STATUS_T ANY_SDL_Integer
#endif

#define yAssF_TBF_REL_CAUSE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_TBF_REL_CAUSE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_TBF_REL_CAUSE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_TBF_REL_CAUSE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_TBF_REL_CAUSE_T
#define ANY_TBF_REL_CAUSE_T ANY_SDL_Integer
#endif

#define yAssF_DOWNLINK_TBF_PARAM_T(V,E,A)  V = E
#define yEqF_DOWNLINK_TBF_PARAM_T(Expr1,Expr2)  yEq_DOWNLINK_TBF_PARAM_T(Expr1,Expr2)
#define yNEqF_DOWNLINK_TBF_PARAM_T(Expr1,Expr2)  ( ! yEq_DOWNLINK_TBF_PARAM_T(Expr1,Expr2) )
#ifndef ANY_DOWNLINK_TBF_PARAM_T
#define ANY_DOWNLINK_TBF_PARAM_T yMake_DOWNLINK_TBF_PARAM_T(ANY_TLLI_T, \
  ANY_CODING_SCHEME_T, ANY_RLC_MODE_T)
#endif
#define z0XS3_copy(P)  P

extern void yAss_z0XT_DATA_BLOCK_ARR_T XPP((z0XT_DATA_BLOCK_ARR_T,
  z0XT_DATA_BLOCK_ARR_T, int));
#define yAssF_z0XT_DATA_BLOCK_ARR_T(V,E,A)  yAss_z0XT_DATA_BLOCK_ARR_T(V,E,A)
#define yEqF_z0XT_DATA_BLOCK_ARR_T(Expr1,Expr2)  yEq_z0XT_DATA_BLOCK_ARR_T(Expr1,Expr2)
#define yNEqF_z0XT_DATA_BLOCK_ARR_T(Expr1,Expr2)  ( ! yEq_z0XT_DATA_BLOCK_ARR_T(Expr1,Expr2) )
#define yTstI_z0XT_DATA_BLOCK_ARR_T(yExpr)  yExpr
#ifndef ANY_z0XT_DATA_BLOCK_ARR_T
#define ANY_z0XT_DATA_BLOCK_ARR_T
#endif
#define z0XT5_copy(P)  P

extern void yAss_CArray8_T XPP((CArray8_T, CArray8_T, int));
#define yAssF_CArray8_T(V,E,A)  yAss_CArray8_T(V,E,A)
#define yEqF_CArray8_T(Expr1,Expr2)  yEq_CArray8_T(Expr1,Expr2)
#define yNEqF_CArray8_T(Expr1,Expr2)  ( ! yEq_CArray8_T(Expr1,Expr2) )
#define yTstI_CArray8_T(yExpr)  yExpr
#ifndef ANY_CArray8_T
#define ANY_CArray8_T
#endif
#define z0XU5_copy(P)  P

extern void yAss_ACK_NACK_DESCR_T XPP((ACK_NACK_DESCR_T *, ACK_NACK_DESCR_T,
  int));
#define yAssF_ACK_NACK_DESCR_T(V,E,A)  yAss_ACK_NACK_DESCR_T(&(V),E,A)
#define yEqF_ACK_NACK_DESCR_T(Expr1,Expr2)  yEq_ACK_NACK_DESCR_T(Expr1,Expr2)
#define yNEqF_ACK_NACK_DESCR_T(Expr1,Expr2)  ( ! yEq_ACK_NACK_DESCR_T(Expr1,Expr2) )
#ifndef ANY_ACK_NACK_DESCR_T
#define ANY_ACK_NACK_DESCR_T yMake_ACK_NACK_DESCR_T(ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_CArray8_T)
#endif
#define z0XV3_copy(P)  P

#define yAssF_RESOURCE_REQ_CAUSE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RESOURCE_REQ_CAUSE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RESOURCE_REQ_CAUSE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RESOURCE_REQ_CAUSE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_RESOURCE_REQ_CAUSE_T
#define ANY_RESOURCE_REQ_CAUSE_T ANY_SDL_Integer
#endif

#define yAssF_MAC_ALLOC_INFO_T(V,E,A)  V = E
#define yEqF_MAC_ALLOC_INFO_T(Expr1,Expr2)  yEq_MAC_ALLOC_INFO_T(Expr1,Expr2)
#define yNEqF_MAC_ALLOC_INFO_T(Expr1,Expr2)  ( ! yEq_MAC_ALLOC_INFO_T(Expr1,Expr2) )
#ifndef ANY_MAC_ALLOC_INFO_T
#define ANY_MAC_ALLOC_INFO_T yMake_MAC_ALLOC_INFO_T(ANY_TIMESLOT_T, \
  ANY_MAC_MODE_T, ANY_TBF_TYPE_T, ANY_z_ctypes_6_ShortInt)
#endif
#define z0XW3_copy(P)  P

#define yAssF_TBF_TYPE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_TBF_TYPE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_TBF_TYPE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_TBF_TYPE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_TBF_TYPE_T
#define ANY_TBF_TYPE_T ANY_SDL_Integer
#endif

#define yAssF_PRIORITY_ALLOW_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_PRIORITY_ALLOW_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_PRIORITY_ALLOW_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_PRIORITY_ALLOW_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_PRIORITY_ALLOW_T
#define ANY_PRIORITY_ALLOW_T ANY_SDL_Octet
#endif

#define yAssF_CELL_SUSPEND_STATE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_CELL_SUSPEND_STATE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_CELL_SUSPEND_STATE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_CELL_SUSPEND_STATE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_CELL_SUSPEND_STATE_T
#define ANY_CELL_SUSPEND_STATE_T ANY_SDL_Integer
#endif

#define yAssF_UPLINK_RECEIVE_FAI_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_UPLINK_RECEIVE_FAI_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_UPLINK_RECEIVE_FAI_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_UPLINK_RECEIVE_FAI_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_UPLINK_RECEIVE_FAI_T
#define ANY_UPLINK_RECEIVE_FAI_T ANY_SDL_Integer
#endif

#define yAssF_z0XX_RLC_MUTEX_T(V,E,A)  V = E
#define yEqF_z0XX_RLC_MUTEX_T(Expr1,Expr2)  yEq_z0XX_RLC_MUTEX_T(Expr1,Expr2)
#define yNEqF_z0XX_RLC_MUTEX_T(Expr1,Expr2)  ( ! yEq_z0XX_RLC_MUTEX_T(Expr1,Expr2) )
#ifndef ANY_z0XX_RLC_MUTEX_T
#define ANY_z0XX_RLC_MUTEX_T yMake_z0XX_RLC_MUTEX_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_UPLINK_RECEIVE_FAI_T)
#endif
#define z0XX3_copy(P)  P

#define yAssF_z0XY_RLC_NC_CS_T(V,E,A)  V = E
#define yEqF_z0XY_RLC_NC_CS_T(Expr1,Expr2)  yEq_z0XY_RLC_NC_CS_T(Expr1,Expr2)
#define yNEqF_z0XY_RLC_NC_CS_T(Expr1,Expr2)  ( ! yEq_z0XY_RLC_NC_CS_T(Expr1,Expr2) )
#ifndef ANY_z0XY_RLC_NC_CS_T
#define ANY_z0XY_RLC_NC_CS_T yMake_z0XY_RLC_NC_CS_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean)
#endif
#define z0XY3_copy(P)  P

#define yAssF_z0XZ_RLC_SUSPEND_STATE_T(V,E,A)  V = E
#define yEqF_z0XZ_RLC_SUSPEND_STATE_T(Expr1,Expr2)  yEq_z0XZ_RLC_SUSPEND_STATE_T(Expr1,Expr2)
#define yNEqF_z0XZ_RLC_SUSPEND_STATE_T(Expr1,Expr2)  ( ! yEq_z0XZ_RLC_SUSPEND_STATE_T(Expr1,Expr2) )
#ifndef ANY_z0XZ_RLC_SUSPEND_STATE_T
#define ANY_z0XZ_RLC_SUSPEND_STATE_T yMake_z0XZ_RLC_SUSPEND_STATE_T(ANY_SDL_Boolean, \
  ANY_SDL_Boolean)
#endif
#define z0XZ3_copy(P)  P

#define yAssF_RLC_TBF_SERVICE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_RLC_TBF_SERVICE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_RLC_TBF_SERVICE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_RLC_TBF_SERVICE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_RLC_TBF_SERVICE_T
#define ANY_RLC_TBF_SERVICE_T ANY_SDL_Integer
#endif

#define yAssF_IS_CELL_CHANGE_FAIL_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_CELL_CHANGE_FAIL_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_CELL_CHANGE_FAIL_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_CELL_CHANGE_FAIL_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_CELL_CHANGE_FAIL_T
#define ANY_IS_CELL_CHANGE_FAIL_T ANY_SDL_Boolean
#endif

#define yAssF_IS_TBF_EST_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_TBF_EST_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_TBF_EST_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_TBF_EST_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_TBF_EST_T
#define ANY_IS_TBF_EST_T ANY_SDL_Boolean
#endif

#define yAssF_IS_UL_RESEGMENT_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_UL_RESEGMENT_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_UL_RESEGMENT_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_UL_RESEGMENT_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_UL_RESEGMENT_T
#define ANY_IS_UL_RESEGMENT_T ANY_SDL_Boolean
#endif

#define yAssF_IS_UL_PREEMPTIVE_T(V,E,A)  yAssF_SDL_Boolean(V,E,A)
#define yDef_IS_UL_PREEMPTIVE_T(yVar)  xDef_SDL_Boolean((SDL_Boolean *)yVar)
#define yEqF_IS_UL_PREEMPTIVE_T(Expr1,Expr2)  yEqF_SDL_Boolean(Expr1,Expr2)
#define yNEqF_IS_UL_PREEMPTIVE_T(Expr1,Expr2)  yNEqF_SDL_Boolean(Expr1,Expr2)
#ifndef ANY_IS_UL_PREEMPTIVE_T
#define ANY_IS_UL_PREEMPTIVE_T ANY_SDL_Boolean
#endif

#define yAssF_DL_STATE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_DL_STATE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_DL_STATE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_DL_STATE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_DL_STATE_T
#define ANY_DL_STATE_T ANY_SDL_Integer
#endif

#define yAssF_UL_STATE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_UL_STATE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_UL_STATE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_UL_STATE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_UL_STATE_T
#define ANY_UL_STATE_T ANY_SDL_Integer
#endif

#define yAssF_UL_ONE_PAHSE_ACCESS_STATE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_UL_ONE_PAHSE_ACCESS_STATE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_UL_ONE_PAHSE_ACCESS_STATE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_UL_ONE_PAHSE_ACCESS_STATE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_UL_ONE_PAHSE_ACCESS_STATE_T
#define ANY_UL_ONE_PAHSE_ACCESS_STATE_T ANY_SDL_Integer
#endif

#define yAssF_UL_TWO_PAHSE_ACCESS_STATE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_UL_TWO_PAHSE_ACCESS_STATE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_UL_TWO_PAHSE_ACCESS_STATE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_UL_TWO_PAHSE_ACCESS_STATE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_UL_TWO_PAHSE_ACCESS_STATE_T
#define ANY_UL_TWO_PAHSE_ACCESS_STATE_T ANY_SDL_Integer
#endif

#define yAssF_UL_ACTIVE_STATE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_UL_ACTIVE_STATE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_UL_ACTIVE_STATE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_UL_ACTIVE_STATE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_UL_ACTIVE_STATE_T
#define ANY_UL_ACTIVE_STATE_T ANY_SDL_Integer
#endif

#define yAssF_UL_RELEASE_STATE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_UL_RELEASE_STATE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_UL_RELEASE_STATE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_UL_RELEASE_STATE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_UL_RELEASE_STATE_T
#define ANY_UL_RELEASE_STATE_T ANY_SDL_Integer
#endif

#define yAssF_POLL_PRIORITY_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_POLL_PRIORITY_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_POLL_PRIORITY_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_POLL_PRIORITY_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_POLL_PRIORITY_T
#define ANY_POLL_PRIORITY_T ANY_SDL_Integer
#endif

#define yAssF_EGPRS_CAPABILITY_E(V,E,A)  V = E
#define yDef_EGPRS_CAPABILITY_E(yVar)  *(yVar) = NOT_SUPP_EGPRS
#define yEqF_EGPRS_CAPABILITY_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_EGPRS_CAPABILITY_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_EGPRS_CAPABILITY_E
#define ANY_EGPRS_CAPABILITY_E (EGPRS_CAPABILITY_E)(0 + \
  GETINTRAND%((int)(ONLY_DL_EGPRS)+1))
#endif
#define z0Y06_copy(P)  P

extern void yAss_MAC_PARAMETERS XPP((MAC_PARAMETERS *, MAC_PARAMETERS, int));
#define yAssF_MAC_PARAMETERS(V,E,A)  yAss_MAC_PARAMETERS(&(V),E,A)
#define yEqF_MAC_PARAMETERS(Expr1,Expr2)  yEq_MAC_PARAMETERS(Expr1,Expr2)
#define yNEqF_MAC_PARAMETERS(Expr1,Expr2)  ( ! yEq_MAC_PARAMETERS(Expr1,Expr2) )
#ifndef ANY_MAC_PARAMETERS
#define ANY_MAC_PARAMETERS yMake_MAC_PARAMETERS(ANY_MS_BAND_E, ANY_SDL_Boolean, \
  ANY_PRACH_CTRL_PARAMETERS_T, ANY_PERSIST_LEVEL_T, ANY_ACC_CONTROL_CLASS_T, \
  ANY_CONTROL_ACK_E, ANY_AB_FORMAT_E, ANY_z_ctypes_A_UnsignedLongInt, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_SDL_Octet, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_IMEI_T, ANY_IMEISV_T, ANY_BLOCK_PTR_T, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_GLOBAL_PWRC_PARAM_T, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_PMAX_T, ANY_MS_BAND_E, ANY_MS_BAND_E, ANY_IS_SGSN_R99_T, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0Y103_copy(P)  P

extern void yAss_TBF_PARAMETERS XPP((TBF_PARAMETERS *, TBF_PARAMETERS, int));
#define yAssF_TBF_PARAMETERS(V,E,A)  yAss_TBF_PARAMETERS(&(V),E,A)
#define yEqF_TBF_PARAMETERS(Expr1,Expr2)  yEq_TBF_PARAMETERS(Expr1,Expr2)
#define yNEqF_TBF_PARAMETERS(Expr1,Expr2)  ( ! yEq_TBF_PARAMETERS(Expr1,Expr2) )
#ifndef ANY_TBF_PARAMETERS
#define ANY_TBF_PARAMETERS yMake_TBF_PARAMETERS(ANY_TBF_DIRECTION_T, \
  ANY_UL_STATE_T, ANY_UL_ONE_PAHSE_ACCESS_STATE_T, \
  ANY_UL_TWO_PAHSE_ACCESS_STATE_T, ANY_UL_TBF_PARAMETERS, ANY_DL_STATE_T, \
  ANY_DL_TBF_PARAMETERS, ANY_SDL_Boolean, ANY_TLLI_T, ANY_TLLI_T, ANY_TLLI_T, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_GAMMA_ARR_T)
#endif
#define z0Y203_copy(P)  P

extern void yAss_UL_TBF_PARAMETERS XPP((UL_TBF_PARAMETERS *, UL_TBF_PARAMETERS,
  int));
#define yAssF_UL_TBF_PARAMETERS(V,E,A)  yAss_UL_TBF_PARAMETERS(&(V),E,A)
#define yEqF_UL_TBF_PARAMETERS(Expr1,Expr2)  yEq_UL_TBF_PARAMETERS(Expr1,Expr2)
#define yNEqF_UL_TBF_PARAMETERS(Expr1,Expr2)  ( ! yEq_UL_TBF_PARAMETERS(Expr1,Expr2) )
#ifndef ANY_UL_TBF_PARAMETERS
#define ANY_UL_TBF_PARAMETERS yMake_UL_TBF_PARAMETERS(ANY_RACH_ACCESS_T, \
  ANY_RACH_ACCESS_T, ANY_z_ctypes_6_ShortInt, ANY_PACKET_REQ_REF_ARR_T, \
  ANY_RLC_MODE_T, ANY_TIMESLOT_T, ANY_TFI_T, ANY_SDL_Octet, \
  ANY_z_ctypes_6_ShortInt, ANY_PH_MAC_MODE_T, ANY_CODING_SCHEME_T, \
  ANY_z_ctypes_8_UnsignedShortInt, ANY_SDL_Boolean, ANY_CODING_SCHEME_T, \
  ANY_SDL_Boolean, ANY_RLC_WS_T, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_ACCESS_TECH_REQ_T, ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Boolean, ANY_z_ctypes_8_UnsignedShortInt)
#endif
#define z0Y303_copy(P)  P

extern void yAss_DL_TBF_PARAMETERS XPP((DL_TBF_PARAMETERS *, DL_TBF_PARAMETERS,
  int));
#define yAssF_DL_TBF_PARAMETERS(V,E,A)  yAss_DL_TBF_PARAMETERS(&(V),E,A)
#define yEqF_DL_TBF_PARAMETERS(Expr1,Expr2)  yEq_DL_TBF_PARAMETERS(Expr1,Expr2)
#define yNEqF_DL_TBF_PARAMETERS(Expr1,Expr2)  ( ! yEq_DL_TBF_PARAMETERS(Expr1,Expr2) )
#ifndef ANY_DL_TBF_PARAMETERS
#define ANY_DL_TBF_PARAMETERS yMake_DL_TBF_PARAMETERS(ANY_TFI_T, ANY_SDL_Octet, \
  ANY_RLC_MODE_T, ANY_PH_MAC_MODE_T, ANY_RLC_WS_T, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Octet)
#endif
#define z0Y43_copy(P)  P

extern void yAss_CONTROL_BLOCK_ARR_T XPP((CONTROL_BLOCK_ARR_T,
  CONTROL_BLOCK_ARR_T, int));
#define yAssF_CONTROL_BLOCK_ARR_T(V,E,A)  yAss_CONTROL_BLOCK_ARR_T(V,E,A)
#define yEqF_CONTROL_BLOCK_ARR_T(Expr1,Expr2)  yEq_CONTROL_BLOCK_ARR_T(Expr1,Expr2)
#define yNEqF_CONTROL_BLOCK_ARR_T(Expr1,Expr2)  ( ! yEq_CONTROL_BLOCK_ARR_T(Expr1,Expr2) )
#define yTstI_CONTROL_BLOCK_ARR_T(yExpr)  yExpr
#ifndef ANY_CONTROL_BLOCK_ARR_T
#define ANY_CONTROL_BLOCK_ARR_T
#endif
#define z0Y55_copy(P)  P

extern void yAss_CTRL_BLOCK_ELMT_T XPP((CTRL_BLOCK_ELMT_T *, CTRL_BLOCK_ELMT_T,
  int));
#define yAssF_CTRL_BLOCK_ELMT_T(V,E,A)  yAss_CTRL_BLOCK_ELMT_T(&(V),E,A)
#define yEqF_CTRL_BLOCK_ELMT_T(Expr1,Expr2)  yEq_CTRL_BLOCK_ELMT_T(Expr1,Expr2)
#define yNEqF_CTRL_BLOCK_ELMT_T(Expr1,Expr2)  ( ! yEq_CTRL_BLOCK_ELMT_T(Expr1,Expr2) )
#ifndef ANY_CTRL_BLOCK_ELMT_T
#define ANY_CTRL_BLOCK_ELMT_T yMake_CTRL_BLOCK_ELMT_T(ANY_BLOCK_STRUCT_T, \
  ANY_SDL_Octet)
#endif
#define z0Y63_copy(P)  P

extern void yAss_CTRL_BLOCK_ARR_T XPP((CTRL_BLOCK_ARR_T, CTRL_BLOCK_ARR_T,
  int));
#define yAssF_CTRL_BLOCK_ARR_T(V,E,A)  yAss_CTRL_BLOCK_ARR_T(V,E,A)
#define yEqF_CTRL_BLOCK_ARR_T(Expr1,Expr2)  yEq_CTRL_BLOCK_ARR_T(Expr1,Expr2)
#define yNEqF_CTRL_BLOCK_ARR_T(Expr1,Expr2)  ( ! yEq_CTRL_BLOCK_ARR_T(Expr1,Expr2) )
#define yTstI_CTRL_BLOCK_ARR_T(yExpr)  yExpr
#ifndef ANY_CTRL_BLOCK_ARR_T
#define ANY_CTRL_BLOCK_ARR_T
#endif
#define z0Y75_copy(P)  P

extern void yAss_CTRL_QUEUE_T XPP((CTRL_QUEUE_T *, CTRL_QUEUE_T, int));
#define yAssF_CTRL_QUEUE_T(V,E,A)  yAss_CTRL_QUEUE_T(&(V),E,A)
#define yEqF_CTRL_QUEUE_T(Expr1,Expr2)  yEq_CTRL_QUEUE_T(Expr1,Expr2)
#define yNEqF_CTRL_QUEUE_T(Expr1,Expr2)  ( ! yEq_CTRL_QUEUE_T(Expr1,Expr2) )
#ifndef ANY_CTRL_QUEUE_T
#define ANY_CTRL_QUEUE_T yMake_CTRL_QUEUE_T(ANY_CTRL_BLOCK_ARR_T, \
  ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt, \
  ANY_SDL_Boolean)
#endif
#define z0Y83_copy(P)  P

extern void yAss_POLLED_BLOCK_ELMT_T XPP((POLLED_BLOCK_ELMT_T *,
  POLLED_BLOCK_ELMT_T, int));
#define yAssF_POLLED_BLOCK_ELMT_T(V,E,A)  yAss_POLLED_BLOCK_ELMT_T(&(V),E,A)
#define yEqF_POLLED_BLOCK_ELMT_T(Expr1,Expr2)  yEq_POLLED_BLOCK_ELMT_T(Expr1,Expr2)
#define yNEqF_POLLED_BLOCK_ELMT_T(Expr1,Expr2)  ( ! yEq_POLLED_BLOCK_ELMT_T(Expr1,Expr2) )
#ifndef ANY_POLLED_BLOCK_ELMT_T
#define ANY_POLLED_BLOCK_ELMT_T yMake_POLLED_BLOCK_ELMT_T(ANY_ABSOLUTE_FRAME_NUMBER_T, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Boolean, ANY_SDL_Boolean, \
  ANY_SDL_Boolean, ANY_SDL_Boolean, ANY_POLL_PRIORITY_T, ANY_SDL_Boolean, \
  ANY_SDL_Octet, ANY_SDL_Octet, ANY_SDL_Octet, ANY_BLOCK_STRUCT_T)
#endif
#define z0Y903_copy(P)  P

extern void yAss_POLLED_LIST_ELMT_T XPP((POLLED_LIST_ELMT_T *,
  POLLED_LIST_ELMT_T, int));
#define yAssF_POLLED_LIST_ELMT_T(V,E,A)  yAss_POLLED_LIST_ELMT_T(&(V),E,A)
#define yEqF_POLLED_LIST_ELMT_T(Expr1,Expr2)  yEq_POLLED_LIST_ELMT_T(Expr1,Expr2)
#define yNEqF_POLLED_LIST_ELMT_T(Expr1,Expr2)  ( ! yEq_POLLED_LIST_ELMT_T(Expr1,Expr2) )
#ifndef ANY_POLLED_LIST_ELMT_T
#define ANY_POLLED_LIST_ELMT_T yMake_POLLED_LIST_ELMT_T(ANY_SDL_Boolean, \
  ANY_z_ctypes_6_ShortInt, ANY_POLLED_BLOCK_ELMT_T)
#endif
#define z0YA3_copy(P)  P

extern void yAss_POLLED_LIST_ARR_T XPP((POLLED_LIST_ARR_T, POLLED_LIST_ARR_T,
  int));
#define yAssF_POLLED_LIST_ARR_T(V,E,A)  yAss_POLLED_LIST_ARR_T(V,E,A)
#define yEqF_POLLED_LIST_ARR_T(Expr1,Expr2)  yEq_POLLED_LIST_ARR_T(Expr1,Expr2)
#define yNEqF_POLLED_LIST_ARR_T(Expr1,Expr2)  ( ! yEq_POLLED_LIST_ARR_T(Expr1,Expr2) )
#define yTstI_POLLED_LIST_ARR_T(yExpr)  yExpr
#ifndef ANY_POLLED_LIST_ARR_T
#define ANY_POLLED_LIST_ARR_T
#endif
#define z0YB5_copy(P)  P

extern void yAss_POLLED_LIST_T XPP((POLLED_LIST_T *, POLLED_LIST_T, int));
#define yAssF_POLLED_LIST_T(V,E,A)  yAss_POLLED_LIST_T(&(V),E,A)
#define yEqF_POLLED_LIST_T(Expr1,Expr2)  yEq_POLLED_LIST_T(Expr1,Expr2)
#define yNEqF_POLLED_LIST_T(Expr1,Expr2)  ( ! yEq_POLLED_LIST_T(Expr1,Expr2) )
#ifndef ANY_POLLED_LIST_T
#define ANY_POLLED_LIST_T yMake_POLLED_LIST_T(ANY_POLLED_LIST_ARR_T, \
  ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt, ANY_z_ctypes_6_ShortInt)
#endif
#define z0YC3_copy(P)  P

extern void yAss_PACKET_REQ_REF_ARR_T XPP((PACKET_REQ_REF_ARR_T,
  PACKET_REQ_REF_ARR_T, int));
#define yAssF_PACKET_REQ_REF_ARR_T(V,E,A)  yAss_PACKET_REQ_REF_ARR_T(V,E,A)
#define yEqF_PACKET_REQ_REF_ARR_T(Expr1,Expr2)  yEq_PACKET_REQ_REF_ARR_T(Expr1,Expr2)
#define yNEqF_PACKET_REQ_REF_ARR_T(Expr1,Expr2)  ( ! yEq_PACKET_REQ_REF_ARR_T(Expr1,Expr2) )
#define yTstI_PACKET_REQ_REF_ARR_T(yExpr)  yExpr
#ifndef ANY_PACKET_REQ_REF_ARR_T
#define ANY_PACKET_REQ_REF_ARR_T
#endif
#define z0YD5_copy(P)  P

extern void yAss_PACKET_REQUEST_REF_T XPP((PACKET_REQUEST_REF_T *,
  PACKET_REQUEST_REF_T, int));
#define yAssF_PACKET_REQUEST_REF_T(V,E,A)  yAss_PACKET_REQUEST_REF_T(&(V),E,A)
#define yEqF_PACKET_REQUEST_REF_T(Expr1,Expr2)  yEq_PACKET_REQUEST_REF_T(Expr1,Expr2)
#define yNEqF_PACKET_REQUEST_REF_T(Expr1,Expr2)  ( ! yEq_PACKET_REQUEST_REF_T(Expr1,Expr2) )
#ifndef ANY_PACKET_REQUEST_REF_T
#define ANY_PACKET_REQUEST_REF_T yMake_PACKET_REQUEST_REF_T(ANY_PRACH_AB_T, \
  ANY_REDUCED_FRAME_NUMBER_T)
#endif
#define z0YE3_copy(P)  P

#define yAssF_PACKET_CHANNEL_DESCRIPTION_PTR_T(V,E,A)  V = E
#define yDef_PACKET_CHANNEL_DESCRIPTION_PTR_T(yVar)  *(yVar) = z0YF0_Null()
#define yEqF_PACKET_CHANNEL_DESCRIPTION_PTR_T(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_PACKET_CHANNEL_DESCRIPTION_PTR_T(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_PACKET_CHANNEL_DESCRIPTION_PTR_T
#define ANY_PACKET_CHANNEL_DESCRIPTION_PTR_T 0
#endif
#define z0YFF_copy(P)  P
#ifdef XVALIDATOR_LIB
#define yAll_PACKET_CHANNEL_DESCRIPTION_PTR_T() (PACKET_CHANNEL_DESCRIPTION_PTR_T)XALLOC_REF_VAL(sizeof(PACKET_CHANNEL_DESCRIPTION_T), ySrtN_PACKET_CHANNEL_DESCRIPTION_PTR_T)
#else
#define yAll_PACKET_CHANNEL_DESCRIPTION_PTR_T() (PACKET_CHANNEL_DESCRIPTION_PTR_T)XALLOC(sizeof(PACKET_CHANNEL_DESCRIPTION_T), \
  &ySrtR_PACKET_CHANNEL_DESCRIPTION_PTR_T)
#endif
#define yPlus_PACKET_CHANNEL_DESCRIPTION_PTR_T(P1,P2) (P1+P2)
#define yMinus_PACKET_CHANNEL_DESCRIPTION_PTR_T(P1,P2) (P1-P2)
#define z0YF0_Null() 0
#define z0YF1_Alloc() yAll_PACKET_CHANNEL_DESCRIPTION_PTR_T()
#ifdef XVALIDATOR_LIB
#define z0YF6_free(P) XFREE_REF_VAL((void **)(P), sizeof(PACKET_CHANNEL_DESCRIPTION_T))
#else
#define z0YF6_free(P) XFREE((void **)(P), sizeof(PACKET_CHANNEL_DESCRIPTION_T))
#endif
#define z0YF9_ref2vstar(P) (z_ctypes_4_Voidstar)(P)
#define z0YFA_vstar2ref(P) (z_ctypes_4_Voidstar)(P)
#define z0YFB_ref2vstarstar(P) (z_ctypes_5_Voidstarstar)(P)

#define yAssF_DYNAMIC_T(V,E,A)  V = E
#define yEqF_DYNAMIC_T(Expr1,Expr2)  yEq_DYNAMIC_T(Expr1,Expr2)
#define yNEqF_DYNAMIC_T(Expr1,Expr2)  ( ! yEq_DYNAMIC_T(Expr1,Expr2) )
#ifndef ANY_DYNAMIC_T
#define ANY_DYNAMIC_T yMake_DYNAMIC_T(ANY_ABSOLUTE_FRAME_NUMBER_T, \
  ANY_SDL_Octet, ANY_SDL_Octet)
#endif
#define z0YG3_copy(P)  P

#define yAssF_DYNAMIC_STATUS_E(V,E,A)  V = E
#define yDef_DYNAMIC_STATUS_E(yVar)  *(yVar) = INVALID_DYNAMIC
#define yEqF_DYNAMIC_STATUS_E(Expr1,Expr2)  (Expr1) == (Expr2)
#define yNEqF_DYNAMIC_STATUS_E(Expr1,Expr2)  (Expr1) != (Expr2)
#ifndef ANY_DYNAMIC_STATUS_E
#define ANY_DYNAMIC_STATUS_E (DYNAMIC_STATUS_E)(0 + \
  GETINTRAND%((int)(DYNAMIC_EXECUTE)+1))
#endif
#define z0YH6_copy(P)  P

#define yAssF_DYNAMIC_ALLOC_STATUS_T(V,E,A)  V = E
#define yEqF_DYNAMIC_ALLOC_STATUS_T(Expr1,Expr2)  yEq_DYNAMIC_ALLOC_STATUS_T(Expr1,Expr2)
#define yNEqF_DYNAMIC_ALLOC_STATUS_T(Expr1,Expr2)  ( ! yEq_DYNAMIC_ALLOC_STATUS_T(Expr1,Expr2) )
#ifndef ANY_DYNAMIC_ALLOC_STATUS_T
#define ANY_DYNAMIC_ALLOC_STATUS_T yMake_DYNAMIC_ALLOC_STATUS_T(ANY_DYNAMIC_STATUS_E, \
  ANY_DYNAMIC_T)
#endif
#define z0YI3_copy(P)  P

extern void yAss_AUTH_PARA_RAND_ARR_T XPP((AUTH_PARA_RAND_ARR_T,
  AUTH_PARA_RAND_ARR_T, int));
#define yAssF_AUTH_PARA_RAND_ARR_T(V,E,A)  yAss_AUTH_PARA_RAND_ARR_T(V,E,A)
#define yEqF_AUTH_PARA_RAND_ARR_T(Expr1,Expr2)  yEq_AUTH_PARA_RAND_ARR_T(Expr1,Expr2)
#define yNEqF_AUTH_PARA_RAND_ARR_T(Expr1,Expr2)  ( ! yEq_AUTH_PARA_RAND_ARR_T(Expr1,Expr2) )
#define yTstI_AUTH_PARA_RAND_ARR_T(yExpr)  yExpr
#ifndef ANY_AUTH_PARA_RAND_ARR_T
#define ANY_AUTH_PARA_RAND_ARR_T
#endif
#define z0YJ5_copy(P)  P

#define yAssF_HPLMN_TIMER_VALUE_T(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_HPLMN_TIMER_VALUE_T(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_HPLMN_TIMER_VALUE_T(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_HPLMN_TIMER_VALUE_T(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_HPLMN_TIMER_VALUE_T
#define ANY_HPLMN_TIMER_VALUE_T ANY_SDL_Octet
#endif

#define yAssF_T3212_VALUE(V,E,A)  yAssF_SDL_Octet(V,E,A)
#define yDef_T3212_VALUE(yVar)  xDef_SDL_Octet((SDL_Octet *)yVar)
#define yEqF_T3212_VALUE(Expr1,Expr2)  yEqF_SDL_Octet(Expr1,Expr2)
#define yNEqF_T3212_VALUE(Expr1,Expr2)  yNEqF_SDL_Octet(Expr1,Expr2)
#ifndef ANY_T3212_VALUE
#define ANY_T3212_VALUE ANY_SDL_Octet
#endif

#define yAssF_SCT_GPRS_STATUS_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_SCT_GPRS_STATUS_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_SCT_GPRS_STATUS_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_SCT_GPRS_STATUS_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_SCT_GPRS_STATUS_T
#define ANY_SCT_GPRS_STATUS_T ANY_SDL_Integer
#endif

#define yAssF_SCT_GPRS_MODE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_SCT_GPRS_MODE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_SCT_GPRS_MODE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_SCT_GPRS_MODE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_SCT_GPRS_MODE_T
#define ANY_SCT_GPRS_MODE_T ANY_SDL_Integer
#endif

#define yAssF_SCT_EGPRS_MODE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_SCT_EGPRS_MODE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_SCT_EGPRS_MODE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_SCT_EGPRS_MODE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_SCT_EGPRS_MODE_T
#define ANY_SCT_EGPRS_MODE_T ANY_SDL_Integer
#endif

#define yAssF_SCT_TEST_CMD_TYPE(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_SCT_TEST_CMD_TYPE(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_SCT_TEST_CMD_TYPE(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_SCT_TEST_CMD_TYPE(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_SCT_TEST_CMD_TYPE
#define ANY_SCT_TEST_CMD_TYPE ANY_SDL_Integer
#endif

extern void yAss_SCT_PDU_DESCRI_ARR_T XPP((SCT_PDU_DESCRI_ARR_T,
  SCT_PDU_DESCRI_ARR_T, int));
#define yAssF_SCT_PDU_DESCRI_ARR_T(V,E,A)  yAss_SCT_PDU_DESCRI_ARR_T(V,E,A)
#define yEqF_SCT_PDU_DESCRI_ARR_T(Expr1,Expr2)  yEq_SCT_PDU_DESCRI_ARR_T(Expr1,Expr2)
#define yNEqF_SCT_PDU_DESCRI_ARR_T(Expr1,Expr2)  ( ! yEq_SCT_PDU_DESCRI_ARR_T(Expr1,Expr2) )
#define yTstI_SCT_PDU_DESCRI_ARR_T(yExpr)  yExpr
#ifndef ANY_SCT_PDU_DESCRI_ARR_T
#define ANY_SCT_PDU_DESCRI_ARR_T
#endif
#define z0YK5_copy(P)  P

extern void yAss_GPRS_TEST_MODE_CMD_T XPP((GPRS_TEST_MODE_CMD_T *,
  GPRS_TEST_MODE_CMD_T, int));
#define yAssF_GPRS_TEST_MODE_CMD_T(V,E,A)  yAss_GPRS_TEST_MODE_CMD_T(&(V),E,A)
#define yEqF_GPRS_TEST_MODE_CMD_T(Expr1,Expr2)  yEq_GPRS_TEST_MODE_CMD_T(Expr1,Expr2)
#define yNEqF_GPRS_TEST_MODE_CMD_T(Expr1,Expr2)  ( ! yEq_GPRS_TEST_MODE_CMD_T(Expr1,Expr2) )
#ifndef ANY_GPRS_TEST_MODE_CMD_T
#define ANY_GPRS_TEST_MODE_CMD_T yMake_GPRS_TEST_MODE_CMD_T(ANY_SCT_TEST_CMD_TYPE, \
  ANY_SCT_PDU_DESCRI_ARR_T, ANY_SCT_GPRS_MODE_T, ANY_SCT_EGPRS_MODE_T, \
  ANY_SDL_Octet)
#endif
#define z0YL3_copy(P)  P

extern void yAss_SCT_GPRS_TEST_CMD_ARR_T XPP((SCT_GPRS_TEST_CMD_ARR_T,
  SCT_GPRS_TEST_CMD_ARR_T, int));
#define yAssF_SCT_GPRS_TEST_CMD_ARR_T(V,E,A)  yAss_SCT_GPRS_TEST_CMD_ARR_T(V,E,A)
#define yEqF_SCT_GPRS_TEST_CMD_ARR_T(Expr1,Expr2)  yEq_SCT_GPRS_TEST_CMD_ARR_T(Expr1,Expr2)
#define yNEqF_SCT_GPRS_TEST_CMD_ARR_T(Expr1,Expr2)  ( ! yEq_SCT_GPRS_TEST_CMD_ARR_T(Expr1,Expr2) )
#define yTstI_SCT_GPRS_TEST_CMD_ARR_T(yExpr)  yExpr
#ifndef ANY_SCT_GPRS_TEST_CMD_ARR_T
#define ANY_SCT_GPRS_TEST_CMD_ARR_T
#endif
#define z0YM5_copy(P)  P

#define yAssF_SCT_MSG_TYPE_T(V,E,A)  yAssF_z_ctypes_6_ShortInt(V,E,A)
#define yDef_SCT_MSG_TYPE_T(yVar) \
  yDef_z_ctypes_6_ShortInt((z_ctypes_6_ShortInt *)yVar)
#define yEqF_SCT_MSG_TYPE_T(Expr1,Expr2)  yEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#define yNEqF_SCT_MSG_TYPE_T(Expr1,Expr2)  yNEqF_z_ctypes_6_ShortInt(Expr1,Expr2)
#ifndef ANY_SCT_MSG_TYPE_T
#define ANY_SCT_MSG_TYPE_T ANY_SDL_Integer
#endif

extern void yAss_L2_DATA_IND_T XPP((L2_DATA_IND_T *, L2_DATA_IND_T, int));
#define yAssF_L2_DATA_IND_T(V,E,A)  yAss_L2_DATA_IND_T(&(V),E,A)
#define yEqF_L2_DATA_IND_T(Expr1,Expr2)  yEq_L2_DATA_IND_T(Expr1,Expr2)
#define yNEqF_L2_DATA_IND_T(Expr1,Expr2)  ( ! yEq_L2_DATA_IND_T(Expr1,Expr2) )
#ifndef ANY_L2_DATA_IND_T
#define ANY_L2_DATA_IND_T yMake_L2_DATA_IND_T(ANY_CHANNEL_TYPE_E, \
  ANY_SUB_CHANNEL_T, ANY_PHYSICAL_BLOCK_ARR_T, ANY_ABSOLUTE_FRAME_NUMBER_T)
#endif
#define z0YN3_copy(P)  P

#define yAssF_POWER_LEVEL_STRUCT_T(V,E,A)  V = E
#define yEqF_POWER_LEVEL_STRUCT_T(Expr1,Expr2)  yEq_POWER_LEVEL_STRUCT_T(Expr1,Expr2)
#define yNEqF_POWER_LEVEL_STRUCT_T(Expr1,Expr2)  ( ! yEq_POWER_LEVEL_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_POWER_LEVEL_STRUCT_T
#define ANY_POWER_LEVEL_STRUCT_T yMake_POWER_LEVEL_STRUCT_T(ANY_BSIC_T, \
  ANY_SDL_Octet, ANY_ARFCN_T)
#endif
#define z0YO3_copy(P)  P

extern void yAss_BCCH_STRUCT_T XPP((BCCH_STRUCT_T *, BCCH_STRUCT_T, int));
#define yAssF_BCCH_STRUCT_T(V,E,A)  yAss_BCCH_STRUCT_T(&(V),E,A)
#define yEqF_BCCH_STRUCT_T(Expr1,Expr2)  yEq_BCCH_STRUCT_T(Expr1,Expr2)
#define yNEqF_BCCH_STRUCT_T(Expr1,Expr2)  ( ! yEq_BCCH_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_BCCH_STRUCT_T
#define ANY_BCCH_STRUCT_T yMake_BCCH_STRUCT_T(ANY_BSIC_T, ANY_ARFCN_T, \
  ANY_z_ctypes_A_UnsignedLongInt, ANY_PHYSICAL_BLOCK_ARR_T)
#endif
#define z0YP3_copy(P)  P

extern void yAss_PCH_STRUCT_T XPP((PCH_STRUCT_T *, PCH_STRUCT_T, int));
#define yAssF_PCH_STRUCT_T(V,E,A)  yAss_PCH_STRUCT_T(&(V),E,A)
#define yEqF_PCH_STRUCT_T(Expr1,Expr2)  yEq_PCH_STRUCT_T(Expr1,Expr2)
#define yNEqF_PCH_STRUCT_T(Expr1,Expr2)  ( ! yEq_PCH_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_PCH_STRUCT_T
#define ANY_PCH_STRUCT_T yMake_PCH_STRUCT_T(ANY_BSIC_T, \
  ANY_PHYSICAL_BLOCK_ARR_T, ANY_ABSOLUTE_FRAME_NUMBER_T)
#endif
#define z0YQ3_copy(P)  P

extern void yAss_PPCH_STRUCT_T XPP((PPCH_STRUCT_T *, PPCH_STRUCT_T, int));
#define yAssF_PPCH_STRUCT_T(V,E,A)  yAss_PPCH_STRUCT_T(&(V),E,A)
#define yEqF_PPCH_STRUCT_T(Expr1,Expr2)  yEq_PPCH_STRUCT_T(Expr1,Expr2)
#define yNEqF_PPCH_STRUCT_T(Expr1,Expr2)  ( ! yEq_PPCH_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_PPCH_STRUCT_T
#define ANY_PPCH_STRUCT_T yMake_PPCH_STRUCT_T(ANY_BSIC_T, \
  ANY_PHYSICAL_BLOCK_ARR_T, ANY_ABSOLUTE_FRAME_NUMBER_T)
#endif
#define z0YR3_copy(P)  P

#define yAssF_RACH_STRUCT_T(V,E,A)  V = E
#define yEqF_RACH_STRUCT_T(Expr1,Expr2)  yEq_RACH_STRUCT_T(Expr1,Expr2)
#define yNEqF_RACH_STRUCT_T(Expr1,Expr2)  ( ! yEq_RACH_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_RACH_STRUCT_T
#define ANY_RACH_STRUCT_T yMake_RACH_STRUCT_T(ANY_RACH_AB_T, \
  ANY_ABSOLUTE_FRAME_NUMBER_T)
#endif
#define z0YS3_copy(P)  P

extern void yAss_MS_DATA_STRUCT_T XPP((MS_DATA_STRUCT_T *, MS_DATA_STRUCT_T,
  int));
#define yAssF_MS_DATA_STRUCT_T(V,E,A)  yAss_MS_DATA_STRUCT_T(&(V),E,A)
#define yEqF_MS_DATA_STRUCT_T(Expr1,Expr2)  yEq_MS_DATA_STRUCT_T(Expr1,Expr2)
#define yNEqF_MS_DATA_STRUCT_T(Expr1,Expr2)  ( ! yEq_MS_DATA_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_MS_DATA_STRUCT_T
#define ANY_MS_DATA_STRUCT_T yMake_MS_DATA_STRUCT_T(ANY_BSIC_T, \
  ANY_CHANNEL_TYPE_E, ANY_SUB_CHANNEL_T, ANY_PHYSICAL_BLOCK_ARR_T, \
  ANY_ABSOLUTE_FRAME_NUMBER_T)
#endif
#define z0YT3_copy(P)  P

extern void yAss_POWER_LEVEL_ARR_T XPP((POWER_LEVEL_ARR_T, POWER_LEVEL_ARR_T,
  int));
#define yAssF_POWER_LEVEL_ARR_T(V,E,A)  yAss_POWER_LEVEL_ARR_T(V,E,A)
#define yEqF_POWER_LEVEL_ARR_T(Expr1,Expr2)  yEq_POWER_LEVEL_ARR_T(Expr1,Expr2)
#define yNEqF_POWER_LEVEL_ARR_T(Expr1,Expr2)  ( ! yEq_POWER_LEVEL_ARR_T(Expr1,Expr2) )
#define yTstI_POWER_LEVEL_ARR_T(yExpr)  yExpr
#ifndef ANY_POWER_LEVEL_ARR_T
#define ANY_POWER_LEVEL_ARR_T
#endif
#define z0YU5_copy(P)  P

extern void yAss_POWER_SWEEP_STRUCT_T XPP((POWER_SWEEP_STRUCT_T *,
  POWER_SWEEP_STRUCT_T, int));
#define yAssF_POWER_SWEEP_STRUCT_T(V,E,A)  yAss_POWER_SWEEP_STRUCT_T(&(V),E,A)
#define yEqF_POWER_SWEEP_STRUCT_T(Expr1,Expr2)  yEq_POWER_SWEEP_STRUCT_T(Expr1,Expr2)
#define yNEqF_POWER_SWEEP_STRUCT_T(Expr1,Expr2)  ( ! yEq_POWER_SWEEP_STRUCT_T(Expr1,Expr2) )
#ifndef ANY_POWER_SWEEP_STRUCT_T
#define ANY_POWER_SWEEP_STRUCT_T yMake_POWER_SWEEP_STRUCT_T(ANY_SDL_Integer, \
  ANY_POWER_LEVEL_ARR_T)
#endif
#define z0YV3_copy(P)  P

extern void yAss_BCCH_BLOCK_IND_T XPP((BCCH_BLOCK_IND_T, BCCH_BLOCK_IND_T,
  int));
#define yAssF_BCCH_BLOCK_IND_T(V,E,A)  yAss_BCCH_BLOCK_IND_T(V,E,A)
#define yEqF_BCCH_BLOCK_IND_T(Expr1,Expr2)  yEq_BCCH_BLOCK_IND_T(Expr1,Expr2)
#define yNEqF_BCCH_BLOCK_IND_T(Expr1,Expr2)  ( ! yEq_BCCH_BLOCK_IND_T(Expr1,Expr2) )
#define yTstI_BCCH_BLOCK_IND_T(yExpr)  yExpr
#ifndef ANY_BCCH_BLOCK_IND_T
#define ANY_BCCH_BLOCK_IND_T
#endif
#define z0YW5_copy(P)  P

extern void yInit_z000000_block_RR_GRR XPP((void));

extern void yInit_z000001_block_SCT XPP((void));

extern void yInit_z000002_block_RLC XPP((void));

extern void yInit_z000003_block_DL XPP((void));

extern void yInit_z000004_block_MAC XPP((void));

extern void yInit_z00100_Block_L1 XPP((void));
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    L2_SIZE_T  Param3;
    L2_MESSAGE_ARR_T  Param4;
} yPDef_PH_DATA_REQ;
typedef yPDef_PH_DATA_REQ  *yPDP_PH_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
    SUB_CHANNEL_T  Param2;
    L2_SIZE_T  Param3;
    L2_MESSAGE_ARR_T  Param4;
    ABSOLUTE_FRAME_NUMBER_T  Param5;
} yPDef_PH_DATA_IND;
typedef yPDef_PH_DATA_IND  *yPDP_PH_DATA_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
} yPDef_PH_READY_TO_SEND_IND;
typedef yPDef_PH_READY_TO_SEND_IND  *yPDP_PH_READY_TO_SEND_IND;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
} yPDef_PH_CONNECT_IND;
typedef yPDef_PH_CONNECT_IND  *yPDP_PH_CONNECT_IND;
typedef struct {
    SIGNAL_VARS
    z_ctypes_8_UnsignedShortInt  Param1;
} yPDef_RRA_MPH_ACTIVE_REQ;
typedef yPDef_RRA_MPH_ACTIVE_REQ  *yPDP_RRA_MPH_ACTIVE_REQ;
typedef struct {
    SIGNAL_VARS
    MS_MULTISLOT_CAPABILITY_T  Param1;
    MS_TXPWR_CAPABILITY_T  Param2;
    MS_TXPWR_CAPABILITY_T  Param3;
    MS_TXPWR_CAPABILITY_T  Param4;
    MS_TXPWR_CAPABILITY_T  Param5;
    MS_EGPRS_CAPABILITY_T  Param6;
} yPDef_RRA_MPH_CLASSMARK_REQ;
typedef yPDef_RRA_MPH_CLASSMARK_REQ  *yPDP_RRA_MPH_CLASSMARK_REQ;
typedef struct {
    SIGNAL_VARS
    MS_BAND_E  Param1;
    ARFCN_LIST_T  Param2;
    BA_IS_VALID_T  Param3;
} yPDef_RRA_MPH_RXPOWER_SWEEP_REQ;
typedef yPDef_RRA_MPH_RXPOWER_SWEEP_REQ  *yPDP_RRA_MPH_RXPOWER_SWEEP_REQ;
typedef struct {
    SIGNAL_VARS
    RXLEV_ARR_T  Param1;
    MS_BAND_E  Param2;
} yPDef_RRA_MPH_RXPOWER_SWEEP_CNF;
typedef yPDef_RRA_MPH_RXPOWER_SWEEP_CNF  *yPDP_RRA_MPH_RXPOWER_SWEEP_CNF;
typedef struct {
    SIGNAL_VARS
    CAMP_PARAM_T  Param1;
    CARD_MASK_T  Param2;
    SDL_Boolean  Param3;
    RR_SERVICE_STATE_E  Param4;
    MS_BAND_E  Param5;
} yPDef_RRA_MPH_BCCH_CAMP_REQ;
typedef yPDef_RRA_MPH_BCCH_CAMP_REQ  *yPDP_RRA_MPH_BCCH_CAMP_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    ARFCN_T  Param2;
    CAMP_RESULT_E  Param3;
} yPDef_RRA_MPH_BCCH_CAMP_CNF;
typedef yPDef_RRA_MPH_BCCH_CAMP_CNF  *yPDP_RRA_MPH_BCCH_CAMP_CNF;
typedef struct {
    SIGNAL_VARS
    ARFCN_LIST_T  Param1;
    ARFCN_BAND_LIST_ARR_T  Param2;
    CARD_MASK_T  Param3;
} yPDef_RRA_MPH_IDLE_BA_UPDATE_REQ;
typedef yPDef_RRA_MPH_IDLE_BA_UPDATE_REQ  *yPDP_RRA_MPH_IDLE_BA_UPDATE_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
    ARFCN_T  Param2;
    PHYSICAL_BLOCK_ARR_T  Param3;
    BCCH_DECODE_INDICATOR_T  Param4;
    ABSOLUTE_FRAME_NUMBER_T  Param5;
    MS_BAND_E  Param6;
} yPDef_RRA_MPH_BCCH_INFO_IND;
typedef yPDef_RRA_MPH_BCCH_INFO_IND  *yPDP_RRA_MPH_BCCH_INFO_IND;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    MS_BAND_E  Param2;
} yPDef_RRA_MPH_BCCH_STOP_REQ;
typedef yPDef_RRA_MPH_BCCH_STOP_REQ  *yPDP_RRA_MPH_BCCH_STOP_REQ;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    z_ctypes_8_UnsignedShortInt  Param2;
    PLMN_STATE_E  Param3;
    MS_BAND_E  Param4;
} yPDef_RRA_MPH_BSIC_DECODE_REQ;
typedef yPDef_RRA_MPH_BSIC_DECODE_REQ  *yPDP_RRA_MPH_BSIC_DECODE_REQ;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    BSIC_T  Param2;
    MS_BAND_E  Param3;
} yPDef_RRA_MPH_BSIC_DECODE_CNF;
typedef yPDef_RRA_MPH_BSIC_DECODE_CNF  *yPDP_RRA_MPH_BSIC_DECODE_CNF;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    MS_BAND_E  Param2;
} yPDef_RRA_MPH_BSIC_DECODE_FAIL;
typedef yPDef_RRA_MPH_BSIC_DECODE_FAIL  *yPDP_RRA_MPH_BSIC_DECODE_FAIL;
typedef struct {
    SIGNAL_VARS
    PAGING_MODE_E  Param1;
    SDL_Boolean  Param2;
    CARD_MASK_T  Param3;
} yPDef_RRA_MPH_PAGE_MODE_REQ;
typedef yPDef_RRA_MPH_PAGE_MODE_REQ  *yPDP_RRA_MPH_PAGE_MODE_REQ;
typedef struct {
    SIGNAL_VARS
    RACH_AB_T  Param1;
    DELAY_SLOTS_T  Param2;
    EGPRS_RACH_AB_T  Param3;
    SDL_Boolean  Param4;
    GSM_EST_TYPE_E  Param5;
} yPDef_RRA_MPH_RANDOM_ACCESS_REQ;
typedef yPDef_RRA_MPH_RANDOM_ACCESS_REQ  *yPDP_RRA_MPH_RANDOM_ACCESS_REQ;
typedef struct {
    SIGNAL_VARS
    RACH_AB_T  Param1;
    REDUCED_FRAME_NUMBER_T  Param2;
    EGPRS_RACH_AB_T  Param3;
    SDL_Boolean  Param4;
} yPDef_RRA_MPH_RANDOM_ACCESS_CNF;
typedef yPDef_RRA_MPH_RANDOM_ACCESS_CNF  *yPDP_RRA_MPH_RANDOM_ACCESS_CNF;
typedef struct {
    SIGNAL_VARS
    CHANNEL_DESCRIPTION_T  Param1;
    MOBILE_ALLOCATION_T  Param2;
    ABSOLUTE_STARTING_TIME_T  Param3;
    FREQ_PARAM_BEFORE_T  Param4;
    TIMING_ADVANCE_T  Param5;
    TRANS_PARAM_T  Param6;
    MS_BAND_E  Param7;
} yPDef_RRA_MPH_IMMED_ASSIGN_REQ;
typedef yPDef_RRA_MPH_IMMED_ASSIGN_REQ  *yPDP_RRA_MPH_IMMED_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_ASSIGN_T  Param1;
    MS_BAND_E  Param2;
} yPDef_RRA_MPH_CHAN_ASSIGN_REQ;
typedef yPDef_RRA_MPH_CHAN_ASSIGN_REQ  *yPDP_RRA_MPH_CHAN_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    CIPHER_PARAM_T  Param1;
    KC_T  Param2;
} yPDef_RRA_MPH_CIPHER_MODE_REQ;
typedef yPDef_RRA_MPH_CIPHER_MODE_REQ  *yPDP_RRA_MPH_CIPHER_MODE_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_DESCRIPTION_T  Param1;
    ARFCN_LIST_T  Param2;
    ABSOLUTE_FRAME_NUMBER_T  Param3;
    MS_BAND_E  Param4;
} yPDef_RRA_MPH_FREQUENCY_CHANGE_REQ;
typedef yPDef_RRA_MPH_FREQUENCY_CHANGE_REQ  *yPDP_RRA_MPH_FREQUENCY_CHANGE_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_MODE_E  Param1;
    MULTI_RATE_CFG_T  Param2;
} yPDef_RRA_MPH_CHANNEL_MODE_REQ;
typedef yPDef_RRA_MPH_CHANNEL_MODE_REQ  *yPDP_RRA_MPH_CHANNEL_MODE_REQ;
typedef struct {
    SIGNAL_VARS
    HANDOVER_PARAM_T  Param1;
    CHANNEL_ASSIGN_T  Param2;
    MS_BAND_E  Param3;
} yPDef_RRA_MPH_HANDOVER_REQ;
typedef yPDef_RRA_MPH_HANDOVER_REQ  *yPDP_RRA_MPH_HANDOVER_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    MOBILE_OTD_T  Param2;
} yPDef_RRA_MPH_HANDOVER_CNF;
typedef yPDef_RRA_MPH_HANDOVER_CNF  *yPDP_RRA_MPH_HANDOVER_CNF;
typedef struct {
    SIGNAL_VARS
    TIMING_ADVANCE_T  Param1;
} yPDef_RRA_MPH_TIMING_ADV_REQ;
typedef yPDef_RRA_MPH_TIMING_ADV_REQ  *yPDP_RRA_MPH_TIMING_ADV_REQ;
typedef struct {
    SIGNAL_VARS
    NCC_PERMITTED_T  Param1;
    RADIO_LINK_TIMEOUT_T  Param2;
    PWRC_T  Param3;
    DTX_ALLOWED_E  Param4;
} yPDef_RRA_MPH_RADIO_LINK_TIMEOUT_REQ;
typedef yPDef_RRA_MPH_RADIO_LINK_TIMEOUT_REQ  *yPDP_RRA_MPH_RADIO_LINK_TIMEOUT_REQ;
typedef struct {
    SIGNAL_VARS
    ARFCN_LIST_T  Param1;
    MULTIBAND_REP_T  Param2;
    ARFCN_BAND_LIST_ARR_T  Param3;
    CARD_MASK_T  Param4;
} yPDef_RRA_MPH_BA_UPDATE_REQ;
typedef yPDef_RRA_MPH_BA_UPDATE_REQ  *yPDP_RRA_MPH_BA_UPDATE_REQ;
typedef struct {
    SIGNAL_VARS
    RR_CELLS_INFO_T  Param1;
} yPDef_RRA_MPH_RR_CELLS_INFO_REQ;
typedef yPDef_RRA_MPH_RR_CELLS_INFO_REQ  *yPDP_RRA_MPH_RR_CELLS_INFO_REQ;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
} yPDef_RRA_MPH_DEACTIVATE_REQ;
typedef yPDef_RRA_MPH_DEACTIVATE_REQ  *yPDP_RRA_MPH_DEACTIVATE_REQ;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
} yPDef_RRA_MPH_CHAN_REL_REQ;
typedef yPDef_RRA_MPH_CHAN_REL_REQ  *yPDP_RRA_MPH_CHAN_REL_REQ;
typedef struct {
    SIGNAL_VARS
    CAMP_PARAM_T  Param1;
    PBCCH_MODE_PARAM_T  Param2;
    CARD_MASK_T  Param3;
    SDL_Boolean  Param4;
    RR_SERVICE_STATE_E  Param5;
    MS_BAND_E  Param6;
} yPDef_RRA_MPH_PBCCH_CAMP_REQ;
typedef yPDef_RRA_MPH_PBCCH_CAMP_REQ  *yPDP_RRA_MPH_PBCCH_CAMP_REQ;
typedef struct {
    SIGNAL_VARS
    NC_NON_DRX_PERIOD_T  Param1;
    NC_REPORT_PERIOD_I_T  Param2;
    NC_REPORT_PERIOD_T_T  Param3;
    ARFCN_LIST_T  Param4;
    ARFCN_BAND_LIST_ARR_T  Param5;
    CARD_MASK_T  Param6;
} yPDef_RRA_MPH_START_NC_MEAS_REQ;
typedef yPDef_RRA_MPH_START_NC_MEAS_REQ  *yPDP_RRA_MPH_START_NC_MEAS_REQ;
typedef struct {
    SIGNAL_VARS
    EXT_MEAS_MODE_T  Param1;
    EXT_REPORT_PERIOD_T  Param2;
    NCC_PERMITTED_T  Param3;
    INT_FREQ_VALID_T  Param4;
    INT_FREQ_INDEX_T  Param5;
    EXT_FREQUENCY_LIST_T  Param6;
} yPDef_RRA_MPH_START_EXT_NC_MEAS_REQ;
typedef yPDef_RRA_MPH_START_EXT_NC_MEAS_REQ  *yPDP_RRA_MPH_START_EXT_NC_MEAS_REQ;
typedef struct {
    SIGNAL_VARS
    NCELL_NUM_T  Param1;
    NC_EM_REPORT_PTR_T  Param2;
    INT_FREQ_VALID_T  Param3;
    IF_LEVEL_LIST_T  Param4;
} yPDef_RRA_MPH_NC_EXT_MEAS_REPORT_IND;
typedef yPDef_RRA_MPH_NC_EXT_MEAS_REPORT_IND  *yPDP_RRA_MPH_NC_EXT_MEAS_REPORT_IND;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
} yPDef_RRA_MPH_BCCH_COLLISION_IND;
typedef yPDef_RRA_MPH_BCCH_COLLISION_IND  *yPDP_RRA_MPH_BCCH_COLLISION_IND;
typedef struct {
    SIGNAL_VARS
    NCELL_NUM_T  Param1;
    DUAL_NCELL_MEAS_REPORT_T  Param2;
} yPDef_RRA_MPH_IDLE_NCELL_MEAS_IND;
typedef yPDef_RRA_MPH_IDLE_NCELL_MEAS_IND  *yPDP_RRA_MPH_IDLE_NCELL_MEAS_IND;
typedef struct {
    SIGNAL_VARS
    CELL_MEAS_T  Param1;
    RRA_COMMAND_E  Param2;
} yPDef_RRA_MPH_IDLE_SCELL_MEAS_IND;
typedef yPDef_RRA_MPH_IDLE_SCELL_MEAS_IND  *yPDP_RRA_MPH_IDLE_SCELL_MEAS_IND;
typedef struct {
    SIGNAL_VARS
    DTX_USED_T  Param1;
    NCELL_NUM_T  Param2;
    DUAL_NCELL_MEAS_REPORT_T  Param3;
    SCELL_MEAS_REPORT_T  Param4;
    IS_MEAS_VALID_T  Param5;
} yPDef_RRA_MPH_CELL_MEAS_IND;
typedef yPDef_RRA_MPH_CELL_MEAS_IND  *yPDP_RRA_MPH_CELL_MEAS_IND;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    CHANNEL_TYPE_E  Param2;
    SUB_CHANNEL_T  Param3;
    ABSOLUTE_FRAME_NUMBER_T  Param4;
    PHYSICAL_BLOCK_ARR_T  Param5;
    MS_BAND_E  Param6;
} yPDef_RRA_MPH_DATA_IND;
typedef yPDef_RRA_MPH_DATA_IND  *yPDP_RRA_MPH_DATA_IND;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    L1_ERROR_CODE_E  Param2;
    MS_BAND_E  Param3;
    CARD_MASK_T  Param4;
    RSSI_T  Param5;
} yPDef_RRA_MPH_ERROR_IND;
typedef yPDef_RRA_MPH_ERROR_IND  *yPDP_RRA_MPH_ERROR_IND;
typedef struct {
    SIGNAL_VARS
    CELL_MEAS_T  Param1;
    NCELL_NUM_T  Param2;
    DUAL_NCELL_MEAS_REPORT_T  Param3;
    BCCH_IF_LEVEL_T  Param4;
    SDL_Boolean  Param5;
} yPDef_RRA_MPH_NC_MEAS_REPORT_IND;
typedef yPDef_RRA_MPH_NC_MEAS_REPORT_IND  *yPDP_RRA_MPH_NC_MEAS_REPORT_IND;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    MS_BAND_E  Param2;
} yPDef_RRA_MPH_STOP_PERIODICALLY_BCCH_REQ;
typedef yPDef_RRA_MPH_STOP_PERIODICALLY_BCCH_REQ  *yPDP_RRA_MPH_STOP_PERIODICALLY_BCCH_REQ;
typedef struct {
    SIGNAL_VARS
    SYSINFO_READ_MODE_E  Param1;
    z_ctypes_6_ShortInt  Param2;
    BCCH_DECODE_LIST_T  Param3;
    PBCCH_DESCRIPTION_T  Param4;
} yPDef_RRA_MPH_BCCH_LIST_DECODE_REQ;
typedef yPDef_RRA_MPH_BCCH_LIST_DECODE_REQ  *yPDP_RRA_MPH_BCCH_LIST_DECODE_REQ;
typedef struct {
    SIGNAL_VARS
    z_ctypes_6_ShortInt  Param1;
    BSIC_DECODE_LIST_T  Param2;
} yPDef_RRA_MPH_BSIC_LIST_DECODE_REQ;
typedef yPDef_RRA_MPH_BSIC_LIST_DECODE_REQ  *yPDP_RRA_MPH_BSIC_LIST_DECODE_REQ;
typedef struct {
    SIGNAL_VARS
    z_ctypes_A_UnsignedLongInt  Param1;
    RF_SCAN_MEAS_LIST_T  Param2;
} yPDef_RRA_MPH_RF_SCAN_IND;
typedef yPDef_RRA_MPH_RF_SCAN_IND  *yPDP_RRA_MPH_RF_SCAN_IND;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
} yPDef_MPH_SMSCB_START_REQ;
typedef yPDef_MPH_SMSCB_START_REQ  *yPDP_MPH_SMSCB_START_REQ;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
} yPDef_MPH_SMSCB_STOP_REQ;
typedef yPDef_MPH_SMSCB_STOP_REQ  *yPDP_MPH_SMSCB_STOP_REQ;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
    SMSCB_SCHEDULE_T  Param2;
} yPDef_MPH_SMSCB_SCHEDULE_REQ;
typedef yPDef_MPH_SMSCB_SCHEDULE_REQ  *yPDP_MPH_SMSCB_SCHEDULE_REQ;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
} yPDef_MPH_SMSCB_USELESS_MSG_REQ;
typedef yPDef_MPH_SMSCB_USELESS_MSG_REQ  *yPDP_MPH_SMSCB_USELESS_MSG_REQ;
typedef struct {
    SIGNAL_VARS
    SMSCB_BLOCK_ARR_T  Param1;
    CARD_MASK_T  Param2;
} yPDef_MPH_SMSCB_DATA_IND;
typedef yPDef_MPH_SMSCB_DATA_IND  *yPDP_MPH_SMSCB_DATA_IND;
typedef struct {
    SIGNAL_VARS
    ABSOLUTE_FRAME_NUMBER_T  Param1;
    SDL_Octet  Param2;
    BLOCK_STRUCT_T  Param3;
} yPDef_PH_MAC_DATA_REQ;
typedef yPDef_PH_MAC_DATA_REQ  *yPDP_PH_MAC_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    TBF_DIRECTION_T  Param1;
    PACKET_CHANNEL_T  Param2;
    TBF_STARTING_TIME_T  Param3;
    PH_MAC_MODE_T  Param4;
    MEAS_PARAM_T  Param5;
    MS_BAND_E  Param6;
    TFI_T  Param7;
    TBF_MODE_T  Param8;
    EGPRS_TBF_PARAM_T  Param9;
    RLC_MODE_T  Param10;
} yPDef_PH_MAC_TBF_CONNECT_REQ;
typedef yPDef_PH_MAC_TBF_CONNECT_REQ  *yPDP_PH_MAC_TBF_CONNECT_REQ;
typedef struct {
    SIGNAL_VARS
    TBF_DIRECTION_T  Param1;
} yPDef_PH_MAC_TBF_RELEASE_REQ;
typedef yPDef_PH_MAC_TBF_RELEASE_REQ  *yPDP_PH_MAC_TBF_RELEASE_REQ;
typedef struct {
    SIGNAL_VARS
    TBF_DIRECTION_T  Param1;
} yPDef_PH_MAC_TBF_CONNECT_CNF;
typedef yPDef_PH_MAC_TBF_CONNECT_CNF  *yPDP_PH_MAC_TBF_CONNECT_CNF;
typedef struct {
    SIGNAL_VARS
    TBF_DIRECTION_T  Param1;
} yPDef_PH_MAC_TBF_RELEASE_CNF;
typedef yPDef_PH_MAC_TBF_RELEASE_CNF  *yPDP_PH_MAC_TBF_RELEASE_CNF;
typedef struct {
    SIGNAL_VARS
    BLOCK_STRUCT_PTR_ARR_T  Param1;
    ABSOLUTE_FRAME_NUMBER_T  Param2;
} yPDef_PH_MAC_DATA_IND;
typedef yPDef_PH_MAC_DATA_IND  *yPDP_PH_MAC_DATA_IND;
typedef struct {
    SIGNAL_VARS
    AB_FORMAT_E  Param1;
    PRACH_AB_T  Param2;
    DELAY_SLOTS_T  Param3;
    IS_EGPRS_PRACH_T  Param4;
} yPDef_PH_MAC_PRACH_REQ;
typedef yPDef_PH_MAC_PRACH_REQ  *yPDP_PH_MAC_PRACH_REQ;
typedef struct {
    SIGNAL_VARS
    PRACH_AB_T  Param1;
    REDUCED_FRAME_NUMBER_T  Param2;
} yPDef_PH_MAC_PRACH_CNF;
typedef yPDef_PH_MAC_PRACH_CNF  *yPDP_PH_MAC_PRACH_CNF;
typedef struct {
    SIGNAL_VARS
    GAMMA_ARR_T  Param1;
    ALPHA_T  Param2;
    T_AVG_W_T  Param3;
    T_AVG_T_T  Param4;
    SDL_Boolean  Param5;
    PB_T  Param6;
    USE_BCCH_T  Param7;
    N_AVG_T  Param8;
    GPRS_TIMING_ADVANCE_T  Param9;
    GPRS_TIMING_ADVANCE_T  Param10;
    PMAX_T  Param11;
} yPDef_PH_MAC_TA_PWR_REQ;
typedef yPDef_PH_MAC_TA_PWR_REQ  *yPDP_PH_MAC_TA_PWR_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Octet  Param1;
} yPDef_PH_MAC_PDCH_REL_REQ;
typedef yPDef_PH_MAC_PDCH_REL_REQ  *yPDP_PH_MAC_PDCH_REL_REQ;
typedef struct {
    SIGNAL_VARS
    z_ctypes_6_ShortInt  Param1;
} yPDef_PH_MAC_UL_REL_REQ;
typedef yPDef_PH_MAC_UL_REL_REQ  *yPDP_PH_MAC_UL_REL_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    SCT_EGPRS_MODE_T  Param2;
} yPDef_PH_MAC_SCT_EGPRS_PARAM;
typedef yPDef_PH_MAC_SCT_EGPRS_PARAM  *yPDP_PH_MAC_SCT_EGPRS_PARAM;
typedef struct {
    SIGNAL_VARS
    CHAN_DESCR_T  Param1;
} yPDef_PH_RLC_REALLOCATION_REQ;
typedef yPDef_PH_RLC_REALLOCATION_REQ  *yPDP_PH_RLC_REALLOCATION_REQ;
typedef struct {
    SIGNAL_VARS
    z_ctypes_8_UnsignedShortInt  Param1;
    MAC_CONTROL_MESSAGE_T  Param2;
} yPDef_MAC_CTRL_MSG_IND;
typedef yPDef_MAC_CTRL_MSG_IND  *yPDP_MAC_CTRL_MSG_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    LOOP_LIST_E  Param2;
} yPDef_SCT_PH_TCH_LOOP_CMD;
typedef yPDef_SCT_PH_TCH_LOOP_CMD  *yPDP_SCT_PH_TCH_LOOP_CMD;
typedef struct {
    SIGNAL_VARS
    TEST_INTERFACE_E  Param1;
} yPDef_SCT_PH_TEST_INTERFACE;
typedef yPDef_SCT_PH_TEST_INTERFACE  *yPDP_SCT_PH_TEST_INTERFACE;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_PH_SCT_TCH_LOOP_ACK;
typedef yPDef_PH_SCT_TCH_LOOP_ACK  *yPDP_PH_SCT_TCH_LOOP_ACK;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
} yPDef_RRA_MAC_GPRS_PARAM_REQ;
typedef yPDef_RRA_MAC_GPRS_PARAM_REQ  *yPDP_RRA_MAC_GPRS_PARAM_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    SDL_Boolean  Param2;
    SDL_Boolean  Param3;
    SDL_Boolean  Param4;
} yPDef_RRA_SIM_NUM_SET_REQ;
typedef yPDef_RRA_SIM_NUM_SET_REQ  *yPDP_RRA_SIM_NUM_SET_REQ;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
} yPDef_RRA_SMSCB_START_REQ;
typedef yPDef_RRA_SMSCB_START_REQ  *yPDP_RRA_SMSCB_START_REQ;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
} yPDef_RRA_SMSCB_STOP_REQ;
typedef yPDef_RRA_SMSCB_STOP_REQ  *yPDP_RRA_SMSCB_STOP_REQ;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
    SMSCB_SCHEDULE_T  Param2;
} yPDef_RRA_SMSCB_SCHEDULE_REQ;
typedef yPDef_RRA_SMSCB_SCHEDULE_REQ  *yPDP_RRA_SMSCB_SCHEDULE_REQ;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
} yPDef_RRA_SMSCB_USELESS_MSG_REQ;
typedef yPDef_RRA_SMSCB_USELESS_MSG_REQ  *yPDP_RRA_SMSCB_USELESS_MSG_REQ;
typedef struct {
    SIGNAL_VARS
    SMSCB_BLOCK_ARR_T  Param1;
    CARD_MASK_T  Param2;
} yPDef_RRA_SMSCB_DATA_IND;
typedef yPDef_RRA_SMSCB_DATA_IND  *yPDP_RRA_SMSCB_DATA_IND;
typedef struct {
    SIGNAL_VARS
    L3_MSG_UNIT_T  Param1;
    GSM_EST_TYPE_E  Param2;
    LAI_T  Param3;
    MS_BAND_E  Param4;
} yPDef_MM_RR_EST_REQ;
typedef yPDef_MM_RR_EST_REQ  *yPDP_MM_RR_EST_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_MODE_E  Param1;
} yPDef_MM_RR_EST_IND;
typedef yPDef_MM_RR_EST_IND  *yPDP_MM_RR_EST_IND;
typedef struct {
    SIGNAL_VARS
    CHANNEL_MODE_E  Param1;
} yPDef_MM_RR_EST_CNF;
typedef yPDef_MM_RR_EST_CNF  *yPDP_MM_RR_EST_CNF;
typedef struct {
    SIGNAL_VARS
    RELEASE_CAUSE_T  Param1;
} yPDef_MM_RR_REL_IND;
typedef yPDef_MM_RR_REL_IND  *yPDP_MM_RR_REL_IND;
typedef struct {
    SIGNAL_VARS
    SYNC_CAUSE_E  Param1;
    CHANNEL_MODE_E  Param2;
} yPDef_MM_RR_SYNC_IND;
typedef yPDef_MM_RR_SYNC_IND  *yPDP_MM_RR_SYNC_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Octet  Param1;
    L3_MSG_UNIT_T  Param2;
} yPDef_MM_RR_DATA_REQ;
typedef yPDef_MM_RR_DATA_REQ  *yPDP_MM_RR_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    L3_MSG_UNIT_T  Param1;
} yPDef_MM_RR_DATA_IND;
typedef yPDef_MM_RR_DATA_IND  *yPDP_MM_RR_DATA_IND;
typedef struct {
    SIGNAL_VARS
    MMRR_ABORT_REQ_TYPE_E  Param1;
} yPDef_MM_RR_ABORT_REQ;
typedef yPDef_MM_RR_ABORT_REQ  *yPDP_MM_RR_ABORT_REQ;
typedef struct {
    SIGNAL_VARS
    MMRR_ABORT_CAUSE_E  Param1;
    ACCESS_REJ_TIME_T  Param2;
} yPDef_MM_RR_ABORT_IND;
typedef yPDef_MM_RR_ABORT_IND  *yPDP_MM_RR_ABORT_IND;
typedef struct {
    SIGNAL_VARS
    RR_ACT_TYPE_E  Param1;
    SEL_PARAM_T  Param2;
    MS_MODE_T  Param3;
} yPDef_MM_RR_ACT_REQ;
typedef yPDef_MM_RR_ACT_REQ  *yPDP_MM_RR_ACT_REQ;
typedef struct {
    SIGNAL_VARS
    RR_ACT_TYPE_E  Param1;
    GPRS_IND_E  Param2;
    BCCH_INFO_T  Param3;
    GPRS_INFO_T  Param4;
    SDL_Boolean  Param5;
} yPDef_MM_RR_ACT_IND;
typedef yPDef_MM_RR_ACT_IND  *yPDP_MM_RR_ACT_IND;
#ifdef MODEM_PLATFORM
typedef struct { 
   SIGNAL_VARS 
   ARFCN_T Param1; 
   BOOLEAN Param2; 
} yPDef_MM_RR_SWITCH_ARFCN_CNF; 
typedef yPDef_MM_RR_SWITCH_ARFCN_CNF  *yPDP_MM_RR_SWITCH_ARFCN_CNF;
#endif
typedef struct {
    SIGNAL_VARS
    PLMN_T  Param1;
} yPDef_MM_RR_HOME_PLMN_REQ;
typedef yPDef_MM_RR_HOME_PLMN_REQ  *yPDP_MM_RR_HOME_PLMN_REQ;
typedef struct {
    SIGNAL_VARS
    AVAILABLE_PLMN_LA_LIST_T  Param1;
} yPDef_MM_RR_PLMN_LIST_CNF;
typedef yPDef_MM_RR_PLMN_LIST_CNF  *yPDP_MM_RR_PLMN_LIST_CNF;
typedef struct {
    SIGNAL_VARS
    BLOCK_PTR_T  Param1;
    IMEI_T  Param2;
    IMEISV_T  Param3;
} yPDef_MM_RR_CLASSMARK_REQ;
typedef yPDef_MM_RR_CLASSMARK_REQ  *yPDP_MM_RR_CLASSMARK_REQ;
typedef struct {
    SIGNAL_VARS
    PLMN_T  Param1;
} yPDef_MM_RR_PLMN_IND;
typedef yPDef_MM_RR_PLMN_IND  *yPDP_MM_RR_PLMN_IND;
typedef struct {
    SIGNAL_VARS
    PLMN_LIST_T  Param1;
} yPDef_MM_RR_EPLMN_LIST_REQ;
typedef yPDef_MM_RR_EPLMN_LIST_REQ  *yPDP_MM_RR_EPLMN_LIST_REQ;
#ifdef MODEM_PLATFORM
typedef struct { 
   SIGNAL_VARS 
   ARFCN_T Param1; 
   BOOLEAN Param2; 
   uint16  Param3; 
} yPDef_MM_RR_SWITCH_ARFCN_REQ;
typedef yPDef_MM_RR_SWITCH_ARFCN_REQ  *yPDP_MM_RR_SWITCH_ARFCN_REQ;
#endif
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_GRR_MM_RESUME_GMM_IND;
typedef yPDef_GRR_MM_RESUME_GMM_IND  *yPDP_GRR_MM_RESUME_GMM_IND;
typedef struct {
    SIGNAL_VARS
    TMSI_T  Param1;
    IMSI_T  Param2;
    KC_T  Param3;
    CKSN_T  Param4;
    FLAI_LIST_T  Param5;
    ACC_CONTROL_CLASS_T  Param6;
    PLMN_T  Param7;
    FPLMN_LONG_LIST_T  Param8;
    FLAI_LIST_T  Param9;
} yPDef_MM_RR_MM_INFO_REQ;
typedef yPDef_MM_RR_MM_INFO_REQ  *yPDP_MM_RR_MM_INFO_REQ;
typedef struct {
    SIGNAL_VARS
    MSG_HEADER_T  Param1;
} yPDef_MM_RR_FAILED_MSG_IND;
typedef yPDef_MM_RR_FAILED_MSG_IND  *yPDP_MM_RR_FAILED_MSG_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    L3_MSG_UNIT_T  Param2;
} yPDef_CC_MM_DATA_IND;
typedef yPDef_CC_MM_DATA_IND  *yPDP_CC_MM_DATA_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    L3_MSG_UNIT_T  Param2;
} yPDef_CC_MM_EST_IND;
typedef yPDef_CC_MM_EST_IND  *yPDP_CC_MM_EST_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CHANNEL_MODE_E  Param2;
} yPDef_CC_MM_EST_CNF;
typedef yPDef_CC_MM_EST_CNF  *yPDP_CC_MM_EST_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    GSM_CAUSE_T  Param2;
} yPDef_CC_MM_REL_IND;
typedef yPDef_CC_MM_REL_IND  *yPDP_CC_MM_REL_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CHANNEL_MODE_E  Param2;
} yPDef_CC_MM_REEST_CNF;
typedef yPDef_CC_MM_REEST_CNF  *yPDP_CC_MM_REEST_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    GSM_CAUSE_T  Param2;
} yPDef_CC_MM_ERR_IND;
typedef yPDef_CC_MM_ERR_IND  *yPDP_CC_MM_ERR_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
} yPDef_CC_MM_PROMPT_IND;
typedef yPDef_CC_MM_PROMPT_IND  *yPDP_CC_MM_PROMPT_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    SYNC_CAUSE_E  Param2;
    CHANNEL_MODE_E  Param3;
} yPDef_CC_MM_SYNC_IND;
typedef yPDef_CC_MM_SYNC_IND  *yPDP_CC_MM_SYNC_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    L3_MSG_UNIT_T  Param2;
} yPDef_SMS_MM_DATA_IND;
typedef yPDef_SMS_MM_DATA_IND  *yPDP_SMS_MM_DATA_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    L3_MSG_UNIT_T  Param2;
} yPDef_SMS_MM_EST_IND;
typedef yPDef_SMS_MM_EST_IND  *yPDP_SMS_MM_EST_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CHANNEL_MODE_E  Param2;
} yPDef_SMS_MM_EST_CNF;
typedef yPDef_SMS_MM_EST_CNF  *yPDP_SMS_MM_EST_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    GSM_CAUSE_T  Param2;
} yPDef_SMS_MM_REL_IND;
typedef yPDef_SMS_MM_REL_IND  *yPDP_SMS_MM_REL_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    GSM_CAUSE_T  Param2;
} yPDef_SMS_MM_ERR_IND;
typedef yPDef_SMS_MM_ERR_IND  *yPDP_SMS_MM_ERR_IND;
typedef struct {
    SIGNAL_VARS
    MSG_HEADER_T  Param1;
} yPDef_SMS_MM_UNSENT_MSG_IND;
typedef yPDef_SMS_MM_UNSENT_MSG_IND  *yPDP_SMS_MM_UNSENT_MSG_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    L3_MSG_UNIT_T  Param2;
} yPDef_SS_MM_DATA_IND;
typedef yPDef_SS_MM_DATA_IND  *yPDP_SS_MM_DATA_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    L3_MSG_UNIT_T  Param2;
} yPDef_SS_MM_EST_IND;
typedef yPDef_SS_MM_EST_IND  *yPDP_SS_MM_EST_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CHANNEL_MODE_E  Param2;
} yPDef_SS_MM_EST_CNF;
typedef yPDef_SS_MM_EST_CNF  *yPDP_SS_MM_EST_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    GSM_CAUSE_T  Param2;
} yPDef_SS_MM_REL_IND;
typedef yPDef_SS_MM_REL_IND  *yPDP_SS_MM_REL_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    GSM_CAUSE_T  Param2;
} yPDef_SS_MM_ERR_IND;
typedef yPDef_SS_MM_ERR_IND  *yPDP_SS_MM_ERR_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    GSM_EST_TYPE_E  Param2;
} yPDef_CM_MM_EST_REQ;
typedef yPDef_CM_MM_EST_REQ  *yPDP_CM_MM_EST_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
} yPDef_CM_MM_REL_REQ;
typedef yPDef_CM_MM_REL_REQ  *yPDP_CM_MM_REL_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    L3_MSG_UNIT_T  Param2;
} yPDef_CM_MM_DATA_REQ;
typedef yPDef_CM_MM_DATA_REQ  *yPDP_CM_MM_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
} yPDef_CM_MM_REEST_REQ;
typedef yPDef_CM_MM_REEST_REQ  *yPDP_CM_MM_REEST_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    IS_REJECT_RECALL_T  Param2;
} yPDef_CM_MM_PROMPT_RSP;
typedef yPDef_CM_MM_PROMPT_RSP  *yPDP_CM_MM_PROMPT_RSP;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
    SDL_PId  Param2;
} yPDef_MNCC_INIT_TASKID_REQ;
typedef yPDef_MNCC_INIT_TASKID_REQ  *yPDP_MNCC_INIT_TASKID_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    GSM_EST_TYPE_E  Param2;
    SETUP_REQ_VALUE_T  Param3;
} yPDef_MNCC_SETUP_REQ;
typedef yPDef_MNCC_SETUP_REQ  *yPDP_MNCC_SETUP_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    SETUP_RSP_VALUE_T  Param2;
} yPDef_MNCC_SETUP_RSP;
typedef yPDef_MNCC_SETUP_RSP  *yPDP_MNCC_SETUP_RSP;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    SETUP_IND_VALUE_T  Param3;
} yPDef_MNCC_SETUP_IND;
typedef yPDef_MNCC_SETUP_IND  *yPDP_MNCC_SETUP_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    SETUP_CNF_VALUE_T  Param3;
} yPDef_MNCC_SETUP_CNF;
typedef yPDef_MNCC_SETUP_CNF  *yPDP_MNCC_SETUP_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
} yPDef_MNCC_SETUP_COMPLETE_IND;
typedef yPDef_MNCC_SETUP_COMPLETE_IND  *yPDP_MNCC_SETUP_COMPLETE_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    REJ_REQ_VALUE_T  Param2;
} yPDef_MNCC_REJ_REQ;
typedef yPDef_MNCC_REJ_REQ  *yPDP_MNCC_REJ_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    REJ_IND_VALUE_T  Param3;
} yPDef_MNCC_REJ_IND;
typedef yPDef_MNCC_REJ_IND  *yPDP_MNCC_REJ_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_CONF_REQ_VALUE_T  Param2;
} yPDef_MNCC_CALL_CONF_REQ;
typedef yPDef_MNCC_CALL_CONF_REQ  *yPDP_MNCC_CALL_CONF_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    CALL_PROCEEDING_IND_VALUE_T  Param3;
} yPDef_MNCC_CALL_PROCEEDING_IND;
typedef yPDef_MNCC_CALL_PROCEEDING_IND  *yPDP_MNCC_CALL_PROCEEDING_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    CALL_PROGRESS_IND_VALUE_T  Param3;
} yPDef_MNCC_CALL_PROGRESS_IND;
typedef yPDef_MNCC_CALL_PROGRESS_IND  *yPDP_MNCC_CALL_PROGRESS_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    ALERT_REQ_VALUE_T  Param2;
} yPDef_MNCC_ALERT_REQ;
typedef yPDef_MNCC_ALERT_REQ  *yPDP_MNCC_ALERT_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    ALERT_IND_VALUE_T  Param3;
} yPDef_MNCC_ALERT_IND;
typedef yPDef_MNCC_ALERT_IND  *yPDP_MNCC_ALERT_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    NOTIFY_E  Param2;
} yPDef_MNCC_NOTIFY_REQ;
typedef yPDef_MNCC_NOTIFY_REQ  *yPDP_MNCC_NOTIFY_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    NOTIFY_IND_VALUE_T  Param3;
} yPDef_MNCC_NOTIFY_IND;
typedef yPDef_MNCC_NOTIFY_IND  *yPDP_MNCC_NOTIFY_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    DISC_REQ_VALUE_T  Param2;
} yPDef_MNCC_DISC_REQ;
typedef yPDef_MNCC_DISC_REQ  *yPDP_MNCC_DISC_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    DISC_IND_VALUE_T  Param3;
} yPDef_MNCC_DISC_IND;
typedef yPDef_MNCC_DISC_IND  *yPDP_MNCC_DISC_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    REL_REQ_VALUE_T  Param2;
} yPDef_MNCC_REL_REQ;
typedef yPDef_MNCC_REL_REQ  *yPDP_MNCC_REL_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    REL_IND_VALUE_T  Param3;
} yPDef_MNCC_REL_IND;
typedef yPDef_MNCC_REL_IND  *yPDP_MNCC_REL_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    GSM_CAUSE_T  Param3;
} yPDef_MNCC_ERR_IND;
typedef yPDef_MNCC_ERR_IND  *yPDP_MNCC_ERR_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    FACILITY_REQ_VALUE_T  Param2;
} yPDef_MNCC_FACILITY_REQ;
typedef yPDef_MNCC_FACILITY_REQ  *yPDP_MNCC_FACILITY_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    L3_MSG_UNIT_T  Param3;
} yPDef_MNCC_FACILITY_IND;
typedef yPDef_MNCC_FACILITY_IND  *yPDP_MNCC_FACILITY_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    SDL_Octet  Param2;
} yPDef_MNCC_START_DTMF_REQ;
typedef yPDef_MNCC_START_DTMF_REQ  *yPDP_MNCC_START_DTMF_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    START_DTMF_CNF_VALUE_T  Param3;
} yPDef_MNCC_START_DTMF_CNF;
typedef yPDef_MNCC_START_DTMF_CNF  *yPDP_MNCC_START_DTMF_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
} yPDef_MNCC_STOP_DTMF_REQ;
typedef yPDef_MNCC_STOP_DTMF_REQ  *yPDP_MNCC_STOP_DTMF_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
} yPDef_MNCC_STOP_DTMF_CNF;
typedef yPDef_MNCC_STOP_DTMF_CNF  *yPDP_MNCC_STOP_DTMF_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    MODIFY_REQ_VALUE_T  Param2;
} yPDef_MNCC_MODIFY_REQ;
typedef yPDef_MNCC_MODIFY_REQ  *yPDP_MNCC_MODIFY_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    MODIFY_CNF_VALUE_T  Param3;
} yPDef_MNCC_MODIFY_CNF;
typedef yPDef_MNCC_MODIFY_CNF  *yPDP_MNCC_MODIFY_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    MODIFY_IND_VALUE_T  Param3;
} yPDef_MNCC_MODIFY_IND;
typedef yPDef_MNCC_MODIFY_IND  *yPDP_MNCC_MODIFY_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    MODIFY_RSP_VALUE_T  Param2;
} yPDef_MNCC_MODIFY_RSP;
typedef yPDef_MNCC_MODIFY_RSP  *yPDP_MNCC_MODIFY_RSP;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    SYNC_CAUSE_E  Param2;
    CHANNEL_MODE_E  Param3;
} yPDef_MNCC_SYNC_IND;
typedef yPDef_MNCC_SYNC_IND  *yPDP_MNCC_SYNC_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
} yPDef_MNCC_HOLD_REQ;
typedef yPDef_MNCC_HOLD_REQ  *yPDP_MNCC_HOLD_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
} yPDef_MNCC_RETRIEVE_REQ;
typedef yPDef_MNCC_RETRIEVE_REQ  *yPDP_MNCC_RETRIEVE_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    HOLD_OR_RETRIEVE_CNF_VALUE_E  Param3;
} yPDef_MNCC_HOLD_CNF;
typedef yPDef_MNCC_HOLD_CNF  *yPDP_MNCC_HOLD_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    HOLD_OR_RETRIEVE_CNF_VALUE_E  Param3;
} yPDef_MNCC_RETRIEVE_CNF;
typedef yPDef_MNCC_RETRIEVE_CNF  *yPDP_MNCC_RETRIEVE_CNF;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
} yPDef_MNCC_ENQ_STATUS_IND;
typedef yPDef_MNCC_ENQ_STATUS_IND  *yPDP_MNCC_ENQ_STATUS_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    ENQ_STATUS_RSP_VALUE_T  Param2;
} yPDef_MNCC_ENQ_STATUS_RSP;
typedef yPDef_MNCC_ENQ_STATUS_RSP  *yPDP_MNCC_ENQ_STATUS_RSP;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
    SDL_PId  Param2;
    SDL_PId  Param3;
    SDL_PId  Param4;
} yPDef_MNCC_INIT_REQ;
typedef yPDef_MNCC_INIT_REQ  *yPDP_MNCC_INIT_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    USER_INFO_VALUE_T  Param2;
} yPDef_MNCC_USER_INFO_REQ;
typedef yPDef_MNCC_USER_INFO_REQ  *yPDP_MNCC_USER_INFO_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    USER_INFO_VALUE_T  Param2;
} yPDef_MNCC_USER_INFO_IND;
typedef yPDef_MNCC_USER_INFO_IND  *yPDP_MNCC_USER_INFO_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CONGESTION_CONT_VALUE_T  Param2;
} yPDef_MNCC_CONGESTION_CONT_IND;
typedef yPDef_MNCC_CONGESTION_CONT_IND  *yPDP_MNCC_CONGESTION_CONT_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    IS_REJECT_RECALL_T  Param2;
} yPDef_MNCC_PROMPT_RSP;
typedef yPDef_MNCC_PROMPT_RSP  *yPDP_MNCC_PROMPT_RSP;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    CCBS_SETUP_CONTAINER_VALUE_T  Param3;
} yPDef_MNCC_CC_ESTABLISHMENT_IND;
typedef yPDef_MNCC_CC_ESTABLISHMENT_IND  *yPDP_MNCC_CC_ESTABLISHMENT_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CC_ESTABLISHMENT_RSP_VALUE_T  Param2;
} yPDef_MNCC_CC_ESTABLISHMENT_RSP;
typedef yPDef_MNCC_CC_ESTABLISHMENT_RSP  *yPDP_MNCC_CC_ESTABLISHMENT_RSP;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    CALL_STATE_E  Param2;
    L3_MSG_UNIT_T  Param3;
} yPDef_MNCC_RECALL_IND;
typedef yPDef_MNCC_RECALL_IND  *yPDP_MNCC_RECALL_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    IS_REJECT_RECALL_T  Param2;
    CAUSE_T  Param3;
} yPDef_MNCC_RECALL_RSP;
typedef yPDef_MNCC_RECALL_RSP  *yPDP_MNCC_RECALL_RSP;
typedef struct {
    SIGNAL_VARS
    MS_ATTACH_TYPE_E  Param1;
    PLMN_T  Param2;
} yPDef_MN_MM_REG_REQ;
typedef yPDef_MN_MM_REG_REQ  *yPDP_MN_MM_REG_REQ;
typedef struct {
    SIGNAL_VARS
    PLMN_T  Param1;
    HANDSET_STATE_E  Param2;
} yPDef_MN_MM_REG_CNF;
typedef yPDef_MN_MM_REG_CNF  *yPDP_MN_MM_REG_CNF;
typedef struct {
    SIGNAL_VARS
    HANDSET_STATE_E  Param1;
    PLMN_T  Param2;
} yPDef_MN_MM_REG_IND;
typedef yPDef_MN_MM_REG_IND  *yPDP_MN_MM_REG_IND;
typedef struct {
    SIGNAL_VARS
    MN_MM_NREG_CAUSE_E  Param1;
} yPDef_MN_MM_NREG_REQ;
typedef yPDef_MN_MM_NREG_REQ  *yPDP_MN_MM_NREG_REQ;
typedef struct {
    SIGNAL_VARS
    HANDSET_STATE_E  Param1;
} yPDef_MN_MM_NREG_CNF;
typedef yPDef_MN_MM_NREG_CNF  *yPDP_MN_MM_NREG_CNF;
typedef struct {
    SIGNAL_VARS
    MN_MM_NREG_IND_CAUSE_E  Param1;
    HANDSET_STATE_E  Param2;
    PLMN_T  Param3;
} yPDef_MN_MM_NREG_IND;
typedef yPDef_MN_MM_NREG_IND  *yPDP_MN_MM_NREG_IND;
typedef struct {
    SIGNAL_VARS
    AVAILABLE_PLMN_LA_LIST_T  Param1;
    SDL_Boolean  Param2;
} yPDef_MN_MM_SCAN_CNF;
typedef yPDef_MN_MM_SCAN_CNF  *yPDP_MN_MM_SCAN_CNF;
typedef struct {
    SIGNAL_VARS
    MN_MM_REG_CAUSE_E  Param1;
    MN_REG_PAR  Param2;
    IS_MS_SUPPORT_CS_T  Param3;
    IS_MS_SUPPORT_PS_T  Param4;
    IS_AUTO_PLMN_SEL_T  Param5;
    IS_FORBID_ROAMING_T  Param6;
    IS_PHONE_CTRL_PLMN_T  Param7;
    PLMN_T  Param8;
    MS_MODE_T  Param9;
    SDL_Octet  Param10;
    SDL_Octet  Param11;
} yPDef_MN_MM_CAMPON_REQ;
typedef yPDef_MN_MM_CAMPON_REQ  *yPDP_MN_MM_CAMPON_REQ;
typedef struct {
    SIGNAL_VARS
    RR_ACT_TYPE_E  Param1;
    CURRENT_CELL_INFO_T  Param2;
    SDL_Octet  Param3;
} yPDef_MN_MM_CAMPON_CNF;
typedef yPDef_MN_MM_CAMPON_CNF  *yPDP_MN_MM_CAMPON_CNF;
typedef struct {
    SIGNAL_VARS
    BLOCK_PTR_T  Param1;
    IMEI_T  Param2;
    IMEISV_T  Param3;
} yPDef_MN_MM_CLASSMARK_REQ;
typedef yPDef_MN_MM_CLASSMARK_REQ  *yPDP_MN_MM_CLASSMARK_REQ;
typedef struct {
    SIGNAL_VARS
    IMSI_T  Param1;
    PLMN_T  Param2;
    PLMN_LIST_T  Param3;
    SDL_Boolean  Param4;
    PLMN_LONG_LIST_T  Param5;
    TMSI_T  Param6;
    LAI_T  Param7;
    MM_UPDATE_STATUS_E  Param8;
    T3212_VALUE  Param9;
    HPLMN_TIMER_VALUE_T  Param10;
    ACC_CONTROL_CLASS_T  Param11;
} yPDef_MN_MM_INFO_REQ;
typedef yPDef_MN_MM_INFO_REQ  *yPDP_MN_MM_INFO_REQ;
typedef struct {
    SIGNAL_VARS
    CKSN_T  Param1;
    KC_T  Param2;
} yPDef_MN_MM_UPDATE_KC_REQ;
typedef yPDef_MN_MM_UPDATE_KC_REQ  *yPDP_MN_MM_UPDATE_KC_REQ;
typedef struct {
    SIGNAL_VARS
    FPLMN_LONG_LIST_T  Param1;
} yPDef_MN_MM_UPDATE_FPLMN_LIST_REQ;
typedef yPDef_MN_MM_UPDATE_FPLMN_LIST_REQ  *yPDP_MN_MM_UPDATE_FPLMN_LIST_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
    SDL_PId  Param2;
    SDL_PId  Param3;
    SDL_PId  Param4;
    SDL_PId  Param5;
    SDL_PId  Param6;
    SDL_PId  Param7;
    SDL_PId  Param8;
} yPDef_MN_MM_INIT_REQ;
typedef yPDef_MN_MM_INIT_REQ  *yPDP_MN_MM_INIT_REQ;
typedef struct {
    SIGNAL_VARS
    PLMN_T  Param1;
    MMGMM_INFORMATION_T  Param2;
} yPDef_MN_MM_INFORMATION_IND;
typedef yPDef_MN_MM_INFORMATION_IND  *yPDP_MN_MM_INFORMATION_IND;
typedef struct {
    SIGNAL_VARS
    MCC_T  Param1;
    EMG_NUM_LIST_T  Param2;
} yPDef_MN_MM_EMG_NUM_LIST_IND;
typedef yPDef_MN_MM_EMG_NUM_LIST_IND  *yPDP_MN_MM_EMG_NUM_LIST_IND;
typedef struct {
    SIGNAL_VARS
    PLMN_LIST_T  Param1;
} yPDef_MN_MM_EPLMN_LIST_IND;
typedef yPDef_MN_MM_EPLMN_LIST_IND  *yPDP_MN_MM_EPLMN_LIST_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    ESTABLISH_MODE_E  Param3;
    L3_SIZE_T  Param4;
    L3_MESSAGE_ARR_T  Param5;
} yPDef_RRA_DL_ESTABLISH_REQ;
typedef yPDef_RRA_DL_ESTABLISH_REQ  *yPDP_RRA_DL_ESTABLISH_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    OUT_STANDING_ACKS_T  Param3;
    UNSERVED_DATA_REQS_T  Param4;
} yPDef_RRA_DL_ESTABLISH_IND;
typedef yPDef_RRA_DL_ESTABLISH_IND  *yPDP_RRA_DL_ESTABLISH_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    OUT_STANDING_ACKS_T  Param3;
    UNSERVED_DATA_REQS_T  Param4;
} yPDef_RRA_DL_ESTABLISH_CNF;
typedef yPDef_RRA_DL_ESTABLISH_CNF  *yPDP_RRA_DL_ESTABLISH_CNF;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    RELEASE_MODE_E  Param3;
} yPDef_RRA_DL_RELEASE_REQ;
typedef yPDef_RRA_DL_RELEASE_REQ  *yPDP_RRA_DL_RELEASE_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    OUT_STANDING_ACKS_T  Param3;
    UNSERVED_DATA_REQS_T  Param4;
    SDL_Boolean  Param5;
} yPDef_RRA_DL_RELEASE_IND;
typedef yPDef_RRA_DL_RELEASE_IND  *yPDP_RRA_DL_RELEASE_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    OUT_STANDING_ACKS_T  Param3;
    UNSERVED_DATA_REQS_T  Param4;
} yPDef_RRA_DL_RELEASE_CNF;
typedef yPDef_RRA_DL_RELEASE_CNF  *yPDP_RRA_DL_RELEASE_CNF;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
} yPDef_RRA_DL_SUSPEND_REQ;
typedef yPDef_RRA_DL_SUSPEND_REQ  *yPDP_RRA_DL_SUSPEND_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
} yPDef_RRA_DL_SUSPEND_CNF;
typedef yPDef_RRA_DL_SUSPEND_CNF  *yPDP_RRA_DL_SUSPEND_CNF;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
    L3_SIZE_T  Param2;
    L3_MESSAGE_ARR_T  Param3;
} yPDef_RRA_DL_RESUME_REQ;
typedef yPDef_RRA_DL_RESUME_REQ  *yPDP_RRA_DL_RESUME_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
    L3_SIZE_T  Param2;
    L3_MESSAGE_ARR_T  Param3;
} yPDef_RRA_DL_RECONNECT_REQ;
typedef yPDef_RRA_DL_RECONNECT_REQ  *yPDP_RRA_DL_RECONNECT_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    L3_SIZE_T  Param3;
    L3_MESSAGE_ARR_T  Param4;
    DO_CONFIRM_T  Param5;
} yPDef_RRA_DL_DATA_REQ;
typedef yPDef_RRA_DL_DATA_REQ  *yPDP_RRA_DL_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    L3_SIZE_T  Param3;
    L3_MESSAGE_ARR_T  Param4;
    ABSOLUTE_FRAME_NUMBER_T  Param5;
} yPDef_RRA_DL_DATA_IND;
typedef yPDef_RRA_DL_DATA_IND  *yPDP_RRA_DL_DATA_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
} yPDef_RRA_DL_DATA_CNF;
typedef yPDef_RRA_DL_DATA_CNF  *yPDP_RRA_DL_DATA_CNF;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    SDL_Boolean  Param3;
    L2_SIZE_T  Param4;
    L2_MESSAGE_ARR_T  Param5;
} yPDef_RRA_DL_UNIT_DATA_REQ;
typedef yPDef_RRA_DL_UNIT_DATA_REQ  *yPDP_RRA_DL_UNIT_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    L2_SIZE_T  Param3;
    L2_MESSAGE_ARR_T  Param4;
} yPDef_RRA_DL_UNIT_DATA_IND;
typedef yPDef_RRA_DL_UNIT_DATA_IND  *yPDP_RRA_DL_UNIT_DATA_IND;
typedef struct {
    SIGNAL_VARS
    MSG_HEADER_ARR_T  Param1;
} yPDef_RRA_DL_SAPI3_FAILED_MSG_IND;
typedef yPDef_RRA_DL_SAPI3_FAILED_MSG_IND  *yPDP_RRA_DL_SAPI3_FAILED_MSG_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
} yPDef_RRA_MDL_RELEASE_REQ;
typedef yPDef_RRA_MDL_RELEASE_REQ  *yPDP_RRA_MDL_RELEASE_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    DL_ERR_IND_E  Param3;
} yPDef_RRA_MDL_ERR_IND;
typedef yPDef_RRA_MDL_ERR_IND  *yPDP_RRA_MDL_ERR_IND;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
    SDL_PId  Param2;
} yPDef_MNSS_INIT_TASKID_REQ;
typedef yPDef_MNSS_INIT_TASKID_REQ  *yPDP_MNSS_INIT_TASKID_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    FACILITY_T  Param2;
    SS_VERSION_PRESENT_T  Param3;
    SS_VERSION_VALUE_T  Param4;
} yPDef_MNSS_BEGIN_REQ;
typedef yPDef_MNSS_BEGIN_REQ  *yPDP_MNSS_BEGIN_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    FACILITY_T  Param2;
} yPDef_MNSS_BEGIN_IND;
typedef yPDef_MNSS_BEGIN_IND  *yPDP_MNSS_BEGIN_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    FACILITY_T  Param2;
} yPDef_MNSS_FACILITY_REQ;
typedef yPDef_MNSS_FACILITY_REQ  *yPDP_MNSS_FACILITY_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    FACILITY_T  Param2;
} yPDef_MNSS_FACILITY_IND;
typedef yPDef_MNSS_FACILITY_IND  *yPDP_MNSS_FACILITY_IND;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    SDL_Boolean  Param2;
    CAUSE_T  Param3;
    SDL_Boolean  Param4;
    FACILITY_T  Param5;
} yPDef_MNSS_END_REQ;
typedef yPDef_MNSS_END_REQ  *yPDP_MNSS_END_REQ;
typedef struct {
    SIGNAL_VARS
    PD_TI_REF_T  Param1;
    SDL_Boolean  Param2;
    CAUSE_T  Param3;
    SDL_Boolean  Param4;
    FACILITY_T  Param5;
    SS_LOW_LAYER_ERROR_E  Param6;
} yPDef_MNSS_END_IND;
typedef yPDef_MNSS_END_IND  *yPDP_MNSS_END_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    ESTABLISH_MODE_E  Param3;
    L3_SIZE_T  Param4;
    L3_MESSAGE_ARR_T  Param5;
} yPDef_DL_ESTABLISH_REQ;
typedef yPDef_DL_ESTABLISH_REQ  *yPDP_DL_ESTABLISH_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    OUT_STANDING_ACKS_T  Param3;
    UNSERVED_DATA_REQS_T  Param4;
} yPDef_DL_ESTABLISH_IND;
typedef yPDef_DL_ESTABLISH_IND  *yPDP_DL_ESTABLISH_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    OUT_STANDING_ACKS_T  Param3;
    UNSERVED_DATA_REQS_T  Param4;
} yPDef_DL_ESTABLISH_CNF;
typedef yPDef_DL_ESTABLISH_CNF  *yPDP_DL_ESTABLISH_CNF;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    RELEASE_MODE_E  Param3;
} yPDef_DL_RELEASE_REQ;
typedef yPDef_DL_RELEASE_REQ  *yPDP_DL_RELEASE_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    OUT_STANDING_ACKS_T  Param3;
    UNSERVED_DATA_REQS_T  Param4;
    SDL_Boolean  Param5;
} yPDef_DL_RELEASE_IND;
typedef yPDef_DL_RELEASE_IND  *yPDP_DL_RELEASE_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    OUT_STANDING_ACKS_T  Param3;
    UNSERVED_DATA_REQS_T  Param4;
} yPDef_DL_RELEASE_CNF;
typedef yPDef_DL_RELEASE_CNF  *yPDP_DL_RELEASE_CNF;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
} yPDef_DL_SUSPEND_REQ;
typedef yPDef_DL_SUSPEND_REQ  *yPDP_DL_SUSPEND_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
} yPDef_DL_SUSPEND_CNF;
typedef yPDef_DL_SUSPEND_CNF  *yPDP_DL_SUSPEND_CNF;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
    L3_SIZE_T  Param2;
    L3_MESSAGE_ARR_T  Param3;
} yPDef_DL_RESUME_REQ;
typedef yPDef_DL_RESUME_REQ  *yPDP_DL_RESUME_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
    L3_SIZE_T  Param2;
    L3_MESSAGE_ARR_T  Param3;
} yPDef_DL_RECONNECT_REQ;
typedef yPDef_DL_RECONNECT_REQ  *yPDP_DL_RECONNECT_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    L3_SIZE_T  Param3;
    L3_MESSAGE_ARR_T  Param4;
    DO_CONFIRM_T  Param5;
} yPDef_DL_DATA_REQ;
typedef yPDef_DL_DATA_REQ  *yPDP_DL_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    L3_SIZE_T  Param3;
    L3_MESSAGE_ARR_T  Param4;
    ABSOLUTE_FRAME_NUMBER_T  Param5;
} yPDef_DL_DATA_IND;
typedef yPDef_DL_DATA_IND  *yPDP_DL_DATA_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
} yPDef_DL_DATA_CNF;
typedef yPDef_DL_DATA_CNF  *yPDP_DL_DATA_CNF;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    SDL_Boolean  Param3;
    L2_SIZE_T  Param4;
    L2_MESSAGE_ARR_T  Param5;
} yPDef_DL_UNIT_DATA_REQ;
typedef yPDef_DL_UNIT_DATA_REQ  *yPDP_DL_UNIT_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    L2_SIZE_T  Param3;
    L2_MESSAGE_ARR_T  Param4;
} yPDef_DL_UNIT_DATA_IND;
typedef yPDef_DL_UNIT_DATA_IND  *yPDP_DL_UNIT_DATA_IND;
typedef struct {
    SIGNAL_VARS
    MSG_HEADER_ARR_T  Param1;
} yPDef_DL_SAPI3_FAILED_MSG_IND;
typedef yPDef_DL_SAPI3_FAILED_MSG_IND  *yPDP_DL_SAPI3_FAILED_MSG_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
} yPDef_MDL_RELEASE_REQ;
typedef yPDef_MDL_RELEASE_REQ  *yPDP_MDL_RELEASE_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    CHANNEL_TYPE_E  Param2;
    DL_ERR_IND_E  Param3;
} yPDef_MDL_ERR_IND;
typedef yPDef_MDL_ERR_IND  *yPDP_MDL_ERR_IND;
typedef struct {
    SIGNAL_VARS
    MS_MULTISLOT_CAPABILITY_T  Param1;
    MS_TXPWR_CAPABILITY_T  Param2;
    MS_TXPWR_CAPABILITY_T  Param3;
    MS_TXPWR_CAPABILITY_T  Param4;
    MS_TXPWR_CAPABILITY_T  Param5;
    MS_EGPRS_CAPABILITY_T  Param6;
} yPDef_MPH_CLASSMARK_REQ;
typedef yPDef_MPH_CLASSMARK_REQ  *yPDP_MPH_CLASSMARK_REQ;
typedef struct {
    SIGNAL_VARS
    MS_BAND_E  Param1;
    ARFCN_LIST_T  Param2;
    BA_IS_VALID_T  Param3;
} yPDef_MPH_RXPOWER_SWEEP_REQ;
typedef yPDef_MPH_RXPOWER_SWEEP_REQ  *yPDP_MPH_RXPOWER_SWEEP_REQ;
typedef struct {
    SIGNAL_VARS
    RXLEV_ARR_T  Param1;
    MS_BAND_E  Param2;
} yPDef_MPH_RXPOWER_SWEEP_CNF;
typedef yPDef_MPH_RXPOWER_SWEEP_CNF  *yPDP_MPH_RXPOWER_SWEEP_CNF;
typedef struct {
    SIGNAL_VARS
    CAMP_PARAM_T  Param1;
    CARD_MASK_T  Param2;
    SDL_Boolean  Param3;
    RR_SERVICE_STATE_E  Param4;
    MS_BAND_E  Param5;
} yPDef_MPH_BCCH_CAMP_REQ;
typedef yPDef_MPH_BCCH_CAMP_REQ  *yPDP_MPH_BCCH_CAMP_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    ARFCN_T  Param2;
    CAMP_RESULT_E  Param3;
} yPDef_MPH_BCCH_CAMP_CNF;
typedef yPDef_MPH_BCCH_CAMP_CNF  *yPDP_MPH_BCCH_CAMP_CNF;
typedef struct {
    SIGNAL_VARS
    ARFCN_LIST_T  Param1;
    ARFCN_BAND_LIST_ARR_T  Param2;
    CARD_MASK_T  Param3;
} yPDef_MPH_IDLE_BA_UPDATE_REQ;
typedef yPDef_MPH_IDLE_BA_UPDATE_REQ  *yPDP_MPH_IDLE_BA_UPDATE_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_TYPE_E  Param1;
    ARFCN_T  Param2;
    PHYSICAL_BLOCK_ARR_T  Param3;
    BCCH_DECODE_INDICATOR_T  Param4;
    ABSOLUTE_FRAME_NUMBER_T  Param5;
    MS_BAND_E  Param6;
} yPDef_MPH_BCCH_INFO_IND;
typedef yPDef_MPH_BCCH_INFO_IND  *yPDP_MPH_BCCH_INFO_IND;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    MS_BAND_E  Param2;
} yPDef_MPH_BCCH_STOP_REQ;
typedef yPDef_MPH_BCCH_STOP_REQ  *yPDP_MPH_BCCH_STOP_REQ;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    BSIC_T  Param2;
    MS_BAND_E  Param3;
} yPDef_MPH_BSIC_DECODE_CNF;
typedef yPDef_MPH_BSIC_DECODE_CNF  *yPDP_MPH_BSIC_DECODE_CNF;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    MS_BAND_E  Param2;
    BSIC_FAIL_CAUSE_E  Param3;
} yPDef_MPH_BSIC_DECODE_FAIL;
typedef yPDef_MPH_BSIC_DECODE_FAIL  *yPDP_MPH_BSIC_DECODE_FAIL;
typedef struct {
    SIGNAL_VARS
    PAGING_MODE_E  Param1;
    SDL_Boolean  Param2;
    CARD_MASK_T  Param3;
} yPDef_MPH_PAGE_MODE_REQ;
typedef yPDef_MPH_PAGE_MODE_REQ  *yPDP_MPH_PAGE_MODE_REQ;
typedef struct {
    SIGNAL_VARS
    RACH_AB_T  Param1;
    DELAY_SLOTS_T  Param2;
    EGPRS_RACH_AB_T  Param3;
    SDL_Boolean  Param4;
    GSM_EST_TYPE_E  Param5;
} yPDef_MPH_RANDOM_ACCESS_REQ;
typedef yPDef_MPH_RANDOM_ACCESS_REQ  *yPDP_MPH_RANDOM_ACCESS_REQ;
typedef struct {
    SIGNAL_VARS
    RACH_AB_T  Param1;
    REDUCED_FRAME_NUMBER_T  Param2;
    SDL_Boolean  Param3;
    EGPRS_RACH_AB_T  Param4;
    SDL_Boolean  Param5;
} yPDef_MPH_RANDOM_ACCESS_CNF;
typedef yPDef_MPH_RANDOM_ACCESS_CNF  *yPDP_MPH_RANDOM_ACCESS_CNF;
typedef struct {
    SIGNAL_VARS
    CHANNEL_DESCRIPTION_T  Param1;
    MOBILE_ALLOCATION_T  Param2;
    ABSOLUTE_STARTING_TIME_T  Param3;
    FREQ_PARAM_BEFORE_T  Param4;
    TIMING_ADVANCE_T  Param5;
    TRANS_PARAM_T  Param6;
    MS_BAND_E  Param7;
} yPDef_MPH_IMMED_ASSIGN_REQ;
typedef yPDef_MPH_IMMED_ASSIGN_REQ  *yPDP_MPH_IMMED_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_ASSIGN_T  Param1;
    MS_BAND_E  Param2;
} yPDef_MPH_CHAN_ASSIGN_REQ;
typedef yPDef_MPH_CHAN_ASSIGN_REQ  *yPDP_MPH_CHAN_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    CIPHER_PARAM_T  Param1;
    KC_T  Param2;
} yPDef_MPH_CIPHER_MODE_REQ;
typedef yPDef_MPH_CIPHER_MODE_REQ  *yPDP_MPH_CIPHER_MODE_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_DESCRIPTION_T  Param1;
    ARFCN_LIST_T  Param2;
    ABSOLUTE_FRAME_NUMBER_T  Param3;
    MS_BAND_E  Param4;
} yPDef_MPH_FREQUENCY_CHANGE_REQ;
typedef yPDef_MPH_FREQUENCY_CHANGE_REQ  *yPDP_MPH_FREQUENCY_CHANGE_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_MODE_E  Param1;
    MULTI_RATE_CFG_T  Param2;
} yPDef_MPH_CHANNEL_MODE_REQ;
typedef yPDef_MPH_CHANNEL_MODE_REQ  *yPDP_MPH_CHANNEL_MODE_REQ;
typedef struct {
    SIGNAL_VARS
    HANDOVER_PARAM_T  Param1;
    CHANNEL_ASSIGN_T  Param2;
    MS_BAND_E  Param3;
} yPDef_MPH_HANDOVER_REQ;
typedef yPDef_MPH_HANDOVER_REQ  *yPDP_MPH_HANDOVER_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    MOBILE_OTD_T  Param2;
} yPDef_MPH_HANDOVER_CNF;
typedef yPDef_MPH_HANDOVER_CNF  *yPDP_MPH_HANDOVER_CNF;
typedef struct {
    SIGNAL_VARS
    TIMING_ADVANCE_T  Param1;
} yPDef_MPH_TIMING_ADV_REQ;
typedef yPDef_MPH_TIMING_ADV_REQ  *yPDP_MPH_TIMING_ADV_REQ;
typedef struct {
    SIGNAL_VARS
    NCC_PERMITTED_T  Param1;
    RADIO_LINK_TIMEOUT_T  Param2;
    PWRC_T  Param3;
    DTX_ALLOWED_E  Param4;
} yPDef_MPH_RADIO_LINK_TIMEOUT_REQ;
typedef yPDef_MPH_RADIO_LINK_TIMEOUT_REQ  *yPDP_MPH_RADIO_LINK_TIMEOUT_REQ;
typedef struct {
    SIGNAL_VARS
    ARFCN_LIST_T  Param1;
    MULTIBAND_REP_T  Param2;
    ARFCN_BAND_LIST_ARR_T  Param3;
    CARD_MASK_T  Param4;
} yPDef_MPH_BA_UPDATE_REQ;
typedef yPDef_MPH_BA_UPDATE_REQ  *yPDP_MPH_BA_UPDATE_REQ;
typedef struct {
    SIGNAL_VARS
    RR_CELLS_INFO_T  Param1;
} yPDef_MPH_RR_CELLS_INFO_REQ;
typedef yPDef_MPH_RR_CELLS_INFO_REQ  *yPDP_MPH_RR_CELLS_INFO_REQ;
typedef struct {
    SIGNAL_VARS
    CARD_MASK_T  Param1;
} yPDef_MPH_DEACTIVATE_REQ;
typedef yPDef_MPH_DEACTIVATE_REQ  *yPDP_MPH_DEACTIVATE_REQ;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
} yPDef_MPH_CHAN_REL_REQ;
typedef yPDef_MPH_CHAN_REL_REQ  *yPDP_MPH_CHAN_REL_REQ;
typedef struct {
    SIGNAL_VARS
    CAMP_PARAM_T  Param1;
    PBCCH_MODE_PARAM_T  Param2;
    CARD_MASK_T  Param3;
    SDL_Boolean  Param4;
    RR_SERVICE_STATE_E  Param5;
    MS_BAND_E  Param6;
} yPDef_MPH_PBCCH_CAMP_REQ;
typedef yPDef_MPH_PBCCH_CAMP_REQ  *yPDP_MPH_PBCCH_CAMP_REQ;
typedef struct {
    SIGNAL_VARS
    NC_NON_DRX_PERIOD_T  Param1;
    NC_REPORT_PERIOD_I_T  Param2;
    NC_REPORT_PERIOD_T_T  Param3;
    ARFCN_LIST_T  Param4;
    ARFCN_BAND_LIST_ARR_T  Param5;
    CARD_MASK_T  Param6;
} yPDef_MPH_START_NC_MEAS_REQ;
typedef yPDef_MPH_START_NC_MEAS_REQ  *yPDP_MPH_START_NC_MEAS_REQ;
typedef struct {
    SIGNAL_VARS
    EXT_MEAS_MODE_T  Param1;
    EXT_REPORT_PERIOD_T  Param2;
    NCC_PERMITTED_T  Param3;
    INT_FREQ_VALID_T  Param4;
    INT_FREQ_INDEX_T  Param5;
    EXT_FREQUENCY_LIST_T  Param6;
} yPDef_MPH_START_EXT_NC_MEAS_REQ;
typedef yPDef_MPH_START_EXT_NC_MEAS_REQ  *yPDP_MPH_START_EXT_NC_MEAS_REQ;
typedef struct {
    SIGNAL_VARS
    NCELL_NUM_T  Param1;
    NC_EM_REPORT_PTR_T  Param2;
    INT_FREQ_VALID_T  Param3;
    IF_LEVEL_LIST_T  Param4;
} yPDef_MPH_NC_EXT_MEAS_REPORT_IND;
typedef yPDef_MPH_NC_EXT_MEAS_REPORT_IND  *yPDP_MPH_NC_EXT_MEAS_REPORT_IND;
typedef struct {
    SIGNAL_VARS
    NCELL_NUM_T  Param1;
    NCELL_MEAS_REPORT_T  Param2;
} yPDef_MPH_IDLE_NCELL_MEAS_IND;
typedef yPDef_MPH_IDLE_NCELL_MEAS_IND  *yPDP_MPH_IDLE_NCELL_MEAS_IND;
typedef struct {
    SIGNAL_VARS
    CELL_MEAS_T  Param1;
    RRA_COMMAND_E  Param2;
} yPDef_MPH_IDLE_SCELL_MEAS_IND;
typedef yPDef_MPH_IDLE_SCELL_MEAS_IND  *yPDP_MPH_IDLE_SCELL_MEAS_IND;
typedef struct {
    SIGNAL_VARS
    DTX_USED_T  Param1;
    NCELL_NUM_T  Param2;
    NCELL_MEAS_REPORT_T  Param3;
    SCELL_MEAS_REPORT_T  Param4;
    IS_MEAS_VALID_T  Param5;
} yPDef_MPH_CELL_MEAS_IND;
typedef yPDef_MPH_CELL_MEAS_IND  *yPDP_MPH_CELL_MEAS_IND;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    CHANNEL_TYPE_E  Param2;
    SUB_CHANNEL_T  Param3;
    ABSOLUTE_FRAME_NUMBER_T  Param4;
    PHYSICAL_BLOCK_ARR_T  Param5;
    MS_BAND_E  Param6;
} yPDef_MPH_DATA_IND;
typedef yPDef_MPH_DATA_IND  *yPDP_MPH_DATA_IND;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    L1_ERROR_CODE_E  Param2;
    MS_BAND_E  Param3;
    CARD_MASK_T  Param4;
    RSSI_T  Param5;
} yPDef_MPH_ERROR_IND;
typedef yPDef_MPH_ERROR_IND  *yPDP_MPH_ERROR_IND;
typedef struct {
    SIGNAL_VARS
    CELL_MEAS_T  Param1;
    NCELL_NUM_T  Param2;
    NCELL_MEAS_REPORT_T  Param3;
    BCCH_IF_LEVEL_T  Param4;
    SDL_Boolean  Param5;
} yPDef_MPH_NC_MEAS_REPORT_IND;
typedef yPDef_MPH_NC_MEAS_REPORT_IND  *yPDP_MPH_NC_MEAS_REPORT_IND;
typedef struct {
    SIGNAL_VARS
    ARFCN_T  Param1;
    MS_BAND_E  Param2;
} yPDef_MPH_STOP_PERIODICALLY_BCCH_REQ;
typedef yPDef_MPH_STOP_PERIODICALLY_BCCH_REQ  *yPDP_MPH_STOP_PERIODICALLY_BCCH_REQ;
typedef struct {
    SIGNAL_VARS
    SYSINFO_READ_MODE_E  Param1;
    z_ctypes_6_ShortInt  Param2;
    BCCH_DECODE_LIST_T  Param3;
    PBCCH_DESCRIPTION_T  Param4;
} yPDef_MPH_BCCH_LIST_DECODE_REQ;
typedef yPDef_MPH_BCCH_LIST_DECODE_REQ  *yPDP_MPH_BCCH_LIST_DECODE_REQ;
typedef struct {
    SIGNAL_VARS
    z_ctypes_6_ShortInt  Param1;
    BSIC_DECODE_LIST_T  Param2;
} yPDef_MPH_BSIC_LIST_DECODE_REQ;
typedef yPDef_MPH_BSIC_LIST_DECODE_REQ  *yPDP_MPH_BSIC_LIST_DECODE_REQ;
typedef struct {
    SIGNAL_VARS
    z_ctypes_A_UnsignedLongInt  Param1;
    RF_SCAN_MEAS_LIST_T  Param2;
} yPDef_MPH_RF_SCAN_IND;
typedef yPDef_MPH_RF_SCAN_IND  *yPDP_MPH_RF_SCAN_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
} yPDef_GMM_SM_ESTABLISH_CNF;
typedef yPDef_GMM_SM_ESTABLISH_CNF  *yPDP_GMM_SM_ESTABLISH_CNF;
typedef struct {
    SIGNAL_VARS
    GMM_CAUSE_T  Param1;
} yPDef_GMM_SM_ESTABLISH_REJ;
typedef yPDef_GMM_SM_ESTABLISH_REJ  *yPDP_GMM_SM_ESTABLISH_REJ;
typedef struct {
    SIGNAL_VARS
    GMM_CAUSE_T  Param1;
    SDL_PId  Param2;
} yPDef_GMM_SM_RELEASE_IND;
typedef yPDef_GMM_SM_RELEASE_IND  *yPDP_GMM_SM_RELEASE_IND;
typedef struct {
    SIGNAL_VARS
    PDU_PTR_T  Param1;
    PDU_SIZE_T  Param2;
} yPDef_SM_GMM_UNITDATA_REQ;
typedef yPDef_SM_GMM_UNITDATA_REQ  *yPDP_SM_GMM_UNITDATA_REQ;
typedef struct {
    SIGNAL_VARS
    PDU_PTR_T  Param1;
    PDU_SIZE_T  Param2;
    SDL_PId  Param3;
    SDL_PId  Param4;
    TLLI_T  Param5;
} yPDef_GMM_SM_UNITDATA_IND;
typedef yPDef_GMM_SM_UNITDATA_IND  *yPDP_GMM_SM_UNITDATA_IND;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
} yPDef_GMM_SM_SUSPEND_IND;
typedef yPDef_GMM_SM_SUSPEND_IND  *yPDP_GMM_SM_SUSPEND_IND;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
} yPDef_GMM_SM_RESUMPTION_IND;
typedef yPDef_GMM_SM_RESUMPTION_IND  *yPDP_GMM_SM_RESUMPTION_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
} yPDef_GMM_SM_TLLI_IND;
typedef yPDef_GMM_SM_TLLI_IND  *yPDP_GMM_SM_TLLI_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    RECEIVE_NPDU_NUMBER_LIST_T  Param2;
    SDL_PId  Param3;
} yPDef_GMM_SM_SEQUENCE_IND;
typedef yPDef_GMM_SM_SEQUENCE_IND  *yPDP_GMM_SM_SEQUENCE_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    RECEIVE_NPDU_NUMBER_LIST_T  Param2;
} yPDef_SM_GMM_SEQUENCE_RSP;
typedef yPDef_SM_GMM_SEQUENCE_RSP  *yPDP_SM_GMM_SEQUENCE_RSP;
typedef struct {
    SIGNAL_VARS
    PDP_CONTEXT_STATUS_ARR_T  Param1;
    SDL_PId  Param2;
} yPDef_GMM_SM_PDP_CONTEXT_STATUS;
typedef yPDef_GMM_SM_PDP_CONTEXT_STATUS  *yPDP_GMM_SM_PDP_CONTEXT_STATUS;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    TOTAL_QOS_T  Param2;
    PDP_ADDRESS_T  Param3;
    APN_T  Param4;
    PCO_T  Param5;
} yPDef_SMREG_PDP_ACTIVATE_REQ;
typedef yPDef_SMREG_PDP_ACTIVATE_REQ  *yPDP_SMREG_PDP_ACTIVATE_REQ;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    TOTAL_QOS_T  Param2;
    PDP_ADDRESS_T  Param3;
    PCO_T  Param4;
} yPDef_SMREG_PDP_ACTIVATE_CNF;
typedef yPDef_SMREG_PDP_ACTIVATE_CNF  *yPDP_SMREG_PDP_ACTIVATE_CNF;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    SM_CAUSE_T  Param2;
    PCO_T  Param3;
} yPDef_SMREG_PDP_ACTIVATE_REJ;
typedef yPDef_SMREG_PDP_ACTIVATE_REJ  *yPDP_SMREG_PDP_ACTIVATE_REJ;
typedef struct {
    SIGNAL_VARS
    PDP_ADDRESS_T  Param1;
    APN_T  Param2;
    NSAPI_NUM_T  Param3;
    PCO_T  Param4;
} yPDef_SMREG_PDP_ACTIVATE_IND;
typedef yPDef_SMREG_PDP_ACTIVATE_IND  *yPDP_SMREG_PDP_ACTIVATE_IND;
typedef struct {
    SIGNAL_VARS
    SM_CAUSE_T  Param1;
    PDP_ADDRESS_T  Param2;
    APN_T  Param3;
} yPDef_SMREG_PDP_ACTIVATE_REJ_RSP;
typedef yPDef_SMREG_PDP_ACTIVATE_REJ_RSP  *yPDP_SMREG_PDP_ACTIVATE_REJ_RSP;
typedef struct {
    SIGNAL_VARS
    SM_CAUSE_T  Param1;
    NSAPI_LIST_T  Param2;
    TEAR_DOWN_ID_T  Param3;
} yPDef_SMREG_PDP_DEACTIVATE_REQ;
typedef yPDef_SMREG_PDP_DEACTIVATE_REQ  *yPDP_SMREG_PDP_DEACTIVATE_REQ;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
} yPDef_SMREG_PDP_DEACTIVATE_CNF;
typedef yPDef_SMREG_PDP_DEACTIVATE_CNF  *yPDP_SMREG_PDP_DEACTIVATE_CNF;
typedef struct {
    SIGNAL_VARS
    SM_CAUSE_T  Param1;
    NSAPI_NUM_T  Param2;
    TEAR_DOWN_ID_T  Param3;
} yPDef_SMREG_PDP_DEACTIVATE_IND;
typedef yPDef_SMREG_PDP_DEACTIVATE_IND  *yPDP_SMREG_PDP_DEACTIVATE_IND;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    TOTAL_QOS_T  Param2;
    PDP_ADDRESS_T  Param3;
} yPDef_SMREG_PDP_MODIFY_IND;
typedef yPDef_SMREG_PDP_MODIFY_IND  *yPDP_SMREG_PDP_MODIFY_IND;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    TOTAL_QOS_T  Param2;
    TRAFFIC_FLOW_TEMPLATE_T  Param3;
} yPDef_SMREG_PDP_MODIFY_REQ;
typedef yPDef_SMREG_PDP_MODIFY_REQ  *yPDP_SMREG_PDP_MODIFY_REQ;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    TOTAL_QOS_T  Param2;
} yPDef_SMREG_PDP_MODIFY_CNF;
typedef yPDef_SMREG_PDP_MODIFY_CNF  *yPDP_SMREG_PDP_MODIFY_CNF;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    SM_CAUSE_T  Param2;
} yPDef_SMREG_PDP_MODIFY_REJ;
typedef yPDef_SMREG_PDP_MODIFY_REJ  *yPDP_SMREG_PDP_MODIFY_REJ;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    NSAPI_NUM_T  Param2;
    TOTAL_QOS_T  Param3;
    TRAFFIC_FLOW_TEMPLATE_T  Param4;
    TOTAL_QOS_T  Param5;
    SDL_Boolean  Param6;
} yPDef_SMREG_PDP_ACTIVATE_SEC_REQ;
typedef yPDef_SMREG_PDP_ACTIVATE_SEC_REQ  *yPDP_SMREG_PDP_ACTIVATE_SEC_REQ;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    TOTAL_QOS_T  Param2;
} yPDef_SMREG_PDP_ACTIVATE_SEC_CNF;
typedef yPDef_SMREG_PDP_ACTIVATE_SEC_CNF  *yPDP_SMREG_PDP_ACTIVATE_SEC_CNF;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    SM_CAUSE_T  Param2;
} yPDef_SMREG_PDP_ACTIVATE_SEC_REJ;
typedef yPDef_SMREG_PDP_ACTIVATE_SEC_REJ  *yPDP_SMREG_PDP_ACTIVATE_SEC_REJ;
typedef struct {
    SIGNAL_VARS
    RESPONSE_MODE_E  Param1;
} yPDef_SMREG_PDP_INFO_REQ;
typedef yPDef_SMREG_PDP_INFO_REQ  *yPDP_SMREG_PDP_INFO_REQ;
typedef struct {
    SIGNAL_VARS
    PDP_ADDRESS_T  Param1;
    APN_T  Param2;
} yPDef_SMREG_PDP_MTACT_IND;
typedef yPDef_SMREG_PDP_MTACT_IND  *yPDP_SMREG_PDP_MTACT_IND;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    TOTAL_QOS_T  Param2;
    PDP_ADDRESS_T  Param3;
    APN_T  Param4;
    PCO_T  Param5;
    SDL_Boolean  Param6;
} yPDef_SMREG_PDP_MTACT_RES;
typedef yPDef_SMREG_PDP_MTACT_RES  *yPDP_SMREG_PDP_MTACT_RES;
typedef struct {
    SIGNAL_VARS
    BLOCK_PTR_T  Param1;
    z_ctypes_7_LongInt  Param2;
} yPDef_SNDCREG_PUSH_DATA_IND;
typedef yPDef_SNDCREG_PUSH_DATA_IND  *yPDP_SNDCREG_PUSH_DATA_IND;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
    SDL_PId  Param2;
} yPDef_SMREG_INIT_REQ;
typedef yPDef_SMREG_INIT_REQ  *yPDP_SMREG_INIT_REQ;
typedef struct {
    SIGNAL_VARS
    z_ctypes_6_ShortInt  Param1;
    NSAPI_NUM_T  Param2;
} yPDef_SMREG_PDP_FORCE_DEACTIVATE_REQ;
typedef yPDef_SMREG_PDP_FORCE_DEACTIVATE_REQ  *yPDP_SMREG_PDP_FORCE_DEACTIVATE_REQ;
typedef struct {
    SIGNAL_VARS
    GMM_ATTACH_TYPE_T  Param1;
    MS_BAND_E  Param2;
} yPDef_APP_GMM_ATTACH_REQ;
typedef yPDef_APP_GMM_ATTACH_REQ  *yPDP_APP_GMM_ATTACH_REQ;
typedef struct {
    SIGNAL_VARS
    GMM_MN_ATTCH_RESULT_T  Param1;
} yPDef_GMM_APP_ATTACH_CNF;
typedef yPDef_GMM_APP_ATTACH_CNF  *yPDP_GMM_APP_ATTACH_CNF;
typedef struct {
    SIGNAL_VARS
    GMM_MN_ATTCH_RESULT_T  Param1;
} yPDef_GMM_APP_ATTACH_REJ;
typedef yPDef_GMM_APP_ATTACH_REJ  *yPDP_GMM_APP_ATTACH_REJ;
typedef struct {
    SIGNAL_VARS
    GMM_DETACH_TYPE_E  Param1;
    SDL_Boolean  Param2;
} yPDef_APP_GMM_DETACH_REQ;
typedef yPDef_APP_GMM_DETACH_REQ  *yPDP_APP_GMM_DETACH_REQ;
typedef struct {
    SIGNAL_VARS
    GMM_DETACH_TYPE_E  Param1;
    SDL_Boolean  Param2;
} yPDef_APP_GMM_FORCE_DETACH_REQ;
typedef yPDef_APP_GMM_FORCE_DETACH_REQ  *yPDP_APP_GMM_FORCE_DETACH_REQ;
typedef struct {
    SIGNAL_VARS
    GMM_MN_DETACH_RESULT_T  Param1;
} yPDef_GMM_APP_DETACH_CNF;
typedef yPDef_GMM_APP_DETACH_CNF  *yPDP_GMM_APP_DETACH_CNF;
typedef struct {
    SIGNAL_VARS
    GMM_MN_DETACH_RESULT_T  Param1;
} yPDef_GMM_APP_DETACH_IND;
typedef yPDef_GMM_APP_DETACH_IND  *yPDP_GMM_APP_DETACH_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    NETWORK_MODE_E  Param2;
    RAI_T  Param3;
    CELL_ID_T  Param4;
} yPDef_APP_GMM_CELL_INFO_NOTIFY;
typedef yPDef_APP_GMM_CELL_INFO_NOTIFY  *yPDP_APP_GMM_CELL_INFO_NOTIFY;
typedef struct {
    SIGNAL_VARS
    PLMN_T  Param1;
    MMGMM_INFORMATION_T  Param2;
} yPDef_GMM_APP_INFORMATION_IND;
typedef yPDef_GMM_APP_INFORMATION_IND  *yPDP_GMM_APP_INFORMATION_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_APP_GMM_IMSI_INFO_NOTIFY;
typedef yPDef_APP_GMM_IMSI_INFO_NOTIFY  *yPDP_APP_GMM_IMSI_INFO_NOTIFY;
typedef struct {
    SIGNAL_VARS
    PLMN_T  Param1;
} yPDef_APP_GMM_UPDATE_FPLMN_LIST_REQ;
typedef yPDef_APP_GMM_UPDATE_FPLMN_LIST_REQ  *yPDP_APP_GMM_UPDATE_FPLMN_LIST_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
    SDL_PId  Param2;
    SDL_PId  Param3;
    SDL_PId  Param4;
    SDL_PId  Param5;
    SDL_PId  Param6;
} yPDef_APP_GMM_INIT_REQ;
typedef yPDef_APP_GMM_INIT_REQ  *yPDP_APP_GMM_INIT_REQ;
typedef struct {
    SIGNAL_VARS
    MCC_T  Param1;
    EMG_NUM_LIST_T  Param2;
} yPDef_GMM_APP_EMG_NUM_LIST_IND;
typedef yPDef_GMM_APP_EMG_NUM_LIST_IND  *yPDP_GMM_APP_EMG_NUM_LIST_IND;
typedef struct {
    SIGNAL_VARS
    PLMN_LIST_T  Param1;
} yPDef_GMM_APP_EPLMN_LIST_IND;
typedef yPDef_GMM_APP_EPLMN_LIST_IND  *yPDP_GMM_APP_EPLMN_LIST_IND;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    LLC_XID_PARAM_T  Param2;
} yPDef_LLC_SET_XID_PARAM_REQ;
typedef yPDef_LLC_SET_XID_PARAM_REQ  *yPDP_LLC_SET_XID_PARAM_REQ;
typedef struct {
    SIGNAL_VARS
    GMM_REGISTRATION_STATE_T  Param1;
} yPDef_GMM_SMS_REG_STATE_RSP;
typedef yPDef_GMM_SMS_REG_STATE_RSP  *yPDP_GMM_SMS_REG_STATE_RSP;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
} yPDef_GMM_SMS_TLLI_IND;
typedef yPDef_GMM_SMS_TLLI_IND  *yPDP_GMM_SMS_TLLI_IND;
typedef struct {
    SIGNAL_VARS
    CELL_GPRS_STATE_E  Param1;
} yPDef_MM_GMM_STATUS_IND;
typedef yPDef_MM_GMM_STATUS_IND  *yPDP_MM_GMM_STATUS_IND;
typedef struct {
    SIGNAL_VARS
    RAI_T  Param1;
    GPRS_KC_ARR_T  Param2;
    IMSI_T  Param3;
    TMSI_T  Param4;
    P_TMSI_T  Param5;
    P_TMSI_SIGNATURE_T  Param6;
    FPLMN_LONG_LIST_T  Param7;
    GMM_CKSN_E  Param8;
    GMM_STATE_UPDATED  Param9;
} yPDef_MM_GMM_SIM_IND;
typedef yPDef_MM_GMM_SIM_IND  *yPDP_MM_GMM_SIM_IND;
typedef struct {
    SIGNAL_VARS
    BLOCK_PTR_T  Param1;
    IMEI_T  Param2;
    IMEISV_T  Param3;
} yPDef_MM_GMM_CLASSMARK_REQ;
typedef yPDef_MM_GMM_CLASSMARK_REQ  *yPDP_MM_GMM_CLASSMARK_REQ;
typedef struct {
    SIGNAL_VARS
    NETWORK_MODE_E  Param1;
    RAI_T  Param2;
    CELL_ID_T  Param3;
    IS_SGSN_R99_T  Param4;
} yPDef_MM_GMM_CELL_INFO_IND;
typedef yPDef_MM_GMM_CELL_INFO_IND  *yPDP_MM_GMM_CELL_INFO_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_MM_GMM_TMSI_STATUS_IND;
typedef yPDef_MM_GMM_TMSI_STATUS_IND  *yPDP_MM_GMM_TMSI_STATUS_IND;
typedef struct {
    SIGNAL_VARS
    GMM_PROCEDURE_TYPE_E  Param1;
} yPDef_GMM_MM_PRO_IND;
typedef yPDef_GMM_MM_PRO_IND  *yPDP_GMM_MM_PRO_IND;
typedef struct {
    SIGNAL_VARS
    LAI_T  Param1;
    GMM_PROCEDURE_TYPE_E  Param2;
} yPDef_GMM_MM_PRO_SUCCESS;
typedef yPDef_GMM_MM_PRO_SUCCESS  *yPDP_GMM_MM_PRO_SUCCESS;
typedef struct {
    SIGNAL_VARS
    LAI_T  Param1;
    GMM_PROCEDURE_TYPE_E  Param2;
    GMM_CAUSE_T  Param3;
} yPDef_GMM_MM_PRO_FAIL;
typedef yPDef_GMM_MM_PRO_FAIL  *yPDP_GMM_MM_PRO_FAIL;
typedef struct {
    SIGNAL_VARS
    LAI_T  Param1;
    GMM_PROCEDURE_TYPE_E  Param2;
    GMM_CAUSE_T  Param3;
} yPDef_GMM_MM_PRO_REJ;
typedef yPDef_GMM_MM_PRO_REJ  *yPDP_GMM_MM_PRO_REJ;
typedef struct {
    SIGNAL_VARS
    GMM_SGSN_DETACH_TYPE_E  Param1;
    GMM_CAUSE_T  Param2;
} yPDef_GMM_MM_DETACH_IND;
typedef yPDef_GMM_MM_DETACH_IND  *yPDP_GMM_MM_DETACH_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_MM_GMM_RESUME_IND;
typedef yPDef_MM_GMM_RESUME_IND  *yPDP_MM_GMM_RESUME_IND;
typedef struct {
    SIGNAL_VARS
    TMSI_T  Param1;
} yPDef_GMM_MM_IDENTITY_IND;
typedef yPDef_GMM_MM_IDENTITY_IND  *yPDP_GMM_MM_IDENTITY_IND;
typedef struct {
    SIGNAL_VARS
    PLMN_LIST_T  Param1;
} yPDef_GMM_MM_EPLMN_IND;
typedef yPDef_GMM_MM_EPLMN_IND  *yPDP_GMM_MM_EPLMN_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    P_TMSI_T  Param2;
} yPDef_GMM_GRR_ASSIGN_REQ;
typedef yPDef_GMM_GRR_ASSIGN_REQ  *yPDP_GMM_GRR_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    GMM_STATE_IND_E  Param1;
} yPDef_GMM_GRR_STATE_REQ;
typedef yPDef_GMM_GRR_STATE_REQ  *yPDP_GMM_GRR_STATE_REQ;
typedef struct {
    SIGNAL_VARS
    GMM_END_STATE_E  Param1;
} yPDef_GMM_GRR_PROC_END_REQ;
typedef yPDef_GMM_GRR_PROC_END_REQ  *yPDP_GMM_GRR_PROC_END_REQ;
typedef struct {
    SIGNAL_VARS
    NETWORK_MODE_E  Param1;
} yPDef_GRR_GMM_MNO_IND;
typedef yPDef_GRR_GMM_MNO_IND  *yPDP_GRR_GMM_MNO_IND;
typedef struct {
    SIGNAL_VARS
    CGI_T  Param1;
    SDL_Boolean  Param2;
} yPDef_GRR_GMM_ACCESS_BAR_IND;
typedef yPDef_GRR_GMM_ACCESS_BAR_IND  *yPDP_GRR_GMM_ACCESS_BAR_IND;
typedef struct {
    SIGNAL_VARS
    PAGE_TYPE_E  Param1;
} yPDef_GRR_GMM_PAGE_IND;
typedef yPDef_GRR_GMM_PAGE_IND  *yPDP_GRR_GMM_PAGE_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    TLLI_T  Param2;
    GMM_CIPHER_ALGORITHM_E  Param3;
    GPRS_KC_ARR_T  Param4;
    SDL_PId  Param5;
} yPDef_GMM_LLME_ASSIGN_REQ;
typedef yPDef_GMM_LLME_ASSIGN_REQ  *yPDP_GMM_LLME_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
} yPDef_GMM_LLME_SUSPEND_REQ;
typedef yPDef_GMM_LLME_SUSPEND_REQ  *yPDP_GMM_LLME_SUSPEND_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
} yPDef_GMM_LLME_RESUME_REQ;
typedef yPDef_GMM_LLME_RESUME_REQ  *yPDP_GMM_LLME_RESUME_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    RACH_ACCESS_T  Param3;
} yPDef_GMM_LLME_TRIGGER_REQ;
typedef yPDef_GMM_LLME_TRIGGER_REQ  *yPDP_GMM_LLME_TRIGGER_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    PDU_PTR_T  Param3;
    PDU_SIZE_T  Param4;
    QOS_PARAM_T  Param5;
    RADIO_PRIORITY_T  Param6;
    CIPHER_T  Param7;
    RACH_ACCESS_T  Param8;
} yPDef_GMM_LL_UNITDATA_REQ;
typedef yPDef_GMM_LL_UNITDATA_REQ  *yPDP_GMM_LL_UNITDATA_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
} yPDef_GMM_LL_INIT_REQ;
typedef yPDef_GMM_LL_INIT_REQ  *yPDP_GMM_LL_INIT_REQ;
typedef struct {
    SIGNAL_VARS
    PDU_PTR_T  Param1;
    PDU_SIZE_T  Param2;
} yPDef_LL_GMM_UNITDATA_IND;
typedef yPDef_LL_GMM_UNITDATA_IND  *yPDP_LL_GMM_UNITDATA_IND;
typedef struct {
    SIGNAL_VARS
    GMM_CAUSE_T  Param1;
} yPDef_LLME_GMM_STATUS_IND;
typedef yPDef_LLME_GMM_STATUS_IND  *yPDP_LLME_GMM_STATUS_IND;
typedef struct {
    SIGNAL_VARS
    SUSPEND_CAUSE_E  Param1;
} yPDef_RRA_GRR_RLC_SUSPEND_REQ;
typedef yPDef_RRA_GRR_RLC_SUSPEND_REQ  *yPDP_RRA_GRR_RLC_SUSPEND_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_RRA_GRR_RLC_RESUME_REQ;
typedef yPDef_RRA_GRR_RLC_RESUME_REQ  *yPDP_RRA_GRR_RLC_RESUME_REQ;
typedef struct {
    SIGNAL_VARS
    REL_CAUSE_E  Param1;
} yPDef_RRA_GRR_RLC_REL_REQ;
typedef yPDef_RRA_GRR_RLC_REL_REQ  *yPDP_RRA_GRR_RLC_REL_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    PRIO_ACCESS_THR_T  Param2;
    BS_CV_MAX_T  Param3;
    SDL_Boolean  Param4;
    PAN_DEC_T  Param5;
    PAN_INC_T  Param6;
    PAN_MAX_T  Param7;
    SDL_Boolean  Param8;
    SDL_Boolean  Param9;
} yPDef_RRA_GRR_RLC_PARAM_REQ;
typedef yPDef_RRA_GRR_RLC_PARAM_REQ  *yPDP_RRA_GRR_RLC_PARAM_REQ;
typedef struct {
    SIGNAL_VARS
    GRR_RLC_MSG_TYPE_T  Param1;
    MAC_MSG_BLOCK_ARR_T  Param2;
} yPDef_RRA_GRR_RLC_DATA_REQ;
typedef yPDef_RRA_GRR_RLC_DATA_REQ  *yPDP_RRA_GRR_RLC_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    CGI_T  Param1;
} yPDef_RRA_GRR_RLC_ACT_REQ;
typedef yPDef_RRA_GRR_RLC_ACT_REQ  *yPDP_RRA_GRR_RLC_ACT_REQ;
typedef struct {
    SIGNAL_VARS
    MAC_MSG_BLOCK_ARR_T  Param1;
} yPDef_RRA_GRR_RLC_NC_CELL_CHANGE_FAIL_RSP;
typedef yPDef_RRA_GRR_RLC_NC_CELL_CHANGE_FAIL_RSP  *yPDP_RRA_GRR_RLC_NC_CELL_CHANGE_FAIL_RSP;
typedef struct {
    SIGNAL_VARS
    TBF_REL_TYPE_E  Param1;
} yPDef_RRA_RLC_GRR_TBF_REL_IND;
typedef yPDef_RRA_RLC_GRR_TBF_REL_IND  *yPDP_RRA_RLC_GRR_TBF_REL_IND;
typedef struct {
    SIGNAL_VARS
    RLC_GRR_ACC_ERROR_E  Param1;
} yPDef_RRA_RLC_GRR_ACC_ERROR_IND;
typedef yPDef_RRA_RLC_GRR_ACC_ERROR_IND  *yPDP_RRA_RLC_GRR_ACC_ERROR_IND;
typedef struct {
    SIGNAL_VARS
    RLC_GRR_ACC_ERROR_E  Param1;
} yPDef_RRA_RLC_GRR_NC_CELL_CHANGE_FAIL_IND;
typedef yPDef_RRA_RLC_GRR_NC_CELL_CHANGE_FAIL_IND  *yPDP_RRA_RLC_GRR_NC_CELL_CHANGE_FAIL_IND;
typedef struct {
    SIGNAL_VARS
    IMEI_T  Param1;
    IMEISV_T  Param2;
    BLOCK_PTR_T  Param3;
} yPDef_GRR_MAC_CLASSMARK_REQ;
typedef yPDef_GRR_MAC_CLASSMARK_REQ  *yPDP_GRR_MAC_CLASSMARK_REQ;
typedef struct {
    SIGNAL_VARS
    MS_BAND_E  Param1;
    IS_PCCCH_T  Param2;
    PRACH_CTRL_PARAMETERS_T  Param3;
    ACC_CONTROL_CLASS_T  Param4;
    CONTROL_ACK_E  Param5;
    AB_FORMAT_E  Param6;
    T3168_VALUE_T  Param7;
    T3192_VALUE_T  Param8;
    BS_CV_MAX_T  Param9;
    NECI_VALUE_T  Param10;
    GLOBAL_PWRC_PARAM_T  Param11;
    MS_BAND_E  Param12;
    MS_BAND_E  Param13;
    IS_SGSN_R99_T  Param14;
    IS_CELL_SUPPORT_EGPRS_T  Param15;
    IS_CELL_SUPPORT_ERACH_T  Param16;
    SDL_Boolean  Param17;
    SDL_Boolean  Param18;
    SDL_Boolean  Param19;
} yPDef_GRR_MAC_PARAM_REQ;
typedef yPDef_GRR_MAC_PARAM_REQ  *yPDP_GRR_MAC_PARAM_REQ;
typedef struct {
    SIGNAL_VARS
    FREQ_UPDATE_T  Param1;
} yPDef_GRR_MAC_FREQ_REQ;
typedef yPDef_GRR_MAC_FREQ_REQ  *yPDP_GRR_MAC_FREQ_REQ;
typedef struct {
    SIGNAL_VARS
    ABSOLUTE_FRAME_NUMBER_T  Param1;
    PACKET_CHANNEL_DESC_IE_T  Param2;
    ARFCN_LIST_T  Param3;
    TA_T  Param4;
    PACKET_CONSTRUCT_T  Param5;
} yPDef_GRR_MAC_RACH_RSP;
typedef yPDef_GRR_MAC_RACH_RSP  *yPDP_GRR_MAC_RACH_RSP;
typedef struct {
    SIGNAL_VARS
    RACH_REJ_CAUSE_T  Param1;
    RACH_REJ_TIME_T  Param2;
} yPDef_GRR_MAC_RACH_REJ_RSP;
typedef yPDef_GRR_MAC_RACH_REJ_RSP  *yPDP_GRR_MAC_RACH_REJ_RSP;
typedef struct {
    SIGNAL_VARS
    MAC_MSG_BLOCK_ARR_T  Param1;
    SDL_Octet  Param2;
    ABSOLUTE_FRAME_NUMBER_T  Param3;
} yPDef_GRR_MAC_DOWNLINK_PDCH_REQ;
typedef yPDef_GRR_MAC_DOWNLINK_PDCH_REQ  *yPDP_GRR_MAC_DOWNLINK_PDCH_REQ;
typedef struct {
    SIGNAL_VARS
    ABSOLUTE_FRAME_NUMBER_T  Param1;
    PACKET_CHANNEL_DESC_IE_T  Param2;
    ARFCN_LIST_T  Param3;
    TA_T  Param4;
    PACKET_CONSTRUCT_T  Param5;
} yPDef_GRR_MAC_IMMED_ASSIGN_REQ;
typedef yPDef_GRR_MAC_IMMED_ASSIGN_REQ  *yPDP_GRR_MAC_IMMED_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_DESCRIPTION_T  Param1;
    ARFCN_LIST_T  Param2;
    STARTING_TIME_T  Param3;
    SDL_Boolean  Param4;
    CHANNEL_DESCRIPTION_T  Param5;
    ARFCN_LIST_T  Param6;
    PACKET_CONSTRUCT_T  Param7;
    PACKET_CONSTRUCT_T  Param8;
    ABSOLUTE_FRAME_NUMBER_T  Param9;
} yPDef_GRR_MAC_PDCH_ASSIGN_REQ;
typedef yPDef_GRR_MAC_PDCH_ASSIGN_REQ  *yPDP_GRR_MAC_PDCH_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    MAC_GRR_MSG_TYPE_T  Param1;
    z_ctypes_8_UnsignedShortInt  Param2;
} yPDef_GRR_MAC_MSG_STATUS_REQ;
typedef yPDef_GRR_MAC_MSG_STATUS_REQ  *yPDP_GRR_MAC_MSG_STATUS_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
} yPDef_GRR_MAC_TLLI_UPDATE_REQ;
typedef yPDef_GRR_MAC_TLLI_UPDATE_REQ  *yPDP_GRR_MAC_TLLI_UPDATE_REQ;
typedef struct {
    SIGNAL_VARS
    RACH_ACCESS_T  Param1;
    TLLI_T  Param2;
    CHANNEL_CODING_REQUESTED_T  Param3;
    CHANNEL_REQUEST_DESCRIPTION_T  Param4;
    GPRS_MEAS_RESULT_T  Param5;
    EGPRS_RACH_AB_T  Param6;
    SDL_Boolean  Param7;
} yPDef_MAC_GRR_RACH_IND;
typedef yPDef_MAC_GRR_RACH_IND  *yPDP_MAC_GRR_RACH_IND;
typedef struct {
    SIGNAL_VARS
    PACCH_DATA_T  Param1;
} yPDef_MAC_GRR_DATA_IND;
typedef yPDef_MAC_GRR_DATA_IND  *yPDP_MAC_GRR_DATA_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_MAC_GRR_PDCH_ASSIGN_CNF;
typedef yPDef_MAC_GRR_PDCH_ASSIGN_CNF  *yPDP_MAC_GRR_PDCH_ASSIGN_CNF;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_MAC_GRR_PRACH_CNF;
typedef yPDef_MAC_GRR_PRACH_CNF  *yPDP_MAC_GRR_PRACH_CNF;
typedef struct {
    SIGNAL_VARS
    PAGING_MODE_E  Param1;
    ABSOLUTE_FRAME_NUMBER_T  Param2;
} yPDef_MAC_GRR_PAGE_MODE_IND;
typedef yPDef_MAC_GRR_PAGE_MODE_IND  *yPDP_MAC_GRR_PAGE_MODE_IND;
typedef struct {
    SIGNAL_VARS
    SUSPEND_CAUSE_E  Param1;
} yPDef_GRR_RLC_SUSPEND_REQ;
typedef yPDef_GRR_RLC_SUSPEND_REQ  *yPDP_GRR_RLC_SUSPEND_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_GRR_RLC_RESUME_REQ;
typedef yPDef_GRR_RLC_RESUME_REQ  *yPDP_GRR_RLC_RESUME_REQ;
typedef struct {
    SIGNAL_VARS
    REL_CAUSE_E  Param1;
} yPDef_GRR_RLC_REL_REQ;
typedef yPDef_GRR_RLC_REL_REQ  *yPDP_GRR_RLC_REL_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    PRIO_ACCESS_THR_T  Param2;
    BS_CV_MAX_T  Param3;
    SDL_Boolean  Param4;
    PAN_DEC_T  Param5;
    PAN_INC_T  Param6;
    PAN_MAX_T  Param7;
    SDL_Boolean  Param8;
    SDL_Boolean  Param9;
} yPDef_GRR_RLC_PARAM_REQ;
typedef yPDef_GRR_RLC_PARAM_REQ  *yPDP_GRR_RLC_PARAM_REQ;
typedef struct {
    SIGNAL_VARS
    GRR_RLC_MSG_TYPE_T  Param1;
    MAC_MSG_BLOCK_ARR_T  Param2;
} yPDef_GRR_RLC_DATA_REQ;
typedef yPDef_GRR_RLC_DATA_REQ  *yPDP_GRR_RLC_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    CGI_T  Param1;
} yPDef_GRR_RLC_ACT_REQ;
typedef yPDef_GRR_RLC_ACT_REQ  *yPDP_GRR_RLC_ACT_REQ;
typedef struct {
    SIGNAL_VARS
    MAC_MSG_BLOCK_ARR_T  Param1;
} yPDef_GRR_RLC_NC_CELL_CHANGE_FAIL_RSP;
typedef yPDef_GRR_RLC_NC_CELL_CHANGE_FAIL_RSP  *yPDP_GRR_RLC_NC_CELL_CHANGE_FAIL_RSP;
typedef struct {
    SIGNAL_VARS
    TBF_REL_TYPE_E  Param1;
} yPDef_RLC_GRR_TBF_REL_IND;
typedef yPDef_RLC_GRR_TBF_REL_IND  *yPDP_RLC_GRR_TBF_REL_IND;
typedef struct {
    SIGNAL_VARS
    RLC_GRR_ACC_ERROR_E  Param1;
} yPDef_RLC_GRR_ACC_ERROR_IND;
typedef yPDef_RLC_GRR_ACC_ERROR_IND  *yPDP_RLC_GRR_ACC_ERROR_IND;
typedef struct {
    SIGNAL_VARS
    RLC_GRR_ACC_ERROR_E  Param1;
} yPDef_RLC_GRR_NC_CELL_CHANGE_FAIL_IND;
typedef yPDef_RLC_GRR_NC_CELL_CHANGE_FAIL_IND  *yPDP_RLC_GRR_NC_CELL_CHANGE_FAIL_IND;
typedef struct {
    SIGNAL_VARS
    IMEI_T  Param1;
    IMEISV_T  Param2;
    BLOCK_PTR_T  Param3;
} yPDef_RRA_GRR_MAC_CLASSMARK_REQ;
typedef yPDef_RRA_GRR_MAC_CLASSMARK_REQ  *yPDP_RRA_GRR_MAC_CLASSMARK_REQ;
typedef struct {
    SIGNAL_VARS
    MS_BAND_E  Param1;
    IS_PCCCH_T  Param2;
    PRACH_CTRL_PARAMETERS_T  Param3;
    ACC_CONTROL_CLASS_T  Param4;
    CONTROL_ACK_E  Param5;
    AB_FORMAT_E  Param6;
    T3168_VALUE_T  Param7;
    T3192_VALUE_T  Param8;
    BS_CV_MAX_T  Param9;
    NECI_VALUE_T  Param10;
    GLOBAL_PWRC_PARAM_T  Param11;
    MS_BAND_E  Param12;
    MS_BAND_E  Param13;
    IS_SGSN_R99_T  Param14;
    IS_CELL_SUPPORT_EGPRS_T  Param15;
    IS_CELL_SUPPORT_ERACH_T  Param16;
    SDL_Boolean  Param17;
    SDL_Boolean  Param18;
    SDL_Boolean  Param19;
} yPDef_RRA_GRR_MAC_PARAM_REQ;
typedef yPDef_RRA_GRR_MAC_PARAM_REQ  *yPDP_RRA_GRR_MAC_PARAM_REQ;
typedef struct {
    SIGNAL_VARS
    FREQ_UPDATE_T  Param1;
} yPDef_RRA_GRR_MAC_FREQ_REQ;
typedef yPDef_RRA_GRR_MAC_FREQ_REQ  *yPDP_RRA_GRR_MAC_FREQ_REQ;
typedef struct {
    SIGNAL_VARS
    ABSOLUTE_FRAME_NUMBER_T  Param1;
    PACKET_CHANNEL_DESC_IE_T  Param2;
    ARFCN_LIST_T  Param3;
    TA_T  Param4;
    PACKET_CONSTRUCT_T  Param5;
} yPDef_RRA_GRR_MAC_RACH_RSP;
typedef yPDef_RRA_GRR_MAC_RACH_RSP  *yPDP_RRA_GRR_MAC_RACH_RSP;
typedef struct {
    SIGNAL_VARS
    RACH_REJ_CAUSE_T  Param1;
    RACH_REJ_TIME_T  Param2;
} yPDef_RRA_GRR_MAC_RACH_REJ_RSP;
typedef yPDef_RRA_GRR_MAC_RACH_REJ_RSP  *yPDP_RRA_GRR_MAC_RACH_REJ_RSP;
typedef struct {
    SIGNAL_VARS
    MAC_MSG_BLOCK_ARR_T  Param1;
    SDL_Octet  Param2;
    ABSOLUTE_FRAME_NUMBER_T  Param3;
} yPDef_RRA_GRR_MAC_DOWNLINK_PDCH_REQ;
typedef yPDef_RRA_GRR_MAC_DOWNLINK_PDCH_REQ  *yPDP_RRA_GRR_MAC_DOWNLINK_PDCH_REQ;
typedef struct {
    SIGNAL_VARS
    ABSOLUTE_FRAME_NUMBER_T  Param1;
    PACKET_CHANNEL_DESC_IE_T  Param2;
    ARFCN_LIST_T  Param3;
    TA_T  Param4;
    PACKET_CONSTRUCT_T  Param5;
} yPDef_RRA_GRR_MAC_IMMED_ASSIGN_REQ;
typedef yPDef_RRA_GRR_MAC_IMMED_ASSIGN_REQ  *yPDP_RRA_GRR_MAC_IMMED_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    CHANNEL_DESCRIPTION_T  Param1;
    ARFCN_LIST_T  Param2;
    STARTING_TIME_T  Param3;
    SDL_Boolean  Param4;
    CHANNEL_DESCRIPTION_T  Param5;
    ARFCN_LIST_T  Param6;
    PACKET_CONSTRUCT_T  Param7;
    PACKET_CONSTRUCT_T  Param8;
    ABSOLUTE_FRAME_NUMBER_T  Param9;
} yPDef_RRA_GRR_MAC_PDCH_ASSIGN_REQ;
typedef yPDef_RRA_GRR_MAC_PDCH_ASSIGN_REQ  *yPDP_RRA_GRR_MAC_PDCH_ASSIGN_REQ;
typedef struct {
    SIGNAL_VARS
    MAC_GRR_MSG_TYPE_T  Param1;
    z_ctypes_8_UnsignedShortInt  Param2;
} yPDef_RRA_GRR_MAC_MSG_STATUS_REQ;
typedef yPDef_RRA_GRR_MAC_MSG_STATUS_REQ  *yPDP_RRA_GRR_MAC_MSG_STATUS_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
} yPDef_RRA_GRR_MAC_TLLI_UPDATE_REQ;
typedef yPDef_RRA_GRR_MAC_TLLI_UPDATE_REQ  *yPDP_RRA_GRR_MAC_TLLI_UPDATE_REQ;
typedef struct {
    SIGNAL_VARS
    RACH_ACCESS_T  Param1;
    TLLI_T  Param2;
    CHANNEL_CODING_REQUESTED_T  Param3;
    CHANNEL_REQUEST_DESCRIPTION_T  Param4;
    GPRS_MEAS_RESULT_T  Param5;
    EGPRS_RACH_AB_T  Param6;
    SDL_Boolean  Param7;
} yPDef_RRA_MAC_GRR_RACH_IND;
typedef yPDef_RRA_MAC_GRR_RACH_IND  *yPDP_RRA_MAC_GRR_RACH_IND;
typedef struct {
    SIGNAL_VARS
    PACCH_DATA_T  Param1;
} yPDef_RRA_MAC_GRR_DATA_IND;
typedef yPDef_RRA_MAC_GRR_DATA_IND  *yPDP_RRA_MAC_GRR_DATA_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_RRA_MAC_GRR_PDCH_ASSIGN_CNF;
typedef yPDef_RRA_MAC_GRR_PDCH_ASSIGN_CNF  *yPDP_RRA_MAC_GRR_PDCH_ASSIGN_CNF;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_RRA_MAC_GRR_PRACH_CNF;
typedef yPDef_RRA_MAC_GRR_PRACH_CNF  *yPDP_RRA_MAC_GRR_PRACH_CNF;
typedef struct {
    SIGNAL_VARS
    PAGING_MODE_E  Param1;
    ABSOLUTE_FRAME_NUMBER_T  Param2;
} yPDef_RRA_MAC_GRR_PAGE_MODE_IND;
typedef yPDef_RRA_MAC_GRR_PAGE_MODE_IND  *yPDP_RRA_MAC_GRR_PAGE_MODE_IND;
typedef struct {
    SIGNAL_VARS
    RX_EX_T  Param1;
} yPDef_MN_RR_RX_EX_REQ;
typedef yPDef_MN_RR_RX_EX_REQ  *yPDP_MN_RR_RX_EX_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
    SDL_PId  Param2;
    SDL_PId  Param3;
} yPDef_MN_RR_INIT_REQ;
typedef yPDef_MN_RR_INIT_REQ  *yPDP_MN_RR_INIT_REQ;
typedef struct {
    SIGNAL_VARS
    NCELL_NUM_T  Param1;
    NCELL_MEAS_REPORT_T  Param2;
} yPDef_RR_MN_NCELL_RSSI_CNF;
typedef yPDef_RR_MN_NCELL_RSSI_CNF  *yPDP_RR_MN_NCELL_RSSI_CNF;
typedef struct {
    SIGNAL_VARS
    CELL_MEAS_T  Param1;
    SDL_Boolean  Param2;
    SDL_Octet  Param3;
} yPDef_RR_MN_SCELL_RSSI_IND;
typedef yPDef_RR_MN_SCELL_RSSI_IND  *yPDP_RR_MN_SCELL_RSSI_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    N201_I_T  Param3;
    N201_U_T  Param4;
} yPDef_LL_SNDC_RESET_IND;
typedef yPDef_LL_SNDC_RESET_IND  *yPDP_LL_SNDC_RESET_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    BLOCK_PTR_T  Param2;
    XID_BLOCK_SIZE_T  Param3;
    SAPI_NUM_T  Param4;
    NSAPI_NUM_T  Param5;
    QOS_PARAM_T  Param6;
    RADIO_PRIORITY_T  Param7;
} yPDef_SNDC_LL_ESTABLISH_REQ;
typedef yPDef_SNDC_LL_ESTABLISH_REQ  *yPDP_SNDC_LL_ESTABLISH_REQ;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    LLC_PRO_TYPE_E  Param2;
} yPDef_SNDC_LL_PROCEDURE_ABORT;
typedef yPDef_SNDC_LL_PROCEDURE_ABORT  *yPDP_SNDC_LL_PROCEDURE_ABORT;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    BLOCK_PTR_T  Param2;
    XID_BLOCK_SIZE_T  Param3;
    SAPI_NUM_T  Param4;
    N201_I_T  Param5;
    N201_U_T  Param6;
} yPDef_LL_SNDC_ESTABLISH_IND;
typedef yPDef_LL_SNDC_ESTABLISH_IND  *yPDP_LL_SNDC_ESTABLISH_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    BLOCK_PTR_T  Param2;
    XID_BLOCK_SIZE_T  Param3;
    SAPI_NUM_T  Param4;
    QOS_PARAM_T  Param5;
    RADIO_PRIORITY_T  Param6;
} yPDef_SNDC_LL_ESTABLISH_RES;
typedef yPDef_SNDC_LL_ESTABLISH_RES  *yPDP_SNDC_LL_ESTABLISH_RES;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    BLOCK_PTR_T  Param2;
    XID_BLOCK_SIZE_T  Param3;
    SAPI_NUM_T  Param4;
    NSAPI_NUM_T  Param5;
    N201_I_T  Param6;
    N201_U_T  Param7;
} yPDef_LL_SNDC_ESTABLISH_CNF;
typedef yPDef_LL_SNDC_ESTABLISH_CNF  *yPDP_LL_SNDC_ESTABLISH_CNF;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    SDL_Boolean  Param3;
} yPDef_SNDC_LL_RELEASE_REQ;
typedef yPDef_SNDC_LL_RELEASE_REQ  *yPDP_SNDC_LL_RELEASE_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    SNDCP_CAUSE_T  Param3;
} yPDef_LL_SNDC_RELEASE_IND;
typedef yPDef_LL_SNDC_RELEASE_IND  *yPDP_LL_SNDC_RELEASE_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
} yPDef_LL_SNDC_RELEASE_CNF;
typedef yPDef_LL_SNDC_RELEASE_CNF  *yPDP_LL_SNDC_RELEASE_CNF;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    SAPI_NUM_T  Param3;
    BLOCK_PTR_T  Param4;
    XID_BLOCK_SIZE_T  Param5;
    QOS_PARAM_T  Param6;
    RADIO_PRIORITY_T  Param7;
} yPDef_SNDC_LL_XID_REQ;
typedef yPDef_SNDC_LL_XID_REQ  *yPDP_SNDC_LL_XID_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    BLOCK_PTR_T  Param3;
    XID_BLOCK_SIZE_T  Param4;
    N201_I_T  Param5;
    N201_U_T  Param6;
} yPDef_LL_SNDC_XID_IND;
typedef yPDef_LL_SNDC_XID_IND  *yPDP_LL_SNDC_XID_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    BLOCK_PTR_T  Param3;
    XID_BLOCK_SIZE_T  Param4;
    QOS_PARAM_T  Param5;
    RADIO_PRIORITY_T  Param6;
} yPDef_SNDC_LL_XID_RES;
typedef yPDef_SNDC_LL_XID_RES  *yPDP_SNDC_LL_XID_RES;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    SAPI_NUM_T  Param3;
    BLOCK_PTR_T  Param4;
    XID_BLOCK_SIZE_T  Param5;
    N201_I_T  Param6;
    N201_U_T  Param7;
} yPDef_LL_SNDC_XID_CNF;
typedef yPDef_LL_SNDC_XID_CNF  *yPDP_LL_SNDC_XID_CNF;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    SAPI_NUM_T  Param2;
    SNPDU_INFO_T  Param3;
    SDL_Boolean  Param4;
    z_ctypes_A_UnsignedLongInt  Param5;
} yPDef_SNDC_LL_DATA_REQ;
typedef yPDef_SNDC_LL_DATA_REQ  *yPDP_SNDC_LL_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    PDU_PTR_T  Param3;
    PDU_SIZE_T  Param4;
} yPDef_LL_SNDC_DATA_IND;
typedef yPDef_LL_SNDC_DATA_IND  *yPDP_LL_SNDC_DATA_IND;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    z_ctypes_A_UnsignedLongInt  Param2;
} yPDef_LL_SNDC_DATA_CNF;
typedef yPDef_LL_SNDC_DATA_CNF  *yPDP_LL_SNDC_DATA_CNF;
typedef struct {
    SIGNAL_VARS
    SAPI_NUM_T  Param1;
    SNPDU_INFO_T  Param2;
} yPDef_SNDC_LL_UNITDATA_REQ;
typedef yPDef_SNDC_LL_UNITDATA_REQ  *yPDP_SNDC_LL_UNITDATA_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    PDU_PTR_T  Param3;
    PDU_SIZE_T  Param4;
} yPDef_LL_SNDC_UNITDATA_IND;
typedef yPDef_LL_SNDC_UNITDATA_IND  *yPDP_LL_SNDC_UNITDATA_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    SNDCP_CAUSE_T  Param3;
} yPDef_LL_SNDC_STATUS_IND;
typedef yPDef_LL_SNDC_STATUS_IND  *yPDP_LL_SNDC_STATUS_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    SAPI_NUM_T  Param3;
} yPDef_SNDC_LL_SUSPENDRECEIVEDATA;
typedef yPDef_SNDC_LL_SUSPENDRECEIVEDATA  *yPDP_SNDC_LL_SUSPENDRECEIVEDATA;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    SAPI_NUM_T  Param3;
} yPDef_SNDC_LL_RESUMERECEIVEDATA;
typedef yPDef_SNDC_LL_RESUMERECEIVEDATA  *yPDP_SNDC_LL_RESUMERECEIVEDATA;
typedef struct {
    SIGNAL_VARS
    FLOW_CTRL_MODE_E  Param1;
    NSAPI_NUM_T  Param2;
    SAPI_NUM_T  Param3;
} yPDef_LL_SNDC_SUSPENDSENDDATA;
typedef yPDef_LL_SNDC_SUSPENDSENDDATA  *yPDP_LL_SNDC_SUSPENDSENDDATA;
typedef struct {
    SIGNAL_VARS
    FLOW_CTRL_MODE_E  Param1;
    NSAPI_NUM_T  Param2;
    SAPI_NUM_T  Param3;
} yPDef_LL_SNDC_RESUMESENDDATA;
typedef yPDef_LL_SNDC_RESUMESENDDATA  *yPDP_LL_SNDC_RESUMESENDDATA;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    SAPI_NUM_T  Param3;
} yPDef_LL_SNDC_DEACTIVED_IND;
typedef yPDef_LL_SNDC_DEACTIVED_IND  *yPDP_LL_SNDC_DEACTIVED_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    SAPI_NUM_T  Param3;
} yPDef_LL_SNDC_ACTIVED_IND;
typedef yPDef_LL_SNDC_ACTIVED_IND  *yPDP_LL_SNDC_ACTIVED_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    QOS_PARAM_T  Param3;
    SAPI_NUM_T  Param4;
    RADIO_PRIORITY_T  Param5;
} yPDef_SNSM_ACTIVATE_IND;
typedef yPDef_SNSM_ACTIVATE_IND  *yPDP_SNSM_ACTIVATE_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
} yPDef_SNSM_ACTIVATE_RES;
typedef yPDef_SNSM_ACTIVATE_RES  *yPDP_SNSM_ACTIVATE_RES;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    SDL_Boolean  Param3;
} yPDef_SNSM_DEACTIVATE_IND;
typedef yPDef_SNSM_DEACTIVATE_IND  *yPDP_SNSM_DEACTIVATE_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
} yPDef_SNSM_DEACTIVATE_RES;
typedef yPDef_SNSM_DEACTIVATE_RES  *yPDP_SNSM_DEACTIVATE_RES;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    QOS_PARAM_T  Param3;
    SAPI_NUM_T  Param4;
    RADIO_PRIORITY_T  Param5;
} yPDef_SNSM_MODIFY_IND;
typedef yPDef_SNSM_MODIFY_IND  *yPDP_SNSM_MODIFY_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
} yPDef_SNSM_MODIFY_RES;
typedef yPDef_SNSM_MODIFY_RES  *yPDP_SNSM_MODIFY_RES;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    SAPI_NUM_T  Param3;
    SNDCP_CAUSE_T  Param4;
} yPDef_SNSM_STATUS_REQ;
typedef yPDef_SNSM_STATUS_REQ  *yPDP_SNSM_STATUS_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    RECEIVE_N_PDU_NUMBER_T  Param3;
} yPDef_SNSM_SEQUENCE_IND;
typedef yPDef_SNSM_SEQUENCE_IND  *yPDP_SNSM_SEQUENCE_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    NSAPI_NUM_T  Param2;
    RECEIVE_N_PDU_NUMBER_T  Param3;
} yPDef_SNSM_SEQUENCE_RES;
typedef yPDef_SNSM_SEQUENCE_RES  *yPDP_SNSM_SEQUENCE_RES;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
} yPDef_SNSM_TLLI_IND;
typedef yPDef_SNSM_TLLI_IND  *yPDP_SNSM_TLLI_IND;
typedef struct {
    SIGNAL_VARS
    LLC_TRANS_Q_NODE_T  Param1;
} yPDef_LLC_RLC_DATA_REQ;
typedef yPDef_LLC_RLC_DATA_REQ  *yPDP_LLC_RLC_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    LLC_TRANS_Q_NODE_T  Param1;
} yPDef_LLC_RLC_UNITDATA_REQ;
typedef yPDef_LLC_RLC_UNITDATA_REQ  *yPDP_LLC_RLC_UNITDATA_REQ;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    FRAME_PTR_T  Param2;
    FRAME_SIZE_T  Param3;
} yPDef_RLC_LLC_DATA_IND;
typedef yPDef_RLC_LLC_DATA_IND  *yPDP_RLC_LLC_DATA_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    FRAME_PTR_T  Param2;
    FRAME_SIZE_T  Param3;
} yPDef_RLC_LLC_UNITDATA_IND;
typedef yPDef_RLC_LLC_UNITDATA_IND  *yPDP_RLC_LLC_UNITDATA_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    FRAME_PTR_T  Param2;
    FRAME_SIZE_T  Param3;
} yPDef_RLC_LLC_DUMMYUI_IND;
typedef yPDef_RLC_LLC_DUMMYUI_IND  *yPDP_RLC_LLC_DUMMYUI_IND;
typedef struct {
    SIGNAL_VARS
    RLC_TBF_STATUS_T  Param1;
} yPDef_RLC_LLC_STATUS_IND;
typedef yPDef_RLC_LLC_STATUS_IND  *yPDP_RLC_LLC_STATUS_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    TLLI_T  Param2;
} yPDef_LLC_RLC_TLLI_ASSIGN;
typedef yPDef_LLC_RLC_TLLI_ASSIGN  *yPDP_LLC_RLC_TLLI_ASSIGN;
typedef struct {
    SIGNAL_VARS
    FRAME_PTR_T  Param1;
    FRAME_SIZE_T  Param2;
} yPDef_RLC_LLC_PDU_SEND_CNF;
typedef yPDef_RLC_LLC_PDU_SEND_CNF  *yPDP_RLC_LLC_PDU_SEND_CNF;
typedef struct {
    SIGNAL_VARS
    CHAN_DESCR_T  Param1;
    RACH_ACCESS_T  Param2;
} yPDef_RLC_MAC_TBF_REQ;
typedef yPDef_RLC_MAC_TBF_REQ  *yPDP_RLC_MAC_TBF_REQ;
typedef struct {
    SIGNAL_VARS
    CHAN_DESCR_T  Param1;
} yPDef_RLC_MAC_REALLOCATION_REQ;
typedef yPDef_RLC_MAC_REALLOCATION_REQ  *yPDP_RLC_MAC_REALLOCATION_REQ;
typedef struct {
    SIGNAL_VARS
    TBF_DIRECTION_T  Param1;
    TBF_REL_CAUSE_T  Param2;
} yPDef_RLC_MAC_REL_REQ;
typedef yPDef_RLC_MAC_REL_REQ  *yPDP_RLC_MAC_REL_REQ;
typedef struct {
    SIGNAL_VARS
    CHAN_DESCR_T  Param1;
    RACH_ACCESS_T  Param2;
    IS_CELL_CHANGE_FAIL_T  Param3;
} yPDef_z0FL_RLC_MAC_CELL_RESELECT_REQ;
typedef yPDef_z0FL_RLC_MAC_CELL_RESELECT_REQ  *yPDP_z0FL_RLC_MAC_CELL_RESELECT_REQ;
typedef struct {
    SIGNAL_VARS
    SCT_GPRS_STATUS_T  Param1;
    SCT_GPRS_MODE_T  Param2;
} yPDef_RLC_MAC_SCT_TEST_REQ;
typedef yPDef_RLC_MAC_SCT_TEST_REQ  *yPDP_RLC_MAC_SCT_TEST_REQ;
typedef struct {
    SIGNAL_VARS
    SCT_EGPRS_MODE_T  Param1;
} yPDef_RLC_MAC_EGPRS_SCT_PARAM;
typedef yPDef_RLC_MAC_EGPRS_SCT_PARAM  *yPDP_RLC_MAC_EGPRS_SCT_PARAM;
typedef struct {
    SIGNAL_VARS
    ACCESS_STATUS_T  Param1;
    CODING_SCHEME_T  Param2;
    SDL_Boolean  Param3;
    TFI_T  Param4;
    SDL_Boolean  Param5;
    MAC_ALLOC_INFO_T  Param6;
    RACH_REJ_VAL_T  Param7;
    RLC_WS_T  Param8;
    SDL_Boolean  Param9;
    TBF_MODE_T  Param10;
} yPDef_MAC_RLC_TBF_CNF;
typedef yPDef_MAC_RLC_TBF_CNF  *yPDP_MAC_RLC_TBF_CNF;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    RLC_MODE_T  Param2;
    RLC_WS_T  Param3;
    TBF_MODE_T  Param4;
} yPDef_MAC_RLC_TBF_IND;
typedef yPDef_MAC_RLC_TBF_IND  *yPDP_MAC_RLC_TBF_IND;
typedef struct {
    SIGNAL_VARS
    RLC_WS_T  Param1;
} yPDef_MAC_RLC_CHANGE_DL_WS;
typedef yPDef_MAC_RLC_CHANGE_DL_WS  *yPDP_MAC_RLC_CHANGE_DL_WS;
typedef struct {
    SIGNAL_VARS
    TIMESLOT_T  Param1;
} yPDef_MAC_RLC_PDCH_REL_IND;
typedef yPDef_MAC_RLC_PDCH_REL_IND  *yPDP_MAC_RLC_PDCH_REL_IND;
typedef struct {
    SIGNAL_VARS
    ACCESS_STATUS_T  Param1;
} yPDef_MAC_RLC_TBF_ERROR_IND;
typedef yPDef_MAC_RLC_TBF_ERROR_IND  *yPDP_MAC_RLC_TBF_ERROR_IND;
typedef struct {
    SIGNAL_VARS
    BLOCK_STRUCT_PTR_ARR_T  Param1;
} yPDef_MAC_RLC_DATA_IND;
typedef yPDef_MAC_RLC_DATA_IND  *yPDP_MAC_RLC_DATA_IND;
typedef struct {
    SIGNAL_VARS
    CODING_SCHEME_T  Param1;
    TFI_T  Param2;
    MAC_ALLOC_INFO_T  Param3;
    RLC_WS_T  Param4;
} yPDef_MAC_RLC_TBF_ASSIGNMENT_IND;
typedef yPDef_MAC_RLC_TBF_ASSIGNMENT_IND  *yPDP_MAC_RLC_TBF_ASSIGNMENT_IND;
typedef struct {
    SIGNAL_VARS
    TBF_DIRECTION_T  Param1;
    TBF_REL_CAUSE_T  Param2;
    RACH_REJ_VAL_T  Param3;
} yPDef_MAC_RLC_REL_IND;
typedef yPDef_MAC_RLC_REL_IND  *yPDP_MAC_RLC_REL_IND;
typedef struct {
    SIGNAL_VARS
    ACK_NACK_DESCR_T  Param1;
    CODING_SCHEME_T  Param2;
    IS_TBF_EST_T  Param3;
    TIMESLOT_T  Param4;
    ABSOLUTE_FRAME_NUMBER_T  Param5;
    E_ACK_NACK_DESCR_T  Param6;
    IS_UL_RESEGMENT_T  Param7;
    IS_UL_PREEMPTIVE_T  Param8;
} yPDef_MAC_RLC_UPLACK_IND;
typedef yPDef_MAC_RLC_UPLACK_IND  *yPDP_MAC_RLC_UPLACK_IND;
typedef struct {
    SIGNAL_VARS
    CONTENTION_STATUS_T  Param1;
} yPDef_MAC_RLC_CONT_RESO_IND;
typedef yPDef_MAC_RLC_CONT_RESO_IND  *yPDP_MAC_RLC_CONT_RESO_IND;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    TLLI_T  Param2;
} yPDef_RLC_MAC_TLLI_ASSIGN;
typedef yPDef_RLC_MAC_TLLI_ASSIGN  *yPDP_RLC_MAC_TLLI_ASSIGN;
typedef struct {
    SIGNAL_VARS
    ABSOLUTE_FRAME_NUMBER_T  Param1;
    z_ctypes_7_LongInt  Param2;
    z_ctypes_7_LongInt  Param3;
    BLOCK_STRUCT_T  Param4;
} yPDef_RLC_MAC_DATA_REQ;
typedef yPDef_RLC_MAC_DATA_REQ  *yPDP_RLC_MAC_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    P_TMSI_T  Param1;
    P_TMSI_SIGNATURE_T  Param2;
    RAI_T  Param3;
    GMM_STATE_UPDATED  Param4;
} yPDef_GMM_SIM_SAVE_RAI_INFO;
typedef yPDef_GMM_SIM_SAVE_RAI_INFO  *yPDP_GMM_SIM_SAVE_RAI_INFO;
typedef struct {
    SIGNAL_VARS
    AUTH_PARA_RAND_ARR_T  Param1;
    GMM_CKSN_E  Param2;
} yPDef_GMM_SIM_AUTH_REQ;
typedef yPDef_GMM_SIM_AUTH_REQ  *yPDP_GMM_SIM_AUTH_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Octet  Param1;
    GPRS_KC_ARR_T  Param2;
    SRES_T  Param3;
} yPDef_GMM_SIM_AUTH_CNF;
typedef yPDef_GMM_SIM_AUTH_CNF  *yPDP_GMM_SIM_AUTH_CNF;
typedef struct {
    SIGNAL_VARS
    GPRS_KC_ARR_T  Param1;
    GMM_CKSN_E  Param2;
} yPDef_GMM_SIM_SAVE_CIPHER_INFO;
typedef yPDef_GMM_SIM_SAVE_CIPHER_INFO  *yPDP_GMM_SIM_SAVE_CIPHER_INFO;
typedef struct {
    SIGNAL_VARS
    SDL_Octet  Param1;
    CKSN_T  Param2;
    KC_T  Param3;
    GMM_CKSN_E  Param4;
    GPRS_KC_ARR_T  Param5;
    RAI_T  Param6;
    P_TMSI_T  Param7;
    P_TMSI_SIGNATURE_T  Param8;
    GMM_STATE_UPDATED  Param9;
} yPDef_MM_SIM_DATA_CNF;
typedef yPDef_MM_SIM_DATA_CNF  *yPDP_MM_SIM_DATA_CNF;
typedef struct {
    SIGNAL_VARS
    RAND_T  Param1;
    CKSN_T  Param2;
} yPDef_MM_SIM_AUTH_REQ;
typedef yPDef_MM_SIM_AUTH_REQ  *yPDP_MM_SIM_AUTH_REQ;
typedef struct {
    SIGNAL_VARS
    SDL_Octet  Param1;
    KC_T  Param2;
    SRES_T  Param3;
} yPDef_MM_SIM_AUTH_CNF;
typedef yPDef_MM_SIM_AUTH_CNF  *yPDP_MM_SIM_AUTH_CNF;
typedef struct {
    SIGNAL_VARS
    FPLMN_LIST_T  Param1;
} yPDef_MM_SIM_FPLMN_UPD_REQ;
typedef yPDef_MM_SIM_FPLMN_UPD_REQ  *yPDP_MM_SIM_FPLMN_UPD_REQ;
typedef struct {
    SIGNAL_VARS
    KC_T  Param1;
    CKSN_T  Param2;
} yPDef_MM_SIM_CIPHER_UPD_REQ;
typedef yPDef_MM_SIM_CIPHER_UPD_REQ  *yPDP_MM_SIM_CIPHER_UPD_REQ;
typedef struct {
    SIGNAL_VARS
    MM_UPDATE_STATUS_E  Param1;
    LAI_T  Param2;
    TMSI_T  Param3;
    T3212_VALUE  Param4;
} yPDef_MM_SIM_STATUS_UPD_REQ;
typedef yPDef_MM_SIM_STATUS_UPD_REQ  *yPDP_MM_SIM_STATUS_UPD_REQ;
typedef struct {
    SIGNAL_VARS
    BA_LIST_ARR_T  Param1;
} yPDef_MM_SIM_BALIST_UPD_REQ;
typedef yPDef_MM_SIM_BALIST_UPD_REQ  *yPDP_MM_SIM_BALIST_UPD_REQ;
typedef struct {
    SIGNAL_VARS
    NPDU_PTR_T  Param1;
    NPDU_SIZE_T  Param2;
    NSAPI_NUM_T  Param3;
} yPDef_SN_DATA_REQ;
typedef yPDef_SN_DATA_REQ  *yPDP_SN_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    NPDU_PTR_T  Param1;
    NPDU_SIZE_T  Param2;
    NSAPI_NUM_T  Param3;
} yPDef_SN_DATA_IND;
typedef yPDef_SN_DATA_IND  *yPDP_SN_DATA_IND;
typedef struct {
    SIGNAL_VARS
    NPDU_PTR_T  Param1;
    NPDU_SIZE_T  Param2;
    NSAPI_NUM_T  Param3;
} yPDef_SN_UNITDATA_REQ;
typedef yPDef_SN_UNITDATA_REQ  *yPDP_SN_UNITDATA_REQ;
typedef struct {
    SIGNAL_VARS
    NPDU_PTR_T  Param1;
    NPDU_SIZE_T  Param2;
    NSAPI_NUM_T  Param3;
} yPDef_SN_UNITDATA_IND;
typedef yPDef_SN_UNITDATA_IND  *yPDP_SN_UNITDATA_IND;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    COMPRESS_INFO_T  Param2;
} yPDef_SN_XID_REQ;
typedef yPDef_SN_XID_REQ  *yPDP_SN_XID_REQ;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    XID_BLOCK_PTR_T  Param2;
    XID_BLOCK_SIZE_T  Param3;
} yPDef_SN_XID_IND;
typedef yPDef_SN_XID_IND  *yPDP_SN_XID_IND;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    XID_BLOCK_PTR_T  Param2;
    XID_BLOCK_SIZE_T  Param3;
} yPDef_SN_XID_RES;
typedef yPDef_SN_XID_RES  *yPDP_SN_XID_RES;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
    XID_BLOCK_PTR_T  Param2;
    XID_BLOCK_SIZE_T  Param3;
} yPDef_SN_XID_CNF;
typedef yPDef_SN_XID_CNF  *yPDP_SN_XID_CNF;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
} yPDef_SN_SUSPENDSENDDATA;
typedef yPDef_SN_SUSPENDSENDDATA  *yPDP_SN_SUSPENDSENDDATA;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
} yPDef_SN_RESUMESENDDATA;
typedef yPDef_SN_RESUMESENDDATA  *yPDP_SN_RESUMESENDDATA;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
} yPDef_SN_SUSPENDRECEIVEDATA;
typedef yPDef_SN_SUSPENDRECEIVEDATA  *yPDP_SN_SUSPENDRECEIVEDATA;
typedef struct {
    SIGNAL_VARS
    NSAPI_NUM_T  Param1;
} yPDef_SN_RESUMERECEIVEDATA;
typedef yPDef_SN_RESUMERECEIVEDATA  *yPDP_SN_RESUMERECEIVEDATA;
typedef struct {
    SIGNAL_VARS
    TLLI_T  Param1;
    SAPI_NUM_T  Param2;
    PDU_PTR_T  Param3;
    PDU_SIZE_T  Param4;
    QOS_PARAM_T  Param5;
    CIPHER_T  Param6;
} yPDef_SMS_LL_UNITDATA_REQ;
typedef yPDef_SMS_LL_UNITDATA_REQ  *yPDP_SMS_LL_UNITDATA_REQ;
typedef struct {
    SIGNAL_VARS
    PDU_PTR_T  Param1;
    PDU_SIZE_T  Param2;
} yPDef_LL_SMS_UNITDATA_IND;
typedef yPDef_LL_SMS_UNITDATA_IND  *yPDP_LL_SMS_UNITDATA_IND;
typedef struct {
    SIGNAL_VARS
    L3_MSG_UNIT_T  Param1;
} yPDef_MM_SCT_CMD;
typedef yPDef_MM_SCT_CMD  *yPDP_MM_SCT_CMD;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
    SDL_PId  Param2;
    SDL_PId  Param3;
} yPDef_MM_SCT_INIT_REQ;
typedef yPDef_MM_SCT_INIT_REQ  *yPDP_MM_SCT_INIT_REQ;
typedef struct {
    SIGNAL_VARS
    L3_MSG_UNIT_T  Param1;
} yPDef_SCT_MM_ACK;
typedef yPDef_SCT_MM_ACK  *yPDP_SCT_MM_ACK;
typedef struct {
    SIGNAL_VARS
    SCT_GPRS_TEST_CMD_ARR_T  Param1;
} yPDef_GMM_SCT_CMD;
typedef yPDef_GMM_SCT_CMD  *yPDP_GMM_SCT_CMD;
typedef struct {
    SIGNAL_VARS
    SDL_PId  Param1;
    SDL_PId  Param2;
    SDL_PId  Param3;
} yPDef_GMM_SCT_INIT_REQ;
typedef yPDef_GMM_SCT_INIT_REQ  *yPDP_GMM_SCT_INIT_REQ;
typedef struct {
    SIGNAL_VARS
    GPRS_TEST_MODE_CMD_T  Param1;
} yPDef_SCT_RLC_CMD;
typedef yPDef_SCT_RLC_CMD  *yPDP_SCT_RLC_CMD;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
    LOOP_LIST_E  Param2;
} yPDef_SCT_MN_TCH_LOOP_IND;
typedef yPDef_SCT_MN_TCH_LOOP_IND  *yPDP_SCT_MN_TCH_LOOP_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Boolean  Param1;
} yPDef_BSSIM_GET_L1_STATE_RES;
typedef yPDef_BSSIM_GET_L1_STATE_RES  *yPDP_BSSIM_GET_L1_STATE_RES;
typedef struct {
    SIGNAL_VARS
    BCCH_STRUCT_T  Param1;
} yPDef_BSSIM_BCCH_DATA_IND;
typedef yPDef_BSSIM_BCCH_DATA_IND  *yPDP_BSSIM_BCCH_DATA_IND;
typedef struct {
    SIGNAL_VARS
    PCH_STRUCT_T  Param1;
} yPDef_BSSIM_PCH_DATA_IND;
typedef yPDef_BSSIM_PCH_DATA_IND  *yPDP_BSSIM_PCH_DATA_IND;
typedef struct {
    SIGNAL_VARS
    PPCH_STRUCT_T  Param1;
} yPDef_BSSIM_PPCH_DATA_IND;
typedef yPDef_BSSIM_PPCH_DATA_IND  *yPDP_BSSIM_PPCH_DATA_IND;
typedef struct {
    SIGNAL_VARS
    RACH_STRUCT_T  Param1;
} yPDef_BSSIM_RACH_DATA_REQ;
typedef yPDef_BSSIM_RACH_DATA_REQ  *yPDP_BSSIM_RACH_DATA_REQ;
typedef struct {
    SIGNAL_VARS
    L2_DATA_IND_T  Param1;
} yPDef_BSSIM_L2_DATA_IND;
typedef yPDef_BSSIM_L2_DATA_IND  *yPDP_BSSIM_L2_DATA_IND;
typedef struct {
    SIGNAL_VARS
    MS_DATA_STRUCT_T  Param1;
} yPDef_BSSIM_MS_DATA_IND;
typedef yPDef_BSSIM_MS_DATA_IND  *yPDP_BSSIM_MS_DATA_IND;
typedef struct {
    SIGNAL_VARS
    POWER_SWEEP_STRUCT_T  Param1;
} yPDef_BSSIM_POWER_SWEEP_IND;
typedef yPDef_BSSIM_POWER_SWEEP_IND  *yPDP_BSSIM_POWER_SWEEP_IND;
typedef struct {
    SIGNAL_VARS
    SDL_Octet  Param1;
} yPDef_BSSIM_HANDOVER_ACCESS_REQ;
typedef yPDef_BSSIM_HANDOVER_ACCESS_REQ  *yPDP_BSSIM_HANDOVER_ACCESS_REQ;
typedef struct {
    SIGNAL_VARS
    L1_ERROR_CODE_E  Param1;
} yPDef_BSSIM_MS_ERROR_IND;
typedef yPDef_BSSIM_MS_ERROR_IND  *yPDP_BSSIM_MS_ERROR_IND;


                


                


#define UPLINK_TFI_PRESENT                      0
#define DOWNLINK_TFI_PRESENT                    1

extern void MACLIST_CsnListFree(
    CSN_LIST_T *list_ptr	
);


                


BOOLEAN RRC_CheckMaList(
                    MS_BAND_E ms_band,
                    MOBILE_ALLOCATION_T *ma_list
                    );

BOOLEAN RRC_DecodeFreqList(
                       int32 ie_length,
                       uint8  *msg_value,
                       ARFCN_LIST_T *freq_list
                       );



                

extern void MACPH_UpdateParameters(
    BOOLEAN * rlc_new_req_ptr,    
    CHAN_DESCR_T  *chan_descr_ptr 
);

extern void MACPH_ClearCtrlQ(void);

extern void MACPH_AddElementInCtrlQ(
    CTRL_BLOCK_ELMT_T ctr_block_elmt 
);

extern void MACPH_AddInPolledList (
    POLLED_BLOCK_ELMT_T polled_blk_elmt     
);

extern void MACPH_EncodePacketResReq(
    BOOLEAN is_two_phase,                   
    PACKET_RESOURCE_REQUEST_T * res_req_ptr,     
    BOOLEAN first_assi_egprs,                
    BOOLEAN *need_send_arac,                 
    uint8   *index_for_next_message          
        									 
);

extern void MACPH_PhReadMacBlocks(
    BLOCK_STRUCT_PTR_ARR_T  block_struct_ptr_arr,       
    POLLING_TS_INDEX_ARR_T  polling_slot_index_arr,     
    uint8                   * slot_mask_ptr,            
    ABSOLUTE_FRAME_NUMBER_T frame_number                
);

extern BOOLEAN MACPH_IsDataToMe(
	TBF_DIRECTION_T tbf_direction,	
	uint8 *data						
	);

extern void MACPH_PhAckMacSentNum (
    uint16 send_num,         
    ABSOLUTE_FRAME_NUMBER_T frame_number                
);

extern void PH_GetChnnlQultyRprt(
    CHANNEL_QUALITY_REP_T * channel_quality 
);



#ifdef  __cplusplus
}
#endif

#endif /* GEN_GSMGPRS_H */
